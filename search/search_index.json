{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rigs of Rods Documentation \u00b6 Here you'll find gameplay guides as well as tutorials and technical information for content creators. If you're new to Rigs of Rods, please read the Beginner's Guide . If you find an issue with the site, please report it on GitHub . Thanks!","title":"Home"},{"location":"#rigs-of-rods-documentation","text":"Here you'll find gameplay guides as well as tutorials and technical information for content creators. If you're new to Rigs of Rods, please read the Beginner's Guide . If you find an issue with the site, please report it on GitHub . Thanks!","title":"Rigs of Rods Documentation"},{"location":"gameplay/aircraft-handling/","text":"Aircraft handling \u00b6 How to use the autopilot \u00b6 You can find the autopilot on top of your dashboard in a plane. Upon startup it looks like this: The autopilot has different modes you can engage or disengage by pressing the buttons. When you change a value, the change is immediately applied to the current mode. Heading modes \u00b6 HDG (Heading): set the airplane heading to the heading selected (in degree) WLV (Wing Leveler): set the wings horizontal. The airplane should roughly keep its current heading. NAV (Radio Navigation): engage when approaching a runway equipped with an ILS equipment (the red and white antennas). The airplane will first try to intercept the runway axis, then stay along it until you pass the runway edge. Heading Listings \u00b6 This is a list of headings to use for ILS on included maps. North St. Helens main runway - 240 degrees Aspen main runway - 190 degrees Altitude modes \u00b6 HOLD (Hold altitude): set the altitude to the altitude selected (in feet). The the maximum vertical speed allowed to reach the altitude is selected by the vert.speed setting (in feet per minute, the sign of the selected vert speed is ignored). So this mode works better with a vert.speed different than 0! V/S (Vertical Speed): set the vertical speed (in feet per minute), without a target altitude. Positive value to climb, negative to descent. NAV+V/S (Vertical Radio Navigation): when both NAV and V/S are selected, the altitude is controlled by the ILS system. So when approaching a runway with NAV , engage V/S to make the plane descend to the runway. Speed mode \u00b6 ATHR (Auto-Throttles) set the speed of the airplane as selected in IAS (Indicated Air Speed, in knots). other buttons \u00b6 GPWS (Ground Proximity Warning System): when engaged, a recorded voice calls altitude and warns in case of dangerous maneuvers close to the ground. BRKS (Parking brakes) Horizontal Navigation Indicator (HSI) \u00b6 There is a simplified HSI (Horizontal Navigation Indicator) instrument between the AOA (Angle of Approach) indicator and the engine gauges. It includes: a compass a heading bug (that runs along the heading selector) two position indicators: a vertical bar for horizontal deviation a horizontal bar for vertical deviation. They tell you how far you are from the optimal trajectory when you do an ILS approach. The optimal position is when both bars are at the center of the display. How to do a successful instruments approach with the ILS \u00b6 ensure the approach you want to do is equipped with an ILS: check if there are red and white antennas at the end of the runway, at the side where you will touch down. Be sure the approach is clear of obstacles. fly to a comfortable distance from the runway, preferably off the terrain. ensure you are at the right altitude for an approach from that distance. If the horizontal bar is low, descend, if it is high, climb. fly in a way so you will soon intercept the runway axis, or are roughly on the runway axis Engage NAV, then V/S. Drop the joystick. The plane should fly by itself now, intercepting the runway axis and descending to the runway. You can see how it performs on the HSI display. The bars should cross at the center when the approach is stabilized. Control your speed! You should fly as slow as possible (around 100 knots for the Antonov 12). Use auto-throttle if possible. Watch the AOA, if it gets too high, you will stall! Add more flaps in that case. If you go too fast, the plane will not descend and the horizontal bar will go down. On short final, the GPWS calls \"Minimums\": you reached the minimum decision altitude. If you see the runway and everything is fine, proceed to the landing (real pilots disconnect the autopilot at this stage and land by the hand). The autopilot should disconnect at the runway edge, but in some case it can continue to function, so be cautious at the flare. Engage reverses and brake (press and maintain key B). You landed!","title":"Aircraft handling"},{"location":"gameplay/aircraft-handling/#aircraft-handling","text":"","title":"Aircraft handling"},{"location":"gameplay/aircraft-handling/#how-to-use-the-autopilot","text":"You can find the autopilot on top of your dashboard in a plane. Upon startup it looks like this: The autopilot has different modes you can engage or disengage by pressing the buttons. When you change a value, the change is immediately applied to the current mode.","title":"How to use the autopilot"},{"location":"gameplay/aircraft-handling/#heading-modes","text":"HDG (Heading): set the airplane heading to the heading selected (in degree) WLV (Wing Leveler): set the wings horizontal. The airplane should roughly keep its current heading. NAV (Radio Navigation): engage when approaching a runway equipped with an ILS equipment (the red and white antennas). The airplane will first try to intercept the runway axis, then stay along it until you pass the runway edge.","title":"Heading modes"},{"location":"gameplay/aircraft-handling/#heading-listings","text":"This is a list of headings to use for ILS on included maps. North St. Helens main runway - 240 degrees Aspen main runway - 190 degrees","title":"Heading Listings"},{"location":"gameplay/aircraft-handling/#altitude-modes","text":"HOLD (Hold altitude): set the altitude to the altitude selected (in feet). The the maximum vertical speed allowed to reach the altitude is selected by the vert.speed setting (in feet per minute, the sign of the selected vert speed is ignored). So this mode works better with a vert.speed different than 0! V/S (Vertical Speed): set the vertical speed (in feet per minute), without a target altitude. Positive value to climb, negative to descent. NAV+V/S (Vertical Radio Navigation): when both NAV and V/S are selected, the altitude is controlled by the ILS system. So when approaching a runway with NAV , engage V/S to make the plane descend to the runway.","title":"Altitude modes"},{"location":"gameplay/aircraft-handling/#speed-mode","text":"ATHR (Auto-Throttles) set the speed of the airplane as selected in IAS (Indicated Air Speed, in knots).","title":"Speed mode"},{"location":"gameplay/aircraft-handling/#other-buttons","text":"GPWS (Ground Proximity Warning System): when engaged, a recorded voice calls altitude and warns in case of dangerous maneuvers close to the ground. BRKS (Parking brakes)","title":"other buttons"},{"location":"gameplay/aircraft-handling/#horizontal-navigation-indicator-hsi","text":"There is a simplified HSI (Horizontal Navigation Indicator) instrument between the AOA (Angle of Approach) indicator and the engine gauges. It includes: a compass a heading bug (that runs along the heading selector) two position indicators: a vertical bar for horizontal deviation a horizontal bar for vertical deviation. They tell you how far you are from the optimal trajectory when you do an ILS approach. The optimal position is when both bars are at the center of the display.","title":"Horizontal Navigation Indicator (HSI)"},{"location":"gameplay/aircraft-handling/#how-to-do-a-successful-instruments-approach-with-the-ils","text":"ensure the approach you want to do is equipped with an ILS: check if there are red and white antennas at the end of the runway, at the side where you will touch down. Be sure the approach is clear of obstacles. fly to a comfortable distance from the runway, preferably off the terrain. ensure you are at the right altitude for an approach from that distance. If the horizontal bar is low, descend, if it is high, climb. fly in a way so you will soon intercept the runway axis, or are roughly on the runway axis Engage NAV, then V/S. Drop the joystick. The plane should fly by itself now, intercepting the runway axis and descending to the runway. You can see how it performs on the HSI display. The bars should cross at the center when the approach is stabilized. Control your speed! You should fly as slow as possible (around 100 knots for the Antonov 12). Use auto-throttle if possible. Watch the AOA, if it gets too high, you will stall! Add more flaps in that case. If you go too fast, the plane will not descend and the horizontal bar will go down. On short final, the GPWS calls \"Minimums\": you reached the minimum decision altitude. If you see the runway and everything is fine, proceed to the landing (real pilots disconnect the autopilot at this stage and land by the hand). The autopilot should disconnect at the runway edge, but in some case it can continue to function, so be cautious at the flare. Engage reverses and brake (press and maintain key B). You landed!","title":"How to do a successful instruments approach with the ILS"},{"location":"gameplay/beginners-guide/","text":"Beginner's Guide \u00b6 Introduction \u00b6 Rigs of Rods (RoR) is a free/libre soft-body physics simulator mainly targeted at simulating vehicle physics. The soft-body physics system is based on mass-spring-damper theory. This page will help you learn the basics of Rigs of Rods, from your first run to playing multiplayer. First Run \u00b6 When launching RoR for the first time, the user directory will be created. On Windows this is located at Documents\\My Games\\Rigs of Rods or at ~/.rigsofrods on Linux. This is where configuration files, logs, and mods are stored. The game should open in a small window: Before playing, you should first change your settings. Begin by clicking Settings . First, make sure the rendering system is set to Direct3D9 Rendering Subsystem . If it's set to OpenGL Rendering Subsystem , change it then restart RoR. If Direct3D9 doesn't appear on the list, install the DirectX Runtime and restart your PC. If you're running Linux, ignore this as DirectX is not available. Now select Video Mode and change it to your monitor's native resolution then restart the game to apply your changes. Click Settings again, then click the Graphics tab. The following settings should be fine for most people, but feel free to adjust them to fit your liking. Then click the Audio tab and set the device and volume. Once you're finished, restart the game again. Now you're ready to begin playing. Start by clicking Single player to open the terrain selector. For the sake of this tutorial, select North St Helens . Once the terrain loads, you will spawn as a country person known lovingly as RoRBot. You control him with the arrow keys while using SHIFT to run and SPACE to jump (good for getting over bumps, or if you get stuck). You spawn in front of a building known as the Rig-a-Deal . This is where you will spawn new trucks. Walk into the \"Office\" to bring up the selection menu. You can also spawn a vehicle anywhere at any time by pressing CTRL+G . Use the mouse or arrow keys to move through the menus. Select the DAF Semi truck . The truck spawns inside the Rig-a-Deal with you inside it. If you happen to spawn the truck with RoRBot outside of the vehicle, simply hit ENTER / RETURN to get in a vehicle. Driving \u00b6 The DAF semi isn't the most agile or best looking truck in the game, but it serves us a purpose later. The camera inside the Rig-a-Deal is fixed, so you will be unable to move it until you leave. Switch to the in-cab camera by hitting C . Use the UP arrow key to accelerate out of the Rig-a-Deal (Rigs of Rods uses a simulated clutch which begins to engages at a specific point. This why the semi doesn't move until 1000 RPM). Use DOWN to brake, and LEFT / RIGHT arrows to steer. Use PGUP / PGDOWN to select your transmission direction/speed. Start by exploring Coldwater, the town you begin in. It isn't very big but provides some decent moving room. If you get stuck, or wreck, hit I to reset back to the Rig-a-Deal , or BACKSPACE to reset the truck in its current position. If you hold BACKSPACE for one second, you will enable the \"advanced repair mode\" which lets you move the vehicle to any position by using the WASD keys to move and the arrow keys to rotate. Press BACKSPACE again to exit. You can switch transmission modes by hitting Q . There are 5 transmission modes available: * Automatic shift * The gear change is fully automatic, the player only has to set the gear by pressing PGUP / PGDOWN . * Manual shift: Auto clutch * The gear is changed on user request. No clutch should be pressed to change gear, vehicle takes care of that. Just use A and Z to shift. * Fully manual: sequential shift * The user must press clutch and select whether it is needed to switch up or down. Depress the clutch by hitting LEFT SHIFT , then press A to upshift or Z to downshift. * Fully manual: stick shift * This mode is useful if you have a game controller with an H-shifter (like Logitech G27). In this mode the player can set gears 1-6, N, and R directly by the stick. * Fully manual: stick shift with ranges * This mode is mostly used in vehicles having more gears than 6. In this case you can select from 3 ranges: low (gear 1-6), medium (gear 7-12), high (gear 13-18) by pressing the appropriate button. Like if you want to select the 8 th gear, you have to select gear N first, press the midrange button, then select the 2 nd gear on the h-stick. Remember, range selection can be made only if the gear is in N. If you stall, there are 2 keys to be remembered: X enables or disables the electricity in the vehicle, and S activates the starter. Press X and you'll see a yellow battery icon lit on the UI. Hold S until the engine is started. Resetting the vehicle with BACKSPACE or I will instantly start the engine. Remember how to change the camera? Hit C twice. You're now in third-person view and can move the camera around. Use the number pad (specifically 2 , 4 , 6 , and 8 ) to move the camera. Pressing 5 resets the camera. 9 and 3 zoom in/out respectively and 1 gives you a front view of your truck. You can also move the camera by holding right-click and dragging with your mouse. Now, make your way back to the Rig-a-Deal . Trailer Loads \u00b6 You should see a large, grey, open-platform with an orange console. Park the truck (use P to set the parking brake) and hit ENTER / RETURN to get out. Note that the same camera commands work with RoRBot. Step in front of the orange console to open the load selector. Select the Semi trailer (37 tons) . Get back in the semi and drive in front of the load. Use the camera in third-person view to help you if you need. Back into the trailer. When you get close, use F1 / F2 to lower and raise the trailer legs respectively. The hook points must be within 10cm to hook, so it may take some practice to get close. When you think you're close, hit L . If you're close enough, the semi will latch to the trailer. Raise the legs by holding F1 . You can now drive around with the trailer. You will notice that the trailer has a large effect on how the semi pulls and handles! This process is the same for most trailers. In some cases you can secure loads to trucks using O . NOTE: on some computers trailers may increase lag or decrease FPS(frames per second) dramatically! Flying \u00b6 Now that we've become comfortable with driving. Let's try to fly. Move your mouse to the to top of the screen to bring up the menubar, click Vehicles then Antonov 12 to instantly enter the plane which is sitting on the runway. Apply the parking brake by pressing P . Turn on the flying lights by pressing M . Start the engines by using your mouse to click the ON buttons in the lower right hand corner (or by pressing CTRL+HOME ). When the engines settle to the appropriate idle speed (somewhere near 750rpm), release the parking brake and throttle the engines to full by holding PGUP . Pressing CTRL+PGUP will instantly set the throttle to max. If you have a short runway, be sure to use the flaps with 1 and 2 (this is especially helpful in multiplayer). When you reach 75-80 knots, lift up by pressing the DOWN arrow. Steer with the LEFT / RIGHT arrows and control the rudder with Z and X . Raise the landing gear, in this plane, by holding F3 . The An-12 does not stand high speeds (175+ knots) well, and you may find that if you go too fast the wings will break apart! When it comes to landing, make sure you have room to slow down and take your time. Going straight into the runway is the easiest way to land when you first start off. It may take a few passes to go head-on so don't be afraid to abort a landing and throttle back up to regain altitude. The entire process is easier if you shadows enabled, but is possible without. When you land, hit R to reverse thrust and throttle up to slow down in addition to using B to brake the wheels. This tutorial does not make use of the autopilot. For more information regarding the use of autopilot, see Aircraft handling . Boating \u00b6 We must explore beyond Coldwater to get to the marina. Take the main road out of Coldwater, heading southwest toward the Elk Hotel. Take the second left after you leave town. You should see the water soon. When you arrive at the marina, you should see marina-style boat docks and a ramp along with a building. Walk around to the front of the building and enter the open door. Choose the Wahoo boat. Use UP / DOWN to throttle and LEFT / RIGHT to steer. Use PGUP to center the throttle (to neutral) and PGDOWN to center the rudder. It may take you a while to get your sea legs. If you have waves enabled, see how far out you can go before you flip over waves! Conclusion \u00b6 Now that you have a basic grasp of the basic vehicles in RoR, it is now up to you to create your own scenarios. If you feel bored, try the vast selection of mods available on the Repository . Multiplayer \u00b6 If you feel like sharing the experience, you can play on one of the many public multiplayer servers. To get started, click the Multi player button on the main menu. Set your username by clicking on Settings and changing it in the Player nickname textbox. You may have to restart the game for the changes to take effect. Now just select the server you want to play on, then click Join . The 'any' servers allow you to select a terrain, while other servers (such as Official Nhelens) are set to use a specific terrain. While on a server, you can enable collisions between other players or hide nicknames by going to Settings in the top menubar. Note that multiplayer is still in development and can be unstable at times! Default controls \u00b6 Please see the Controls and configuration page for a full list of controls. Adding content \u00b6 To add new vehicles and terrains, go to the Installing content page.","title":"Beginner's Guide"},{"location":"gameplay/beginners-guide/#beginners-guide","text":"","title":"Beginner's Guide"},{"location":"gameplay/beginners-guide/#introduction","text":"Rigs of Rods (RoR) is a free/libre soft-body physics simulator mainly targeted at simulating vehicle physics. The soft-body physics system is based on mass-spring-damper theory. This page will help you learn the basics of Rigs of Rods, from your first run to playing multiplayer.","title":"Introduction"},{"location":"gameplay/beginners-guide/#first-run","text":"When launching RoR for the first time, the user directory will be created. On Windows this is located at Documents\\My Games\\Rigs of Rods or at ~/.rigsofrods on Linux. This is where configuration files, logs, and mods are stored. The game should open in a small window: Before playing, you should first change your settings. Begin by clicking Settings . First, make sure the rendering system is set to Direct3D9 Rendering Subsystem . If it's set to OpenGL Rendering Subsystem , change it then restart RoR. If Direct3D9 doesn't appear on the list, install the DirectX Runtime and restart your PC. If you're running Linux, ignore this as DirectX is not available. Now select Video Mode and change it to your monitor's native resolution then restart the game to apply your changes. Click Settings again, then click the Graphics tab. The following settings should be fine for most people, but feel free to adjust them to fit your liking. Then click the Audio tab and set the device and volume. Once you're finished, restart the game again. Now you're ready to begin playing. Start by clicking Single player to open the terrain selector. For the sake of this tutorial, select North St Helens . Once the terrain loads, you will spawn as a country person known lovingly as RoRBot. You control him with the arrow keys while using SHIFT to run and SPACE to jump (good for getting over bumps, or if you get stuck). You spawn in front of a building known as the Rig-a-Deal . This is where you will spawn new trucks. Walk into the \"Office\" to bring up the selection menu. You can also spawn a vehicle anywhere at any time by pressing CTRL+G . Use the mouse or arrow keys to move through the menus. Select the DAF Semi truck . The truck spawns inside the Rig-a-Deal with you inside it. If you happen to spawn the truck with RoRBot outside of the vehicle, simply hit ENTER / RETURN to get in a vehicle.","title":"First Run"},{"location":"gameplay/beginners-guide/#driving","text":"The DAF semi isn't the most agile or best looking truck in the game, but it serves us a purpose later. The camera inside the Rig-a-Deal is fixed, so you will be unable to move it until you leave. Switch to the in-cab camera by hitting C . Use the UP arrow key to accelerate out of the Rig-a-Deal (Rigs of Rods uses a simulated clutch which begins to engages at a specific point. This why the semi doesn't move until 1000 RPM). Use DOWN to brake, and LEFT / RIGHT arrows to steer. Use PGUP / PGDOWN to select your transmission direction/speed. Start by exploring Coldwater, the town you begin in. It isn't very big but provides some decent moving room. If you get stuck, or wreck, hit I to reset back to the Rig-a-Deal , or BACKSPACE to reset the truck in its current position. If you hold BACKSPACE for one second, you will enable the \"advanced repair mode\" which lets you move the vehicle to any position by using the WASD keys to move and the arrow keys to rotate. Press BACKSPACE again to exit. You can switch transmission modes by hitting Q . There are 5 transmission modes available: * Automatic shift * The gear change is fully automatic, the player only has to set the gear by pressing PGUP / PGDOWN . * Manual shift: Auto clutch * The gear is changed on user request. No clutch should be pressed to change gear, vehicle takes care of that. Just use A and Z to shift. * Fully manual: sequential shift * The user must press clutch and select whether it is needed to switch up or down. Depress the clutch by hitting LEFT SHIFT , then press A to upshift or Z to downshift. * Fully manual: stick shift * This mode is useful if you have a game controller with an H-shifter (like Logitech G27). In this mode the player can set gears 1-6, N, and R directly by the stick. * Fully manual: stick shift with ranges * This mode is mostly used in vehicles having more gears than 6. In this case you can select from 3 ranges: low (gear 1-6), medium (gear 7-12), high (gear 13-18) by pressing the appropriate button. Like if you want to select the 8 th gear, you have to select gear N first, press the midrange button, then select the 2 nd gear on the h-stick. Remember, range selection can be made only if the gear is in N. If you stall, there are 2 keys to be remembered: X enables or disables the electricity in the vehicle, and S activates the starter. Press X and you'll see a yellow battery icon lit on the UI. Hold S until the engine is started. Resetting the vehicle with BACKSPACE or I will instantly start the engine. Remember how to change the camera? Hit C twice. You're now in third-person view and can move the camera around. Use the number pad (specifically 2 , 4 , 6 , and 8 ) to move the camera. Pressing 5 resets the camera. 9 and 3 zoom in/out respectively and 1 gives you a front view of your truck. You can also move the camera by holding right-click and dragging with your mouse. Now, make your way back to the Rig-a-Deal .","title":"Driving"},{"location":"gameplay/beginners-guide/#trailer-loads","text":"You should see a large, grey, open-platform with an orange console. Park the truck (use P to set the parking brake) and hit ENTER / RETURN to get out. Note that the same camera commands work with RoRBot. Step in front of the orange console to open the load selector. Select the Semi trailer (37 tons) . Get back in the semi and drive in front of the load. Use the camera in third-person view to help you if you need. Back into the trailer. When you get close, use F1 / F2 to lower and raise the trailer legs respectively. The hook points must be within 10cm to hook, so it may take some practice to get close. When you think you're close, hit L . If you're close enough, the semi will latch to the trailer. Raise the legs by holding F1 . You can now drive around with the trailer. You will notice that the trailer has a large effect on how the semi pulls and handles! This process is the same for most trailers. In some cases you can secure loads to trucks using O . NOTE: on some computers trailers may increase lag or decrease FPS(frames per second) dramatically!","title":"Trailer Loads"},{"location":"gameplay/beginners-guide/#flying","text":"Now that we've become comfortable with driving. Let's try to fly. Move your mouse to the to top of the screen to bring up the menubar, click Vehicles then Antonov 12 to instantly enter the plane which is sitting on the runway. Apply the parking brake by pressing P . Turn on the flying lights by pressing M . Start the engines by using your mouse to click the ON buttons in the lower right hand corner (or by pressing CTRL+HOME ). When the engines settle to the appropriate idle speed (somewhere near 750rpm), release the parking brake and throttle the engines to full by holding PGUP . Pressing CTRL+PGUP will instantly set the throttle to max. If you have a short runway, be sure to use the flaps with 1 and 2 (this is especially helpful in multiplayer). When you reach 75-80 knots, lift up by pressing the DOWN arrow. Steer with the LEFT / RIGHT arrows and control the rudder with Z and X . Raise the landing gear, in this plane, by holding F3 . The An-12 does not stand high speeds (175+ knots) well, and you may find that if you go too fast the wings will break apart! When it comes to landing, make sure you have room to slow down and take your time. Going straight into the runway is the easiest way to land when you first start off. It may take a few passes to go head-on so don't be afraid to abort a landing and throttle back up to regain altitude. The entire process is easier if you shadows enabled, but is possible without. When you land, hit R to reverse thrust and throttle up to slow down in addition to using B to brake the wheels. This tutorial does not make use of the autopilot. For more information regarding the use of autopilot, see Aircraft handling .","title":"Flying"},{"location":"gameplay/beginners-guide/#boating","text":"We must explore beyond Coldwater to get to the marina. Take the main road out of Coldwater, heading southwest toward the Elk Hotel. Take the second left after you leave town. You should see the water soon. When you arrive at the marina, you should see marina-style boat docks and a ramp along with a building. Walk around to the front of the building and enter the open door. Choose the Wahoo boat. Use UP / DOWN to throttle and LEFT / RIGHT to steer. Use PGUP to center the throttle (to neutral) and PGDOWN to center the rudder. It may take you a while to get your sea legs. If you have waves enabled, see how far out you can go before you flip over waves!","title":"Boating"},{"location":"gameplay/beginners-guide/#conclusion","text":"Now that you have a basic grasp of the basic vehicles in RoR, it is now up to you to create your own scenarios. If you feel bored, try the vast selection of mods available on the Repository .","title":"Conclusion"},{"location":"gameplay/beginners-guide/#multiplayer","text":"If you feel like sharing the experience, you can play on one of the many public multiplayer servers. To get started, click the Multi player button on the main menu. Set your username by clicking on Settings and changing it in the Player nickname textbox. You may have to restart the game for the changes to take effect. Now just select the server you want to play on, then click Join . The 'any' servers allow you to select a terrain, while other servers (such as Official Nhelens) are set to use a specific terrain. While on a server, you can enable collisions between other players or hide nicknames by going to Settings in the top menubar. Note that multiplayer is still in development and can be unstable at times!","title":"Multiplayer"},{"location":"gameplay/beginners-guide/#default-controls","text":"Please see the Controls and configuration page for a full list of controls.","title":"Default controls"},{"location":"gameplay/beginners-guide/#adding-content","text":"To add new vehicles and terrains, go to the Installing content page.","title":"Adding content"},{"location":"gameplay/controls-config/","text":"Controls and configuration \u00b6 Intro \u00b6 Rigs of Rods is a simulator which strives for maximum realism, and hence you need an appropriate controller, such as a wheel for land vehicles and joystick for aerial or marine vehicles. Input is configured by editing configuration file input.map or by using the Input Mapping Tool . In-game configuration of controls is not implemented yet. Keyboard layout \u00b6 General controls \u00b6 General Key Pause game ESC Quit game ALT+F4 Spawn new vehicle CTRL+G Enter or exit vehicle ENTER Reset vehicle I Reset vehicle in place BACKSPACE View vehicle statistics T View vehicle commands CTRL+T Screenshot Print Screen/SYSRQ Chat (Multiplayer) Y Toggle HUD U Toggle soft reset mode APOSTROPHE Toggle limited camera movement SHIFT+SPACE Adjust simulation speed CTRL+= / SHIFT+= Reset simulation speed/set preset BACKSLASH Switch between vehicles CTRL+RBRACKET / CTRL+LBRACKET Remove current vehicle CTRL+Del Respawn last vehicle CTRL+ . (period) Character \u00b6 Character Key Jump SPACE Turn right RIGHT Turn left LEFT Walk forwards UP Walk backwards DOWN Run SHIFT+UP Camera \u00b6 Camera Key Change view C Rotate up/down Numpad 8 / Numpad 2 Rotate left/right Numpad 4 / Numpad 6 Zoom in/out Numpad 9 / Numpad 3 Zoom in/out (fast) SHIFT+Numpad 9 / SHIFT+Numpad 3 Free camera SHIFT+C Fixed camera ALT+C Decrease FOV Numpad 7 Increase FOV CTRL+Numpad 7 Reset FOV SHIFT+Numpad 7 Time \u00b6 Sky type must be set to Caelum or SkyX. Sandstorm sky does not support time change. Time Adjust Key Change time Numpad + (plus) / Numpad - (minus) Change time (fast) SHIFT+Numpad + (plus) / SHIFT+Numpad - (minus) Overview map \u00b6 Map Key Toggle map view TAB Zoom in/out CTRL+TAB / SHIFT+TAB Toggle alpha CTRL+SHIFT+TAB Toggle icons CTRL+SHIFT+ALT+TAB Saves \u00b6 Note You can load a savegame from the main menu. Savegames Key Quick save NUMPAD / (divide) Quick load NUMPAD * (multiply) Save slot 1 CTRL+ALT+1 Save slot 2 CTRL+ALT+2 Save slot 3 CTRL+ALT+3 Save slot 4 CTRL+ALT+4 Save slot 5 CTRL+ALT+5 Load slot 1 ALT+1 Load slot 2 ALT+2 Load slot 3 ALT+3 Load slot 4 ALT+4 Load slot 5 ALT+5 Common vehicle controls \u00b6 Basic vehicle controls Key Steer Left LEFT Steer Right RIGHT Accelerate/Brake UP / DOWN Shifting \u00b6 Shifting Key Autoshift up PGUP Autoshift down PGDOWN Switch shift modes Q Manual clutch SHIFT Shift up A Shift down Z Lights \u00b6 Misc Key Toggle headlights N Toggle beacons M Blinker left , (comma) Blinker right . (period) Blinker hazards - (hyphen) Custom lights (e.g. lightbars) CTRL+1, CTRL+2 ... CTRL+9, CTRL+0 Misc \u00b6 Misc Key Truck horn H Parking brake P Trailer parking brake CTRL+P Toggle contact (ignition) X Starter (hold) S Attach trailer L Inter-wheel differentials W Inter-axle differentials CTRL+W Transfer case (2WD/4WD) SHIFT+W Alternate gear ratios ALT+W Secure Load O Show skeleton K Cycle skeleton views CTRL+K Rescue truck R Particle cannon (e.g. water cannons on fire trucks) G Tire Pressure (not supported by most vehicles) RBRACKET [ / LBRACKET ] Commands \u00b6 Function keys Combo COMMANDS 01 F1 ... ... COMMANDS 12 F12 COMMANDS 13 CTRL + F1 ... ... COMMANDS 24 CTRL + F12 COMMANDS 25 ALT + F1 ... ... COMMANDS 36 ALT + F12 COMMANDS 37 CTRL + ALT + F1 ... ... COMMANDS 48 CTRL + ALT + F12 COMMANDS 49 CTRL+ SHIFT + F1 ... ... COMMANDS 58 CTRL + SHIFT + F10 COMMANDS 59 CTRL + SHIFT + F11 ... ... COMMANDS 68 CTRL + ALT + F8 COMMANDS 69 CTRL + ALT + F9 ... ... COMMANDS 78 CTRL + SHIFT + ALT + F6 COMMANDS 79 CTRL + SHIFT + ALT + F7 ... ... COMMANDS 83 CTRL + SHIFT + ALT + F11 COMMANDS 84 CTRL + SHIFT + ALT + F12 Notes Some vehicles use ALT+F4 as a command, which closes the game window. To avoid this press F4 then ALT. Some laptops require you to hold the FN key in order to use commands. Aerial and marine controls \u00b6 Planes \u00b6 Airplane controls Key Steer left LEFT Steer right RIGHT Elevator up UP Elevator down DOWN Rudder right X Rudder left Z Brake B Parking brake P Reverse R Less flaps 1 More flaps 2 Less airbrakes 3 More airbrakes 4 Throttle down PAGE-DOWN Throttle up PAGE-UP Start engines CLICK BUTTONS \"ON\" Start all engines CTRL+HOME Full throttle CTRL+PAGEUP No throttle CTRL+PAGEDOWN It is recommended to use: CTRL+Home to start all engines of a plane and CTRL+PAGE-UP to full throttle all engines because some planes could have more than 4 engines and you couldn't control them with your mouse. Boats \u00b6 Boat controls Key Throttle down DOWN Throttle up UP Steer left LEFT Steer right RIGHT Center rudder PGUP Center throttle PGDOWN Config file 'input.map' \u00b6 This file defines all key alias for RoR, located at Documents\\My Games\\Rigs of Rods\\config by default. It has the following format: EVENT_NAME EVENT_TYPE MAPPING For example: BOAT_CENTER_RUDDER Keyboard DOWN This binds the BOAT_CENTER_RUDDER event to the Down arrow on your keyboard. A list of all valid events can be found in the Keypress Events section. Keyboard \u00b6 For the keyboard there are several special things: Modifiers \u00b6 CTRL SHIFT ALT Combine them with a + sign. Example: CAMERA_FREE_MODE Keyboard EXPL+SHIFT+C The EXPL tag \u00b6 A special keyword used in defining commands. In this example, only COMMANDS_01 is triggered when pressing F1, and COMMANDS_13 is triggered when pressing CTRL+F1 (but not COMMANDS_01) COMMANDS_01 Keyboard EXPL+F1 COMMANDS_13 Keyboard EXPL+CTRL+F1 In this example, COMMANDS_01 would be triggered if you press CTRL+F1, as F1 is part of the COMMANDS_13 combination. COMMANDS_01 Keyboard F1 COMMANDS_13 Keyboard CTRL+F1 List of usable keys \u00b6 0 1 2 3 4 5 6 7 8 9 A ABNT_C1 ABNT_C2 ADD APOSTROPHE APPS AT AX B BACK BACKSLASH C CALCULATOR CAPITAL COLON COMMA CONVERT D DECIMAL DELETE DIVIDE DOWN E END EQUALS ESCAPE F F1 F10 F11 F12 F13 F14 F15 F2 F3 F4 F5 F6 F7 F8 F9 G GRAVE H HOME I INSERT J K KANA KANJI L LBRACKET LCONTROL LEFT LMENU LSHIFT LWIN M MAIL MEDIASELECT MEDIASTOP MINUS MULTIPLY MUTE MYCOMPUTER N NEXTTRACK NOCONVERT NUMLOCK NUMPAD0 NUMPAD1 NUMPAD2 NUMPAD3 NUMPAD4 NUMPAD5 NUMPAD6 NUMPAD7 NUMPAD8 NUMPAD9 NUMPADCOMMA NUMPADENTER NUMPADEQUALS O OEM_102 P PAUSE PERIOD PGDOWN PGUP PLAYPAUSE POWER PREVTRACK Q R RBRACKET RCONTROL RETURN RIGHT RMENU RSHIFT RWIN S SCROLL SEMICOLON SLASH SLEEP SPACE STOP SUBTRACT SYSRQ T TAB U UNDERLINE UNLABELED UP V VOLUMEDOWN VOLUMEUP W WAKE WEBBACK WEBFAVORITES WEBFORWARD WEBHOME WEBREFRESH WEBSEARCH WEBSTOP X Y YEN Z Joystick, Wheel or gamepad \u00b6 This category covers all analogue input devices detected by the operating system, so all gamepads, joysticks, wheels, pedals, etc. JoystickButton \u00b6 Arguments: Joystick Number (unused in modern mappings), set to 0 Button number AIRPLANE_THROTTLE_DOWN JoystickButton 0 2 JoystickAxis \u00b6 Arguments: Joystick Number (unused in modern mappings), set to 0 Axis number Options: HALF REVERSE UPPER LOWER RELATIVE DIGITAL DEADZONE : add deadzone in percent with equal sign: \"DEADZONE=0.15\". LINEARITY : add linearity in percent with equal sign: \"LINEARITY=0.15\". AIRPLANE_STEER_RIGHT JoystickAxis 0 1 UPPER+DEADZONE = 0.15 JoystickPov \u00b6 Arguments: Joystick Number (unused in modern mappings), set to 0 POV number Direction: North , South , East , West , NorthEast , SouthEast , NorthWest , SouthWest . CHARACTER_FORWARD JoystickPov 0 0 North JoystickSlider, JoystickSliderX, JoystickSliderY \u00b6 Arguments: Joystick Number (unused in modern mappings), set to 0 Slider number Options: REVERSE TRUCK_MANUAL_CLUTCH JoystickSliderY 0 Y 0 REVERSE+DEADZONE = -30 Keypress Events \u00b6 Keypress event identification in RoR 0.4.7.0+ These are all the valid keypress events, they can be used in a input map or for prop animations . not all make sense though for animated props. AIRPLANE_AIRBRAKES_FULL AIRPLANE_AIRBRAKES_LESS AIRPLANE_AIRBRAKES_MORE AIRPLANE_AIRBRAKES_NONE AIRPLANE_BRAKE AIRPLANE_ELEVATOR_DOWN AIRPLANE_ELEVATOR_UP AIRPLANE_FLAPS_FULL AIRPLANE_FLAPS_LESS AIRPLANE_FLAPS_MORE AIRPLANE_FLAPS_NONE AIRPLANE_PARKING_BRAKE AIRPLANE_REVERSE AIRPLANE_RUDDER_LEFT AIRPLANE_RUDDER_RIGHT AIRPLANE_STEER_LEFT AIRPLANE_STEER_RIGHT AIRPLANE_THROTTLE_AXIS AIRPLANE_THROTTLE_DOWN AIRPLANE_THROTTLE_FULL AIRPLANE_THROTTLE_NO AIRPLANE_THROTTLE_UP AIRPLANE_TOGGLE_ENGINES BOAT_CENTER_RUDDER BOAT_REVERSE BOAT_STEER_LEFT BOAT_STEER_RIGHT BOAT_THROTTLE_AXIS BOAT_THROTTLE_UP BOAT_THROTTLE_DOWN CAMERA_CHANGE CAMERA_FREE_MODE CAMERA_FREE_MODE_FIX CAMERA_LOOKBACK CAMERA_RESET CAMERA_UP CAMERA_DOWN CAMERA_ROTATE_DOWN CAMERA_ROTATE_LEFT CAMERA_ROTATE_RIGHT CAMERA_ROTATE_UP CAMERA_ZOOM_IN CAMERA_ZOOM_IN_FAST CAMERA_ZOOM_OUT CAMERA_ZOOM_OUT_FAST SKY_DECREASE_TIME SKY_DECREASE_TIME_FAST SKY_INCREASE_TIME SKY_INCREASE_TIME_FAST CHARACTER_BACKWARDS CHARACTER_FORWARD CHARACTER_JUMP CHARACTER_LEFT CHARACTER_RIGHT CHARACTER_ROT_DOWN CHARACTER_ROT_UP CHARACTER_RUN CHARACTER_RUN CHARACTER_SIDESTEP_LEFT CHARACTER_SIDESTEP_RIGHT COMMANDS_01 COMMANDS_02 COMMANDS_03 COMMANDS_04 COMMANDS_05 COMMANDS_06 COMMANDS_07 COMMANDS_08 COMMANDS_09 COMMANDS_10 COMMANDS_11 COMMANDS_12 COMMANDS_13 COMMANDS_14 COMMANDS_15 COMMANDS_16 COMMANDS_17 COMMANDS_18 COMMANDS_19 COMMANDS_20 COMMANDS_21 COMMANDS_22 COMMANDS_23 COMMANDS_24 COMMANDS_25 COMMANDS_26 COMMANDS_27 COMMANDS_28 COMMANDS_29 COMMANDS_30 COMMANDS_31 COMMANDS_32 COMMANDS_33 COMMANDS_34 COMMANDS_35 COMMANDS_36 COMMANDS_37 COMMANDS_38 COMMANDS_39 COMMANDS_40 COMMANDS_41 COMMANDS_42 COMMANDS_43 COMMANDS_44 COMMANDS_45 COMMANDS_46 COMMANDS_47 COMMANDS_48 COMMANDS_49 COMMANDS_50 COMMANDS_51 COMMANDS_52 COMMANDS_53 COMMANDS_54 COMMANDS_55 COMMANDS_56 COMMANDS_57 COMMANDS_58 COMMANDS_59 COMMANDS_60 COMMANDS_61 COMMANDS_62 COMMANDS_63 COMMANDS_64 COMMANDS_65 COMMANDS_66 COMMANDS_67 COMMANDS_68 COMMANDS_69 COMMANDS_70 COMMANDS_71 COMMANDS_72 COMMANDS_73 COMMANDS_74 COMMANDS_75 COMMANDS_76 COMMANDS_77 COMMANDS_78 COMMANDS_79 COMMANDS_80 COMMANDS_81 COMMANDS_82 COMMANDS_83 COMMANDS_84 COMMON_ACCELERATE_SIMULATION COMMON_DECELERATE_SIMULATION COMMON_RESET_SIMULATION_PACE COMMON_CONSOLE_TOGGLE COMMON_ENTER_OR_EXIT_TRUCK COMMON_ENTER_NEXT_TRUCK COMMON_ENTER_PREVIOUS_TRUCK COMMON_REMOVE_CURRENT_TRUCK COMMON_RESPAWN_LAST_TRUCK COMMON_FULLSCREEN_TOGGLE COMMON_HIDE_GUI COMMON_LOCK COMMON_AUTOLOCK COMMON_ROPELOCK COMMON_OUTPUT_POSITION COMMON_GET_NEW_VEHICLE COMMON_PRESSURE_LESS COMMON_PRESSURE_MORE COMMON_QUIT_GAME COMMON_REPLAY_BACKWARD COMMON_REPLAY_FAST_BACKWARD COMMON_REPLAY_FAST_FORWARD COMMON_REPLAY_FORWARD COMMON_RESCUE_TRUCK COMMON_RESET_TRUCK COMMON_SCREENSHOT COMMON_SECURE_LOAD COMMON_SHOW_SKELETON COMMON_TOGGLE_TERRAIN_EDITOR COMMON_TOGGLE_CUSTOM_PARTICL COMMON_TOGGLE_MAT_DEBUG COMMON_TOGGLE_RENDER_MODE COMMON_TOGGLE_REPLAY_MODE COMMON_TOGGLE_STATS COMMON_TOGGLE_TRUCK_BEACONS COMMON_TOGGLE_TRUCK_LIGHTS COMMON_TRUCK_INFO COMMON_TRUCK_DESCRIPTION COMMON_FOV_LESS COMMON_FOV_MORE GRASS_LESS GRASS_MORE GRASS_MOST GRASS_NONE GRASS_SAVE SURVEY_MAP_ZOOM_IN SURVEY_MAP_ZOOM_OUT SURVEY_MAP_TOGGLE_VIEW SURVEY_MAP_TOGGLE_ALPHA SURVEY_MAP_TOGGLE_ICONS MENU_DOWN MENU_LEFT MENU_RIGHT MENU_SELECT MENU_UP TRUCK_ACCELERATE TRUCK_ACCELERATE_MODIFIER_25 TRUCK_ACCELERATE_MODIFIER_50 TRUCK_ANTILOCK_BRAKE TRUCK_AUTOSHIFT_DOWN TRUCK_AUTOSHIFT_UP TRUCK_BLINK_LEFT TRUCK_BLINK_RIGHT TRUCK_BLINK_WARN TRUCK_BRAKE TRUCK_BRAKE_MODIFIER_25 TRUCK_BRAKE_MODIFIER_50 TRUCK_CRUISE_CONTROL TRUCK_CRUISE_CONTROL_READJUS TRUCK_CRUISE_CONTROL_ACCL TRUCK_CRUISE_CONTROL_DECL TRUCK_HORN TRUCK_LIGHTTOGGLE1 TRUCK_LIGHTTOGGLE2 TRUCK_LIGHTTOGGLE3 TRUCK_LIGHTTOGGLE4 TRUCK_LIGHTTOGGLE5 TRUCK_LIGHTTOGGLE6 TRUCK_LIGHTTOGGLE7 TRUCK_LIGHTTOGGLE8 TRUCK_LIGHTTOGGLE9 TRUCK_LIGHTTOGGLE10 TRUCK_MANUAL_CLUTCH TRUCK_PARKING_BRAKE TRUCK_SHIFT_DOWN TRUCK_SHIFT_NEUTRAL TRUCK_SHIFT_UP TRUCK_STARTER TRUCK_STEER_LEFT TRUCK_STEER_RIGHT TRUCK_SWITCH_SHIFT_MODES TRUCK_TOGGLE_AXLE_LOCK TRUCK_TOGGLE_CONTACT TRUCK_TOGGLE_FORWARDCOMMANDS TRUCK_TOGGLE_IMPORTCOMMANDS TRUCK_TOGGLE_VIDEOCAMERA TRUCK_TRACTION_CONTROL Mouse \u00b6 Required applications \u00b6 vJoy joystick emulator FreePIE input emulator Setting up the input map and FreePIE script \u00b6 After installing the above applications, download this zip file which contains the required input map and FreePIE script. There will be two files in the zip: vJoy_Device.map and MouseControl.py . Extract both files into Documents\\My Games\\Rigs of Rods\\config . Using FreePIE \u00b6 Open FreePIE and press File -> Open . Browse to the MouseControl.py file you downloaded earlier: Then press Script -> Run script : The script should now be running. If you get an error, install vJoy. Leave FreePIE running, launch RoR and you should now have mouse control! You can modify both the script and the input map to make them better suit for your use. For example the numbers 40 and 80 in the script are the sensitivity of the controls. Mouse middle button in the script above, will reset the axises in game, in this case the steering and throttle. Configuring controls with the Input Mapping Tool \u00b6 The easiest way to configure your device for use in Rigs of Rods is to use the Input Mapping Tool . vJoy Conflicts \u00b6 Note If you have vJoy installed, you will have to disable it before running the tool! Launching the tool \u00b6 After downloading, extract the zip into a new folder. Then double-click Run.bat to launch the tool. Adding new inputs \u00b6 To begin adding inputs, click Add . Select the event you want to assign an input to. In this example, I will use TRUCK_ACCELERATE Then select the correct input type: Event type Description Keyboard All keys on the keyboard. JoystickAxis Used for steering wheels/sticks/etc. JoystickSlider Any type of slider, mainly seen on flight sticks. JoystickButton Buttons! (e.g. `A` button on an Xbox controller) JoystickPov Used for D-Pad controls. Click Add once ready, the tool will then ask you to move the axis/press a button. The popup will automatically close once the requested action is completed. Repeat the process for all the inputs you want to add. Once you're done, it's time to export the keymap. Exporting the keymap \u00b6 First, you'll need to get the correct file name of your file. To do this, double-click getdeviceinfo.exe . This will generate a inputinfo.txt file. Open the text file. Example output: System info: OIS Version: 1.3.0 OIS Release Name: 1.3.0 Input Manager: Win32InputManager Total Keyboards: 1 Total Mice: 1 Total JoySticks: 1 Devices: - OISKeyboard, Vendor: Win32InputManager - OISMouse, Vendor: Win32InputManager - OISJoyStick, Vendor: Logitech Extreme 3D Joystick 0: Vendor: Logitech Extreme 3D VendorMapFilename: Logitech_Extreme_3D.map ID: 0 Type: [3] OISJoyStick Axes: 3 Sliders: 1 POV/HATs: 1 Buttons: 12 Vector3: 0 Vector3Sensitivity: 2.28 VendorMapFilename will be the name of your exported file. In this example, the name will be Logitech_Extreme_3D.map . Click Export Keymap then select your device from the list. Browse to Documents\\My Games\\Rigs of Rods\\config , set the name you copied earlier in the File name box, then click Open to save the file. And finally, run Rigs of Rods and test your device! You can make further edits to your input map by clicking Import Keymap . If you want to share your created input map, upload it to the Miscellaneous section of the Repository . Thanks!","title":"Controls and configuration"},{"location":"gameplay/controls-config/#controls-and-configuration","text":"","title":"Controls and configuration"},{"location":"gameplay/controls-config/#intro","text":"Rigs of Rods is a simulator which strives for maximum realism, and hence you need an appropriate controller, such as a wheel for land vehicles and joystick for aerial or marine vehicles. Input is configured by editing configuration file input.map or by using the Input Mapping Tool . In-game configuration of controls is not implemented yet.","title":"Intro"},{"location":"gameplay/controls-config/#keyboard-layout","text":"","title":"Keyboard layout"},{"location":"gameplay/controls-config/#general-controls","text":"General Key Pause game ESC Quit game ALT+F4 Spawn new vehicle CTRL+G Enter or exit vehicle ENTER Reset vehicle I Reset vehicle in place BACKSPACE View vehicle statistics T View vehicle commands CTRL+T Screenshot Print Screen/SYSRQ Chat (Multiplayer) Y Toggle HUD U Toggle soft reset mode APOSTROPHE Toggle limited camera movement SHIFT+SPACE Adjust simulation speed CTRL+= / SHIFT+= Reset simulation speed/set preset BACKSLASH Switch between vehicles CTRL+RBRACKET / CTRL+LBRACKET Remove current vehicle CTRL+Del Respawn last vehicle CTRL+ . (period)","title":"General controls"},{"location":"gameplay/controls-config/#character","text":"Character Key Jump SPACE Turn right RIGHT Turn left LEFT Walk forwards UP Walk backwards DOWN Run SHIFT+UP","title":"Character"},{"location":"gameplay/controls-config/#camera","text":"Camera Key Change view C Rotate up/down Numpad 8 / Numpad 2 Rotate left/right Numpad 4 / Numpad 6 Zoom in/out Numpad 9 / Numpad 3 Zoom in/out (fast) SHIFT+Numpad 9 / SHIFT+Numpad 3 Free camera SHIFT+C Fixed camera ALT+C Decrease FOV Numpad 7 Increase FOV CTRL+Numpad 7 Reset FOV SHIFT+Numpad 7","title":"Camera"},{"location":"gameplay/controls-config/#time","text":"Sky type must be set to Caelum or SkyX. Sandstorm sky does not support time change. Time Adjust Key Change time Numpad + (plus) / Numpad - (minus) Change time (fast) SHIFT+Numpad + (plus) / SHIFT+Numpad - (minus)","title":"Time"},{"location":"gameplay/controls-config/#overview-map","text":"Map Key Toggle map view TAB Zoom in/out CTRL+TAB / SHIFT+TAB Toggle alpha CTRL+SHIFT+TAB Toggle icons CTRL+SHIFT+ALT+TAB","title":"Overview map"},{"location":"gameplay/controls-config/#saves","text":"Note You can load a savegame from the main menu. Savegames Key Quick save NUMPAD / (divide) Quick load NUMPAD * (multiply) Save slot 1 CTRL+ALT+1 Save slot 2 CTRL+ALT+2 Save slot 3 CTRL+ALT+3 Save slot 4 CTRL+ALT+4 Save slot 5 CTRL+ALT+5 Load slot 1 ALT+1 Load slot 2 ALT+2 Load slot 3 ALT+3 Load slot 4 ALT+4 Load slot 5 ALT+5","title":"Saves"},{"location":"gameplay/controls-config/#common-vehicle-controls","text":"Basic vehicle controls Key Steer Left LEFT Steer Right RIGHT Accelerate/Brake UP / DOWN","title":"Common vehicle controls"},{"location":"gameplay/controls-config/#shifting","text":"Shifting Key Autoshift up PGUP Autoshift down PGDOWN Switch shift modes Q Manual clutch SHIFT Shift up A Shift down Z","title":"Shifting"},{"location":"gameplay/controls-config/#lights","text":"Misc Key Toggle headlights N Toggle beacons M Blinker left , (comma) Blinker right . (period) Blinker hazards - (hyphen) Custom lights (e.g. lightbars) CTRL+1, CTRL+2 ... CTRL+9, CTRL+0","title":"Lights"},{"location":"gameplay/controls-config/#misc","text":"Misc Key Truck horn H Parking brake P Trailer parking brake CTRL+P Toggle contact (ignition) X Starter (hold) S Attach trailer L Inter-wheel differentials W Inter-axle differentials CTRL+W Transfer case (2WD/4WD) SHIFT+W Alternate gear ratios ALT+W Secure Load O Show skeleton K Cycle skeleton views CTRL+K Rescue truck R Particle cannon (e.g. water cannons on fire trucks) G Tire Pressure (not supported by most vehicles) RBRACKET [ / LBRACKET ]","title":"Misc"},{"location":"gameplay/controls-config/#commands","text":"Function keys Combo COMMANDS 01 F1 ... ... COMMANDS 12 F12 COMMANDS 13 CTRL + F1 ... ... COMMANDS 24 CTRL + F12 COMMANDS 25 ALT + F1 ... ... COMMANDS 36 ALT + F12 COMMANDS 37 CTRL + ALT + F1 ... ... COMMANDS 48 CTRL + ALT + F12 COMMANDS 49 CTRL+ SHIFT + F1 ... ... COMMANDS 58 CTRL + SHIFT + F10 COMMANDS 59 CTRL + SHIFT + F11 ... ... COMMANDS 68 CTRL + ALT + F8 COMMANDS 69 CTRL + ALT + F9 ... ... COMMANDS 78 CTRL + SHIFT + ALT + F6 COMMANDS 79 CTRL + SHIFT + ALT + F7 ... ... COMMANDS 83 CTRL + SHIFT + ALT + F11 COMMANDS 84 CTRL + SHIFT + ALT + F12 Notes Some vehicles use ALT+F4 as a command, which closes the game window. To avoid this press F4 then ALT. Some laptops require you to hold the FN key in order to use commands.","title":"Commands"},{"location":"gameplay/controls-config/#aerial-and-marine-controls","text":"","title":"Aerial and marine controls"},{"location":"gameplay/controls-config/#planes","text":"Airplane controls Key Steer left LEFT Steer right RIGHT Elevator up UP Elevator down DOWN Rudder right X Rudder left Z Brake B Parking brake P Reverse R Less flaps 1 More flaps 2 Less airbrakes 3 More airbrakes 4 Throttle down PAGE-DOWN Throttle up PAGE-UP Start engines CLICK BUTTONS \"ON\" Start all engines CTRL+HOME Full throttle CTRL+PAGEUP No throttle CTRL+PAGEDOWN It is recommended to use: CTRL+Home to start all engines of a plane and CTRL+PAGE-UP to full throttle all engines because some planes could have more than 4 engines and you couldn't control them with your mouse.","title":"Planes"},{"location":"gameplay/controls-config/#boats","text":"Boat controls Key Throttle down DOWN Throttle up UP Steer left LEFT Steer right RIGHT Center rudder PGUP Center throttle PGDOWN","title":"Boats"},{"location":"gameplay/controls-config/#config-file-inputmap","text":"This file defines all key alias for RoR, located at Documents\\My Games\\Rigs of Rods\\config by default. It has the following format: EVENT_NAME EVENT_TYPE MAPPING For example: BOAT_CENTER_RUDDER Keyboard DOWN This binds the BOAT_CENTER_RUDDER event to the Down arrow on your keyboard. A list of all valid events can be found in the Keypress Events section.","title":"Config file 'input.map'"},{"location":"gameplay/controls-config/#keyboard","text":"For the keyboard there are several special things:","title":"Keyboard"},{"location":"gameplay/controls-config/#modifiers","text":"CTRL SHIFT ALT Combine them with a + sign. Example: CAMERA_FREE_MODE Keyboard EXPL+SHIFT+C","title":"Modifiers"},{"location":"gameplay/controls-config/#the-expl-tag","text":"A special keyword used in defining commands. In this example, only COMMANDS_01 is triggered when pressing F1, and COMMANDS_13 is triggered when pressing CTRL+F1 (but not COMMANDS_01) COMMANDS_01 Keyboard EXPL+F1 COMMANDS_13 Keyboard EXPL+CTRL+F1 In this example, COMMANDS_01 would be triggered if you press CTRL+F1, as F1 is part of the COMMANDS_13 combination. COMMANDS_01 Keyboard F1 COMMANDS_13 Keyboard CTRL+F1","title":"The EXPL tag"},{"location":"gameplay/controls-config/#list-of-usable-keys","text":"0 1 2 3 4 5 6 7 8 9 A ABNT_C1 ABNT_C2 ADD APOSTROPHE APPS AT AX B BACK BACKSLASH C CALCULATOR CAPITAL COLON COMMA CONVERT D DECIMAL DELETE DIVIDE DOWN E END EQUALS ESCAPE F F1 F10 F11 F12 F13 F14 F15 F2 F3 F4 F5 F6 F7 F8 F9 G GRAVE H HOME I INSERT J K KANA KANJI L LBRACKET LCONTROL LEFT LMENU LSHIFT LWIN M MAIL MEDIASELECT MEDIASTOP MINUS MULTIPLY MUTE MYCOMPUTER N NEXTTRACK NOCONVERT NUMLOCK NUMPAD0 NUMPAD1 NUMPAD2 NUMPAD3 NUMPAD4 NUMPAD5 NUMPAD6 NUMPAD7 NUMPAD8 NUMPAD9 NUMPADCOMMA NUMPADENTER NUMPADEQUALS O OEM_102 P PAUSE PERIOD PGDOWN PGUP PLAYPAUSE POWER PREVTRACK Q R RBRACKET RCONTROL RETURN RIGHT RMENU RSHIFT RWIN S SCROLL SEMICOLON SLASH SLEEP SPACE STOP SUBTRACT SYSRQ T TAB U UNDERLINE UNLABELED UP V VOLUMEDOWN VOLUMEUP W WAKE WEBBACK WEBFAVORITES WEBFORWARD WEBHOME WEBREFRESH WEBSEARCH WEBSTOP X Y YEN Z","title":"List of usable keys"},{"location":"gameplay/controls-config/#joystick-wheel-or-gamepad","text":"This category covers all analogue input devices detected by the operating system, so all gamepads, joysticks, wheels, pedals, etc.","title":"Joystick, Wheel or gamepad"},{"location":"gameplay/controls-config/#joystickbutton","text":"Arguments: Joystick Number (unused in modern mappings), set to 0 Button number AIRPLANE_THROTTLE_DOWN JoystickButton 0 2","title":"JoystickButton"},{"location":"gameplay/controls-config/#joystickaxis","text":"Arguments: Joystick Number (unused in modern mappings), set to 0 Axis number Options: HALF REVERSE UPPER LOWER RELATIVE DIGITAL DEADZONE : add deadzone in percent with equal sign: \"DEADZONE=0.15\". LINEARITY : add linearity in percent with equal sign: \"LINEARITY=0.15\". AIRPLANE_STEER_RIGHT JoystickAxis 0 1 UPPER+DEADZONE = 0.15","title":"JoystickAxis"},{"location":"gameplay/controls-config/#joystickpov","text":"Arguments: Joystick Number (unused in modern mappings), set to 0 POV number Direction: North , South , East , West , NorthEast , SouthEast , NorthWest , SouthWest . CHARACTER_FORWARD JoystickPov 0 0 North","title":"JoystickPov"},{"location":"gameplay/controls-config/#joystickslider-joysticksliderx-joystickslidery","text":"Arguments: Joystick Number (unused in modern mappings), set to 0 Slider number Options: REVERSE TRUCK_MANUAL_CLUTCH JoystickSliderY 0 Y 0 REVERSE+DEADZONE = -30","title":"JoystickSlider, JoystickSliderX, JoystickSliderY"},{"location":"gameplay/controls-config/#keypress-events","text":"Keypress event identification in RoR 0.4.7.0+ These are all the valid keypress events, they can be used in a input map or for prop animations . not all make sense though for animated props. AIRPLANE_AIRBRAKES_FULL AIRPLANE_AIRBRAKES_LESS AIRPLANE_AIRBRAKES_MORE AIRPLANE_AIRBRAKES_NONE AIRPLANE_BRAKE AIRPLANE_ELEVATOR_DOWN AIRPLANE_ELEVATOR_UP AIRPLANE_FLAPS_FULL AIRPLANE_FLAPS_LESS AIRPLANE_FLAPS_MORE AIRPLANE_FLAPS_NONE AIRPLANE_PARKING_BRAKE AIRPLANE_REVERSE AIRPLANE_RUDDER_LEFT AIRPLANE_RUDDER_RIGHT AIRPLANE_STEER_LEFT AIRPLANE_STEER_RIGHT AIRPLANE_THROTTLE_AXIS AIRPLANE_THROTTLE_DOWN AIRPLANE_THROTTLE_FULL AIRPLANE_THROTTLE_NO AIRPLANE_THROTTLE_UP AIRPLANE_TOGGLE_ENGINES BOAT_CENTER_RUDDER BOAT_REVERSE BOAT_STEER_LEFT BOAT_STEER_RIGHT BOAT_THROTTLE_AXIS BOAT_THROTTLE_UP BOAT_THROTTLE_DOWN CAMERA_CHANGE CAMERA_FREE_MODE CAMERA_FREE_MODE_FIX CAMERA_LOOKBACK CAMERA_RESET CAMERA_UP CAMERA_DOWN CAMERA_ROTATE_DOWN CAMERA_ROTATE_LEFT CAMERA_ROTATE_RIGHT CAMERA_ROTATE_UP CAMERA_ZOOM_IN CAMERA_ZOOM_IN_FAST CAMERA_ZOOM_OUT CAMERA_ZOOM_OUT_FAST SKY_DECREASE_TIME SKY_DECREASE_TIME_FAST SKY_INCREASE_TIME SKY_INCREASE_TIME_FAST CHARACTER_BACKWARDS CHARACTER_FORWARD CHARACTER_JUMP CHARACTER_LEFT CHARACTER_RIGHT CHARACTER_ROT_DOWN CHARACTER_ROT_UP CHARACTER_RUN CHARACTER_RUN CHARACTER_SIDESTEP_LEFT CHARACTER_SIDESTEP_RIGHT COMMANDS_01 COMMANDS_02 COMMANDS_03 COMMANDS_04 COMMANDS_05 COMMANDS_06 COMMANDS_07 COMMANDS_08 COMMANDS_09 COMMANDS_10 COMMANDS_11 COMMANDS_12 COMMANDS_13 COMMANDS_14 COMMANDS_15 COMMANDS_16 COMMANDS_17 COMMANDS_18 COMMANDS_19 COMMANDS_20 COMMANDS_21 COMMANDS_22 COMMANDS_23 COMMANDS_24 COMMANDS_25 COMMANDS_26 COMMANDS_27 COMMANDS_28 COMMANDS_29 COMMANDS_30 COMMANDS_31 COMMANDS_32 COMMANDS_33 COMMANDS_34 COMMANDS_35 COMMANDS_36 COMMANDS_37 COMMANDS_38 COMMANDS_39 COMMANDS_40 COMMANDS_41 COMMANDS_42 COMMANDS_43 COMMANDS_44 COMMANDS_45 COMMANDS_46 COMMANDS_47 COMMANDS_48 COMMANDS_49 COMMANDS_50 COMMANDS_51 COMMANDS_52 COMMANDS_53 COMMANDS_54 COMMANDS_55 COMMANDS_56 COMMANDS_57 COMMANDS_58 COMMANDS_59 COMMANDS_60 COMMANDS_61 COMMANDS_62 COMMANDS_63 COMMANDS_64 COMMANDS_65 COMMANDS_66 COMMANDS_67 COMMANDS_68 COMMANDS_69 COMMANDS_70 COMMANDS_71 COMMANDS_72 COMMANDS_73 COMMANDS_74 COMMANDS_75 COMMANDS_76 COMMANDS_77 COMMANDS_78 COMMANDS_79 COMMANDS_80 COMMANDS_81 COMMANDS_82 COMMANDS_83 COMMANDS_84 COMMON_ACCELERATE_SIMULATION COMMON_DECELERATE_SIMULATION COMMON_RESET_SIMULATION_PACE COMMON_CONSOLE_TOGGLE COMMON_ENTER_OR_EXIT_TRUCK COMMON_ENTER_NEXT_TRUCK COMMON_ENTER_PREVIOUS_TRUCK COMMON_REMOVE_CURRENT_TRUCK COMMON_RESPAWN_LAST_TRUCK COMMON_FULLSCREEN_TOGGLE COMMON_HIDE_GUI COMMON_LOCK COMMON_AUTOLOCK COMMON_ROPELOCK COMMON_OUTPUT_POSITION COMMON_GET_NEW_VEHICLE COMMON_PRESSURE_LESS COMMON_PRESSURE_MORE COMMON_QUIT_GAME COMMON_REPLAY_BACKWARD COMMON_REPLAY_FAST_BACKWARD COMMON_REPLAY_FAST_FORWARD COMMON_REPLAY_FORWARD COMMON_RESCUE_TRUCK COMMON_RESET_TRUCK COMMON_SCREENSHOT COMMON_SECURE_LOAD COMMON_SHOW_SKELETON COMMON_TOGGLE_TERRAIN_EDITOR COMMON_TOGGLE_CUSTOM_PARTICL COMMON_TOGGLE_MAT_DEBUG COMMON_TOGGLE_RENDER_MODE COMMON_TOGGLE_REPLAY_MODE COMMON_TOGGLE_STATS COMMON_TOGGLE_TRUCK_BEACONS COMMON_TOGGLE_TRUCK_LIGHTS COMMON_TRUCK_INFO COMMON_TRUCK_DESCRIPTION COMMON_FOV_LESS COMMON_FOV_MORE GRASS_LESS GRASS_MORE GRASS_MOST GRASS_NONE GRASS_SAVE SURVEY_MAP_ZOOM_IN SURVEY_MAP_ZOOM_OUT SURVEY_MAP_TOGGLE_VIEW SURVEY_MAP_TOGGLE_ALPHA SURVEY_MAP_TOGGLE_ICONS MENU_DOWN MENU_LEFT MENU_RIGHT MENU_SELECT MENU_UP TRUCK_ACCELERATE TRUCK_ACCELERATE_MODIFIER_25 TRUCK_ACCELERATE_MODIFIER_50 TRUCK_ANTILOCK_BRAKE TRUCK_AUTOSHIFT_DOWN TRUCK_AUTOSHIFT_UP TRUCK_BLINK_LEFT TRUCK_BLINK_RIGHT TRUCK_BLINK_WARN TRUCK_BRAKE TRUCK_BRAKE_MODIFIER_25 TRUCK_BRAKE_MODIFIER_50 TRUCK_CRUISE_CONTROL TRUCK_CRUISE_CONTROL_READJUS TRUCK_CRUISE_CONTROL_ACCL TRUCK_CRUISE_CONTROL_DECL TRUCK_HORN TRUCK_LIGHTTOGGLE1 TRUCK_LIGHTTOGGLE2 TRUCK_LIGHTTOGGLE3 TRUCK_LIGHTTOGGLE4 TRUCK_LIGHTTOGGLE5 TRUCK_LIGHTTOGGLE6 TRUCK_LIGHTTOGGLE7 TRUCK_LIGHTTOGGLE8 TRUCK_LIGHTTOGGLE9 TRUCK_LIGHTTOGGLE10 TRUCK_MANUAL_CLUTCH TRUCK_PARKING_BRAKE TRUCK_SHIFT_DOWN TRUCK_SHIFT_NEUTRAL TRUCK_SHIFT_UP TRUCK_STARTER TRUCK_STEER_LEFT TRUCK_STEER_RIGHT TRUCK_SWITCH_SHIFT_MODES TRUCK_TOGGLE_AXLE_LOCK TRUCK_TOGGLE_CONTACT TRUCK_TOGGLE_FORWARDCOMMANDS TRUCK_TOGGLE_IMPORTCOMMANDS TRUCK_TOGGLE_VIDEOCAMERA TRUCK_TRACTION_CONTROL","title":"Keypress Events"},{"location":"gameplay/controls-config/#mouse","text":"","title":"Mouse"},{"location":"gameplay/controls-config/#required-applications","text":"vJoy joystick emulator FreePIE input emulator","title":"Required applications"},{"location":"gameplay/controls-config/#setting-up-the-input-map-and-freepie-script","text":"After installing the above applications, download this zip file which contains the required input map and FreePIE script. There will be two files in the zip: vJoy_Device.map and MouseControl.py . Extract both files into Documents\\My Games\\Rigs of Rods\\config .","title":"Setting up the input map and FreePIE script"},{"location":"gameplay/controls-config/#using-freepie","text":"Open FreePIE and press File -> Open . Browse to the MouseControl.py file you downloaded earlier: Then press Script -> Run script : The script should now be running. If you get an error, install vJoy. Leave FreePIE running, launch RoR and you should now have mouse control! You can modify both the script and the input map to make them better suit for your use. For example the numbers 40 and 80 in the script are the sensitivity of the controls. Mouse middle button in the script above, will reset the axises in game, in this case the steering and throttle.","title":"Using FreePIE"},{"location":"gameplay/controls-config/#configuring-controls-with-the-input-mapping-tool","text":"The easiest way to configure your device for use in Rigs of Rods is to use the Input Mapping Tool .","title":"Configuring controls with the Input Mapping Tool"},{"location":"gameplay/controls-config/#vjoy-conflicts","text":"Note If you have vJoy installed, you will have to disable it before running the tool!","title":"vJoy Conflicts"},{"location":"gameplay/controls-config/#launching-the-tool","text":"After downloading, extract the zip into a new folder. Then double-click Run.bat to launch the tool.","title":"Launching the tool"},{"location":"gameplay/controls-config/#adding-new-inputs","text":"To begin adding inputs, click Add . Select the event you want to assign an input to. In this example, I will use TRUCK_ACCELERATE Then select the correct input type: Event type Description Keyboard All keys on the keyboard. JoystickAxis Used for steering wheels/sticks/etc. JoystickSlider Any type of slider, mainly seen on flight sticks. JoystickButton Buttons! (e.g. `A` button on an Xbox controller) JoystickPov Used for D-Pad controls. Click Add once ready, the tool will then ask you to move the axis/press a button. The popup will automatically close once the requested action is completed. Repeat the process for all the inputs you want to add. Once you're done, it's time to export the keymap.","title":"Adding new inputs"},{"location":"gameplay/controls-config/#exporting-the-keymap","text":"First, you'll need to get the correct file name of your file. To do this, double-click getdeviceinfo.exe . This will generate a inputinfo.txt file. Open the text file. Example output: System info: OIS Version: 1.3.0 OIS Release Name: 1.3.0 Input Manager: Win32InputManager Total Keyboards: 1 Total Mice: 1 Total JoySticks: 1 Devices: - OISKeyboard, Vendor: Win32InputManager - OISMouse, Vendor: Win32InputManager - OISJoyStick, Vendor: Logitech Extreme 3D Joystick 0: Vendor: Logitech Extreme 3D VendorMapFilename: Logitech_Extreme_3D.map ID: 0 Type: [3] OISJoyStick Axes: 3 Sliders: 1 POV/HATs: 1 Buttons: 12 Vector3: 0 Vector3Sensitivity: 2.28 VendorMapFilename will be the name of your exported file. In this example, the name will be Logitech_Extreme_3D.map . Click Export Keymap then select your device from the list. Browse to Documents\\My Games\\Rigs of Rods\\config , set the name you copied earlier in the File name box, then click Open to save the file. And finally, run Rigs of Rods and test your device! You can make further edits to your input map by clicking Import Keymap . If you want to share your created input map, upload it to the Miscellaneous section of the Repository . Thanks!","title":"Exporting the keymap"},{"location":"gameplay/general-faq/","text":"General FAQ \u00b6 Welcome to the General FAQ! Here you'll find answers to common questions and errors. It is organized into sections to make finding answers easier. Supported operating systems \u00b6 Rigs of Rods is officially supported on 64 bit Windows 7 SP1, Windows 8/8.1, Windows 10, and Linux. Windows XP & Vista are no longer supported as of version 0.4.8 RC5. 32 bit is no longer supported as of version 2020.01. ChromeOS (Chromebooks), MacOS, and mobile platforms (Android/iOS) are not supported and most likely never will be. Downloading Rigs of Rods \u00b6 Windows \u00b6 You can find the latest version on the home page . If you need help, check out the Beginner's Guide . Linux \u00b6 Linux users can download the latest version from Itch.io . It is recommended to install using the Itch desktop app . Development builds \u00b6 If you want to try the latest changes to RoR, you can download a development build . Old versions \u00b6 You can find old RoR versions on SourceForge . These versions are entirely unsupported! Mods \u00b6 Downloading mods \u00b6 You can find mods on the Repository , the content section of the forum, and the archives . For help with installing mods, see this page . Archives \u00b6 You can find links to the archives here . These contain content from previous versions of the website. Multiplayer \u00b6 To play multiplayer, see this section of the Beginner's Guide. Please know that multiplayer is still a work-in-progress, and crashes may happen. Wrong server version \u00b6 This means you're trying to join a server that is running an earlier/later RoRNet version than what your current RoR version supports. The latest version, 2020.01, supports RoRNet 2.42. Errors & glitches \u00b6 MSVCP DLLs missing \u00b6 When launching RoR, you may receive a MSVCP140.dll/MSVCP110.dll/MSVCP100.dll error. This is caused by the required Visual C++ x86/x64 Redistributable not being installed. Install the correct version that matches the .dll name in the error then restart your PC. When the site asks what version to download, just install both. MSVCP140.dll MSVCP110.dll MSVCP100.dll Cannot open Xbox 360 input map \u00b6 Failed to generate list of installed content \u00b6 When you launch RoR, you may receive the following errors: This is caused by having special characters in your Windows username (e.g. Us\u00e9r ). Current workaround: Inside the installation directory, where RoR.exe is (usually C:\\Program Files\\Rigs of Rods ) create a folder called config Right click RoR.exe and click Properties Under the Compatibility tab, check the Run this program as administrator box, then click Apply and close the window. RoR will now use the config folder instead of the default Documents\\My Games\\Rigs of Rods folder. If you installed the content packs, you will have to move the *.zip files from Documents\\My Games\\Rigs of Rods\\mods to config\\mods . New mods are also installed there. Full screen crash (Cannot create device) \u00b6 This error is usually caused by enabling full screen with the wrong resolution (video mode) set. Browse to Documents\\My Games\\Rigs of Rods and delete the config folder inside. Start RoR, the game will be in a small window. Click Settings -> Render system and change the Video Mode setting to your monitor's native resolution. Enable full screen if you want. Restart RoR. If this doesn't fix your error, then your GPU is most likely too old to run RoR. Null program bound \u00b6 This error occurs with some Intel integrated graphics chips. Unfortunately there's currently no fix. More info: GitHub issue Glitchy vehicle shadows \u00b6 With some GPUs (mostly integrated ones), shadows on vehicles may appear glitchy: This is caused by your GPU not supporting self-shadowing (Shadows from other objects casting onto the vehicle). Please try one of the following workarounds: #1: Disable shadows \u00b6 The simplest workaround is to just disable shadows. (Settings -> Graphics -> Set shadows to \"None\" -> Restart RoR). #2: Enable classic materials \u00b6 Starting with version 2020.01, an option to enable classic (0.38-era) material shaders is available. This can be found under Settings -> Graphics -> Classic material shaders. Currently they do not support self-shadowing, so the glitch is not present using these. #3: Disable self-shadowing from default materials \u00b6 If you prefer to use the default materials instead, do the following: Browse to where RoR is installed. This is usually C:\\Program Files\\Rigs of Rods by default. Open the resources folder, followed by the managed_materials folder. Copy the managed_mats_vehicles.material file onto your Desktop. Open the file with Notepad (Right click -> Open with -> Notepad) Add // to the beginning of the first line: //import * from \"shadows.material\" Save the file, then copy it back to resources\\managed_materials , overwriting the original file. Allow administrator permission when prompted. Airplane spawning crash \u00b6 If the game crashes when spawning an aircraft, change the Lights setting (Graphics tab) to anything that isn't None (fastest) : Miscellaneous \u00b6 Reporting bugs \u00b6 You can report bugs and other issues on RoR's GitHub repo issue tracker. Make sure your issue hasn't already been reported. The issue tracker is only for issues relating to the latest development build, if you're using an official release, please post on the correct support forum instead.","title":"General FAQ"},{"location":"gameplay/general-faq/#general-faq","text":"Welcome to the General FAQ! Here you'll find answers to common questions and errors. It is organized into sections to make finding answers easier.","title":"General FAQ"},{"location":"gameplay/general-faq/#supported-operating-systems","text":"Rigs of Rods is officially supported on 64 bit Windows 7 SP1, Windows 8/8.1, Windows 10, and Linux. Windows XP & Vista are no longer supported as of version 0.4.8 RC5. 32 bit is no longer supported as of version 2020.01. ChromeOS (Chromebooks), MacOS, and mobile platforms (Android/iOS) are not supported and most likely never will be.","title":"Supported operating systems"},{"location":"gameplay/general-faq/#downloading-rigs-of-rods","text":"","title":"Downloading Rigs of Rods"},{"location":"gameplay/general-faq/#windows","text":"You can find the latest version on the home page . If you need help, check out the Beginner's Guide .","title":"Windows"},{"location":"gameplay/general-faq/#linux","text":"Linux users can download the latest version from Itch.io . It is recommended to install using the Itch desktop app .","title":"Linux"},{"location":"gameplay/general-faq/#development-builds","text":"If you want to try the latest changes to RoR, you can download a development build .","title":"Development builds"},{"location":"gameplay/general-faq/#old-versions","text":"You can find old RoR versions on SourceForge . These versions are entirely unsupported!","title":"Old versions"},{"location":"gameplay/general-faq/#mods","text":"","title":"Mods"},{"location":"gameplay/general-faq/#downloading-mods","text":"You can find mods on the Repository , the content section of the forum, and the archives . For help with installing mods, see this page .","title":"Downloading mods"},{"location":"gameplay/general-faq/#archives","text":"You can find links to the archives here . These contain content from previous versions of the website.","title":"Archives"},{"location":"gameplay/general-faq/#multiplayer","text":"To play multiplayer, see this section of the Beginner's Guide. Please know that multiplayer is still a work-in-progress, and crashes may happen.","title":"Multiplayer"},{"location":"gameplay/general-faq/#wrong-server-version","text":"This means you're trying to join a server that is running an earlier/later RoRNet version than what your current RoR version supports. The latest version, 2020.01, supports RoRNet 2.42.","title":"Wrong server version"},{"location":"gameplay/general-faq/#errors-glitches","text":"","title":"Errors &amp; glitches"},{"location":"gameplay/general-faq/#msvcp-dlls-missing","text":"When launching RoR, you may receive a MSVCP140.dll/MSVCP110.dll/MSVCP100.dll error. This is caused by the required Visual C++ x86/x64 Redistributable not being installed. Install the correct version that matches the .dll name in the error then restart your PC. When the site asks what version to download, just install both. MSVCP140.dll MSVCP110.dll MSVCP100.dll","title":"MSVCP DLLs missing"},{"location":"gameplay/general-faq/#cannot-open-xbox-360-input-map","text":"","title":"Cannot open Xbox 360 input map"},{"location":"gameplay/general-faq/#failed-to-generate-list-of-installed-content","text":"When you launch RoR, you may receive the following errors: This is caused by having special characters in your Windows username (e.g. Us\u00e9r ). Current workaround: Inside the installation directory, where RoR.exe is (usually C:\\Program Files\\Rigs of Rods ) create a folder called config Right click RoR.exe and click Properties Under the Compatibility tab, check the Run this program as administrator box, then click Apply and close the window. RoR will now use the config folder instead of the default Documents\\My Games\\Rigs of Rods folder. If you installed the content packs, you will have to move the *.zip files from Documents\\My Games\\Rigs of Rods\\mods to config\\mods . New mods are also installed there.","title":"Failed to generate list of installed content"},{"location":"gameplay/general-faq/#full-screen-crash-cannot-create-device","text":"This error is usually caused by enabling full screen with the wrong resolution (video mode) set. Browse to Documents\\My Games\\Rigs of Rods and delete the config folder inside. Start RoR, the game will be in a small window. Click Settings -> Render system and change the Video Mode setting to your monitor's native resolution. Enable full screen if you want. Restart RoR. If this doesn't fix your error, then your GPU is most likely too old to run RoR.","title":"Full screen crash (Cannot create device)"},{"location":"gameplay/general-faq/#null-program-bound","text":"This error occurs with some Intel integrated graphics chips. Unfortunately there's currently no fix. More info: GitHub issue","title":"Null program bound"},{"location":"gameplay/general-faq/#glitchy-vehicle-shadows","text":"With some GPUs (mostly integrated ones), shadows on vehicles may appear glitchy: This is caused by your GPU not supporting self-shadowing (Shadows from other objects casting onto the vehicle). Please try one of the following workarounds:","title":"Glitchy vehicle shadows"},{"location":"gameplay/general-faq/#1-disable-shadows","text":"The simplest workaround is to just disable shadows. (Settings -> Graphics -> Set shadows to \"None\" -> Restart RoR).","title":"#1: Disable shadows"},{"location":"gameplay/general-faq/#2-enable-classic-materials","text":"Starting with version 2020.01, an option to enable classic (0.38-era) material shaders is available. This can be found under Settings -> Graphics -> Classic material shaders. Currently they do not support self-shadowing, so the glitch is not present using these.","title":"#2: Enable classic materials"},{"location":"gameplay/general-faq/#3-disable-self-shadowing-from-default-materials","text":"If you prefer to use the default materials instead, do the following: Browse to where RoR is installed. This is usually C:\\Program Files\\Rigs of Rods by default. Open the resources folder, followed by the managed_materials folder. Copy the managed_mats_vehicles.material file onto your Desktop. Open the file with Notepad (Right click -> Open with -> Notepad) Add // to the beginning of the first line: //import * from \"shadows.material\" Save the file, then copy it back to resources\\managed_materials , overwriting the original file. Allow administrator permission when prompted.","title":"#3: Disable self-shadowing from default materials"},{"location":"gameplay/general-faq/#airplane-spawning-crash","text":"If the game crashes when spawning an aircraft, change the Lights setting (Graphics tab) to anything that isn't None (fastest) :","title":"Airplane spawning crash"},{"location":"gameplay/general-faq/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"gameplay/general-faq/#reporting-bugs","text":"You can report bugs and other issues on RoR's GitHub repo issue tracker. Make sure your issue hasn't already been reported. The issue tracker is only for issues relating to the latest development build, if you're using an official release, please post on the correct support forum instead.","title":"Reporting bugs"},{"location":"gameplay/installing-content/","text":"Installing content \u00b6 One of the best features of Rigs of Rods is the vast amount of community-created mods available. This page will tell you everything you need to know about installing mods. You will have to launch RoR at least once for the mods directory to be created. Installing mods \u00b6 Adding a new vehicle or terrain is very simple. Follow the appropriate instructions for your operating system. Windows \u00b6 First, open File Explorer by clicking the icon on your taskbar or by pressing Windows key + E. Click Documents, located under 'This PC' or 'Quick access': Select followed by . You are now in RoR's user directory. Place the *.zip file inside the mods folder, either by cut (CTRL+X) and paste (CTRL+V) or drag and drop. Your mods folder should now have the zip inside: You can also organize your mod zips by creating subfolders (e.g. mods\\cars\\DodgeViperGTS.zip ). That's it! You can launch Rigs of Rods now and your shiny new mod should be ready to use. Linux \u00b6 For this, we'll be using Ubuntu 20.04. Instructions should be similar if you're using another distro. First, click the icon located on your dock/launcher. You should now be in your Home directory. Warning If you installed RoR via the Snap Store , the user directory is located at ~/snap/rigs-of-rods/common/ . By default, RoR's user folder is named .rigsofrods , which is a hidden folder. Hidden folders can be shown by clicking the top right menu icon and enabling 'Show Hidden Files': Once enabled, open the folder. You are now in RoR's user directory. Place the *.zip file inside the mods folder, either by cut (CTRL+X) and paste (CTRL+V) or drag and drop. Your mods folder should now have the zip inside: You can also organize your mod zips by creating subfolders (e.g. mods\\cars\\DodgeViperGTS.zip ). That's it! You can launch Rigs of Rods now and your shiny new mod should be ready to use. Where to download mods \u00b6 Mods can be downloaded from the official Repository and the Archives . You should not download mods from unofficial sites, explained below. Things to avoid \u00b6 When it comes to installing RoR mods, there are some common mistakes new players make. Here's a list of things you should avoid when installing mods. Downloading from unofficial websites \u00b6 If you search for mods, chances are you will find mods from YouTube videos, forums, and other unofficial sites. These contain stolen content , which is against our Terms of Service . They are not allowed on any of our services, including multiplayer. They may also contain viruses/malware. Extracting zips \u00b6 Unless specified in the file description (e.g. a content pack) you should NEVER extract a mod zip! Extracting usually results in conflicts with other mods, and model/texture loading failures. Installing mods in the game directory \u00b6 Some new players who fail to read this page find RoR's install directory (where RoR.exe is) and end up placing mod zips in the content folder. This folder is ONLY for default content, installing mods here will likely result in them getting overwritten during an update or removed if you decide to uninstall. Please install mods in the correct directory, as explained above. Installing content packs \u00b6 To install content packs (a zip file containing multiple zips inside) such as the Gabester Vehicle Pack or the content packs , just extract the zip (using File Explorer or 7-Zip) into the mods folder. Installing skinzips \u00b6 Some mods may provide a *.skinzip which contains some extra liveries/skins for the vehicle. To install these, just place them inside the mods folder. For more information about skinzips, see this page . PSD/PDN files \u00b6 These are files meant to be used by photo editing programs such as Photoshop or paint.net, they are not meant to be placed in the RoR directories.","title":"Installing content (mods)"},{"location":"gameplay/installing-content/#installing-content","text":"One of the best features of Rigs of Rods is the vast amount of community-created mods available. This page will tell you everything you need to know about installing mods. You will have to launch RoR at least once for the mods directory to be created.","title":"Installing content"},{"location":"gameplay/installing-content/#installing-mods","text":"Adding a new vehicle or terrain is very simple. Follow the appropriate instructions for your operating system.","title":"Installing mods"},{"location":"gameplay/installing-content/#windows","text":"First, open File Explorer by clicking the icon on your taskbar or by pressing Windows key + E. Click Documents, located under 'This PC' or 'Quick access': Select followed by . You are now in RoR's user directory. Place the *.zip file inside the mods folder, either by cut (CTRL+X) and paste (CTRL+V) or drag and drop. Your mods folder should now have the zip inside: You can also organize your mod zips by creating subfolders (e.g. mods\\cars\\DodgeViperGTS.zip ). That's it! You can launch Rigs of Rods now and your shiny new mod should be ready to use.","title":"Windows"},{"location":"gameplay/installing-content/#linux","text":"For this, we'll be using Ubuntu 20.04. Instructions should be similar if you're using another distro. First, click the icon located on your dock/launcher. You should now be in your Home directory. Warning If you installed RoR via the Snap Store , the user directory is located at ~/snap/rigs-of-rods/common/ . By default, RoR's user folder is named .rigsofrods , which is a hidden folder. Hidden folders can be shown by clicking the top right menu icon and enabling 'Show Hidden Files': Once enabled, open the folder. You are now in RoR's user directory. Place the *.zip file inside the mods folder, either by cut (CTRL+X) and paste (CTRL+V) or drag and drop. Your mods folder should now have the zip inside: You can also organize your mod zips by creating subfolders (e.g. mods\\cars\\DodgeViperGTS.zip ). That's it! You can launch Rigs of Rods now and your shiny new mod should be ready to use.","title":"Linux"},{"location":"gameplay/installing-content/#where-to-download-mods","text":"Mods can be downloaded from the official Repository and the Archives . You should not download mods from unofficial sites, explained below.","title":"Where to download mods"},{"location":"gameplay/installing-content/#things-to-avoid","text":"When it comes to installing RoR mods, there are some common mistakes new players make. Here's a list of things you should avoid when installing mods.","title":"Things to avoid"},{"location":"gameplay/installing-content/#downloading-from-unofficial-websites","text":"If you search for mods, chances are you will find mods from YouTube videos, forums, and other unofficial sites. These contain stolen content , which is against our Terms of Service . They are not allowed on any of our services, including multiplayer. They may also contain viruses/malware.","title":"Downloading from unofficial websites"},{"location":"gameplay/installing-content/#extracting-zips","text":"Unless specified in the file description (e.g. a content pack) you should NEVER extract a mod zip! Extracting usually results in conflicts with other mods, and model/texture loading failures.","title":"Extracting zips"},{"location":"gameplay/installing-content/#installing-mods-in-the-game-directory","text":"Some new players who fail to read this page find RoR's install directory (where RoR.exe is) and end up placing mod zips in the content folder. This folder is ONLY for default content, installing mods here will likely result in them getting overwritten during an update or removed if you decide to uninstall. Please install mods in the correct directory, as explained above.","title":"Installing mods in the game directory"},{"location":"gameplay/installing-content/#installing-content-packs","text":"To install content packs (a zip file containing multiple zips inside) such as the Gabester Vehicle Pack or the content packs , just extract the zip (using File Explorer or 7-Zip) into the mods folder.","title":"Installing content packs"},{"location":"gameplay/installing-content/#installing-skinzips","text":"Some mods may provide a *.skinzip which contains some extra liveries/skins for the vehicle. To install these, just place them inside the mods folder. For more information about skinzips, see this page .","title":"Installing skinzips"},{"location":"gameplay/installing-content/#psdpdn-files","text":"These are files meant to be used by photo editing programs such as Photoshop or paint.net, they are not meant to be placed in the RoR directories.","title":"PSD/PDN files"},{"location":"gameplay/installing-the-game/","text":"Installing the game \u00b6 Installation \u00b6 Downloading \u00b6 To get started, download the latest version of the game from our homepage . From here, choose which package you would like to install. We recommend the Installer for beginner users. You will be redirected to Sourceforge, and the file will automatically download. Once downloaded, double-click the file to start the installer. If you're running Linux, you can download the game by following these instructions . Windows SmartScreen warning \u00b6 When launching the installer for the first time, Windows Defender SmartScreen may prevent the installer from starting. If this happens, click More info then Run anyway . The installer should launch once you accept the UAC dialog. Installing \u00b6 Select your language, then click OK . Click Next . Accept the agreement, then click Next . If you wish to install RoR to another location, you can change it here. We recommend leaving it to the default location. By default, RoR only comes with a very small selection of content. To help new players, we've created content packs which provide a good selection of vehicles and terrains to get you started. You can choose to either download all the packs, or only select the ones that interest you. For simplicity's sake, no packs will be downloaded. Click Next to continue. If you want the installer to create a desktop icon, check the box. Click Next to continue. Click Install to begin the installation process. Once the installation finishes, read the message that appears then click Next to continue. Installation is now completed. Leave Launch Rigs of Rods checked then click Finish to launch RoR!","title":"Installing the game"},{"location":"gameplay/installing-the-game/#installing-the-game","text":"","title":"Installing the game"},{"location":"gameplay/installing-the-game/#installation","text":"","title":"Installation"},{"location":"gameplay/installing-the-game/#downloading","text":"To get started, download the latest version of the game from our homepage . From here, choose which package you would like to install. We recommend the Installer for beginner users. You will be redirected to Sourceforge, and the file will automatically download. Once downloaded, double-click the file to start the installer. If you're running Linux, you can download the game by following these instructions .","title":"Downloading"},{"location":"gameplay/installing-the-game/#windows-smartscreen-warning","text":"When launching the installer for the first time, Windows Defender SmartScreen may prevent the installer from starting. If this happens, click More info then Run anyway . The installer should launch once you accept the UAC dialog.","title":"Windows SmartScreen warning"},{"location":"gameplay/installing-the-game/#installing","text":"Select your language, then click OK . Click Next . Accept the agreement, then click Next . If you wish to install RoR to another location, you can change it here. We recommend leaving it to the default location. By default, RoR only comes with a very small selection of content. To help new players, we've created content packs which provide a good selection of vehicles and terrains to get you started. You can choose to either download all the packs, or only select the ones that interest you. For simplicity's sake, no packs will be downloaded. Click Next to continue. If you want the installer to create a desktop icon, check the box. Click Next to continue. Click Install to begin the installation process. Once the installation finishes, read the message that appears then click Next to continue. Installation is now completed. Leave Launch Rigs of Rods checked then click Finish to launch RoR!","title":"Installing"},{"location":"gameplay/jargon/","text":"Jargon \u00b6 This is a glossary of un-intuitive terms used by members of RoR community. Player terms \u00b6 RoR.log \u00b6 The RoR.log is a file which contains information from the last session from Rigs of Rods. It is very helpful to attach this file to any support issues or bugs for more information. A mod \u00b6 Downloadable game content. The word stands for 'modification', but may describe any content ranging from actually modified vehicles to original and self-contained ones. Maps and other downloads aren't usually referred to as 'mod' directly, but some terms, such as 'mod cache', include them. A cache (a mod cache) \u00b6 Local database of downloaded and installed content, generated by RoR on player's computer for faster browsing and loading. Managed automatically, but may occasionally break and require cleanup and re-generation, so called 'cache regen'. A repo (repository) \u00b6 A website with downloadable content. RoRBot \u00b6 Player-controlled human character, viewed from 3 rd person camera by default. It can walk/run/swim and enter vehicles. The name is historical - in the past, RoRbot was represented by various 3d models, the first one being \"robot.mesh\" which comes with OGRE3D engine. A truck \u00b6 May refer to any kind of vehicle or machine in RoR. Historically, RoR only supported heavy trucks and the rig definition fileformat had extension .truck. Later, other vehicle types and other file extensions were added, but the notion of \"truck\" as any kind of vehicle had stuck. Caelum \u00b6 Atmospheric effects software. FOV \u00b6 Field of view, defines depth of perspective in 3D scene. Infraction \u00b6 A form of punishment on the forums. This is usually for misbehavior or breaking the rules. OGRE, Ogre, Ogre3D \u00b6 The 3D rendering engine used in Rigs of Rods. Content creator terms \u00b6 Stolen! \u00b6 This means the mod in question contains elements, in most cases meshes (3d models) which aren't the author's original work. This includes meshes obtained from public repositories, most notably SketchUp warehouse. More information: Terms of Service#STOLEN CONTENT Unreleased \u00b6 Meaning if it is a vehicle, it has no download link and only beta testers have it. N/B \u00b6 Node/Beam. This is the skeleton of any vehicle in RoR. Node \u00b6 Essentially zero-dimensional ball joints. They occupy no space, but they do have mass. By themselves they can do very little. They exist to provide beams with two points to connect. They also control collision. A beam \u00b6 Visible connections between nodes. Beams do not have any mass and do not interact with anything but the two nodes they are connected to. Beams can stretch, compress, and break based on the forces applied to them. The initial length of a beam is the space between two nodes. As a vehicle moves and flexes, the movement of these two nodes forms the force against the beams. Beam is also the physics engine used in Rigs of Rods. AO, AO Bake \u00b6 Ambient occlusion, a very significant light/shadow effect used in 3D modelling. AO baking is the process of automated generation of AO textures. A cinecam \u00b6 An user-defined camera attached to vehicle chassis. A command, a command beam \u00b6 An user-controlled hydraulic in a vehicle, \"command hydro\". Editorizer \u00b6 Freeware program for making n/b structures. Flares \u00b6 Flares are lights in Rigs of Rods. The name refers to their visualization - a 2d flare image, the classic simple depiction of a light source in 3D games. Props \u00b6 Meshes that can be added to vehicles that do not have collision. Flexbody \u00b6 Flexbodies allow you to make mesh-based vehicles which actually deform with the node-and-beam chassis. This makes for incredible visual detail while still keeping the fantastic deformation physics present in Rigs of Rods. Fusedrag \u00b6 A vehicle feature which adjusts aerodynamic properties of the vehicle body/hull. Very important in RoR, greatly affects speed and acceleration. Rotators \u00b6 Rotators are alternate commands (Hydros) that allow you to do turntables, like in the base of a rotating crane. Rollon \u00b6 Enables collision between wheels and the contactable textured surfaces of a truck. Ropables \u00b6 Nodes that can be grabbed to. SlopeBrake \u00b6 Fixes the bug, where trucks slowly roll down a slope no matter how much brake-force is applied.","title":"Jargon"},{"location":"gameplay/jargon/#jargon","text":"This is a glossary of un-intuitive terms used by members of RoR community.","title":"Jargon"},{"location":"gameplay/jargon/#player-terms","text":"","title":"Player terms"},{"location":"gameplay/jargon/#rorlog","text":"The RoR.log is a file which contains information from the last session from Rigs of Rods. It is very helpful to attach this file to any support issues or bugs for more information.","title":"RoR.log"},{"location":"gameplay/jargon/#a-mod","text":"Downloadable game content. The word stands for 'modification', but may describe any content ranging from actually modified vehicles to original and self-contained ones. Maps and other downloads aren't usually referred to as 'mod' directly, but some terms, such as 'mod cache', include them.","title":"A mod"},{"location":"gameplay/jargon/#a-cache-a-mod-cache","text":"Local database of downloaded and installed content, generated by RoR on player's computer for faster browsing and loading. Managed automatically, but may occasionally break and require cleanup and re-generation, so called 'cache regen'.","title":"A cache (a mod cache)"},{"location":"gameplay/jargon/#a-repo-repository","text":"A website with downloadable content.","title":"A repo (repository)"},{"location":"gameplay/jargon/#rorbot","text":"Player-controlled human character, viewed from 3 rd person camera by default. It can walk/run/swim and enter vehicles. The name is historical - in the past, RoRbot was represented by various 3d models, the first one being \"robot.mesh\" which comes with OGRE3D engine.","title":"RoRBot"},{"location":"gameplay/jargon/#a-truck","text":"May refer to any kind of vehicle or machine in RoR. Historically, RoR only supported heavy trucks and the rig definition fileformat had extension .truck. Later, other vehicle types and other file extensions were added, but the notion of \"truck\" as any kind of vehicle had stuck.","title":"A truck"},{"location":"gameplay/jargon/#caelum","text":"Atmospheric effects software.","title":"Caelum"},{"location":"gameplay/jargon/#fov","text":"Field of view, defines depth of perspective in 3D scene.","title":"FOV"},{"location":"gameplay/jargon/#infraction","text":"A form of punishment on the forums. This is usually for misbehavior or breaking the rules.","title":"Infraction"},{"location":"gameplay/jargon/#ogre-ogre-ogre3d","text":"The 3D rendering engine used in Rigs of Rods.","title":"OGRE, Ogre, Ogre3D"},{"location":"gameplay/jargon/#content-creator-terms","text":"","title":"Content creator terms"},{"location":"gameplay/jargon/#stolen","text":"This means the mod in question contains elements, in most cases meshes (3d models) which aren't the author's original work. This includes meshes obtained from public repositories, most notably SketchUp warehouse. More information: Terms of Service#STOLEN CONTENT","title":"Stolen!"},{"location":"gameplay/jargon/#unreleased","text":"Meaning if it is a vehicle, it has no download link and only beta testers have it.","title":"Unreleased"},{"location":"gameplay/jargon/#nb","text":"Node/Beam. This is the skeleton of any vehicle in RoR.","title":"N/B"},{"location":"gameplay/jargon/#node","text":"Essentially zero-dimensional ball joints. They occupy no space, but they do have mass. By themselves they can do very little. They exist to provide beams with two points to connect. They also control collision.","title":"Node"},{"location":"gameplay/jargon/#a-beam","text":"Visible connections between nodes. Beams do not have any mass and do not interact with anything but the two nodes they are connected to. Beams can stretch, compress, and break based on the forces applied to them. The initial length of a beam is the space between two nodes. As a vehicle moves and flexes, the movement of these two nodes forms the force against the beams. Beam is also the physics engine used in Rigs of Rods.","title":"A beam"},{"location":"gameplay/jargon/#ao-ao-bake","text":"Ambient occlusion, a very significant light/shadow effect used in 3D modelling. AO baking is the process of automated generation of AO textures.","title":"AO, AO Bake"},{"location":"gameplay/jargon/#a-cinecam","text":"An user-defined camera attached to vehicle chassis.","title":"A cinecam"},{"location":"gameplay/jargon/#a-command-a-command-beam","text":"An user-controlled hydraulic in a vehicle, \"command hydro\".","title":"A command, a command beam"},{"location":"gameplay/jargon/#editorizer","text":"Freeware program for making n/b structures.","title":"Editorizer"},{"location":"gameplay/jargon/#flares","text":"Flares are lights in Rigs of Rods. The name refers to their visualization - a 2d flare image, the classic simple depiction of a light source in 3D games.","title":"Flares"},{"location":"gameplay/jargon/#props","text":"Meshes that can be added to vehicles that do not have collision.","title":"Props"},{"location":"gameplay/jargon/#flexbody","text":"Flexbodies allow you to make mesh-based vehicles which actually deform with the node-and-beam chassis. This makes for incredible visual detail while still keeping the fantastic deformation physics present in Rigs of Rods.","title":"Flexbody"},{"location":"gameplay/jargon/#fusedrag","text":"A vehicle feature which adjusts aerodynamic properties of the vehicle body/hull. Very important in RoR, greatly affects speed and acceleration.","title":"Fusedrag"},{"location":"gameplay/jargon/#rotators","text":"Rotators are alternate commands (Hydros) that allow you to do turntables, like in the base of a rotating crane.","title":"Rotators"},{"location":"gameplay/jargon/#rollon","text":"Enables collision between wheels and the contactable textured surfaces of a truck.","title":"Rollon"},{"location":"gameplay/jargon/#ropables","text":"Nodes that can be grabbed to.","title":"Ropables"},{"location":"gameplay/jargon/#slopebrake","text":"Fixes the bug, where trucks slowly roll down a slope no matter how much brake-force is applied.","title":"SlopeBrake"},{"location":"gameplay/multiplayer-server-setup/","text":"Multiplayer server setup \u00b6 Introduction \u00b6 This tutorial will guide you through the process of setting up a Rigs of Rods multiplayer server. Port forwarding \u00b6 THIS STEP IS EXTREMELY IMPORTANT - FAILURE TO PORT FORWARD WILL RESULT IN YOUR SERVER TO NOT APPEAR ON THE SERVER LIST AND OTHER PLAYERS WILL NOT BE ABLE TO JOIN! Before we begin, you MUST be able to forward the server port (TCP 12000 by default). This requires accessing your router's firewall settings. Warning All routers/ISPs are different, so just search for a tutorial for your router. A general port forwarding guide can be found here . If you're unable to figure it out, don't bother trying to host a server. If you fail to port forward, the Cannot connect to master server error will appear on startup. On Windows, you also may have to allow rorserver.exe through the firewall. Got that? Great! Let's begin. Windows \u00b6 Requirements \u00b6 VS 2015 Redistributable x86 Text editor (such as Notepad) Router access (for port forwarding) Good internet connection speed A brain, basic computer knowledge, and patience Download \u00b6 First, download rorserver-2021.04-windows.zip from here . Extract the zip into a new folder: server.cfg \u00b6 Browse to the config folder and open server.cfg with Notepad. This is the main configuration file for your server. Each section contains a comment explaining what it does, pretty self-explanatory. For simplicity's sake, you only need to change the name , terrain , port , and password lines. Save and close the file once you're done. server.motd \u00b6 This file sets your server's Message of the Day (MOTD), shown on server join: Fill it out with whatever you'd like. server.rules \u00b6 This file contains the rules for your server, shown by typing !rules . Just as before, fill it out with rules you want players to follow. server.auth \u00b6 This file configures who is staff on your server. Please see the UserAuth setup section for more information. Running \u00b6 Once you're finished configuring your server, double-click StartServer.bat to launch the server: If successful, your server should now be running and registered on the server list! Please see the troubleshooting section if you receive an error. Linux \u00b6 Download \u00b6 I will assume you're running the server on a 64-bit VPS with SSH/FTP access and have unzip and nano installed. First, download rorserver-2021.04-linux.zip from here . Upload the file to your VPS using an FTP client such as WinSCP or FileZilla. Now SSH into your VPS and change to the directory where you uploaded the zip file. Extract the zip with the following command: unzip rorserver-2021.04-linux.zip -d rorserver The server files should now be located in the rorserver folder: server.cfg \u00b6 In SSH, Change to the config directory and type nano server.cfg . This is the main configuration file for your server. Each section contains a comment explaining what it does, pretty self-explanatory. For simplicity's sake, you only need to change the name , terrain , port , and password lines. Once you're done, press CTRL+O to save the file and CTRL+X to exit. server.motd \u00b6 This file sets your server's Message of the Day (MOTD), shown on server join: Fill it out with whatever you'd like. server.rules \u00b6 This file contains the rules for your server, shown by typing !rules . Just as before, fill it out with rules you want players to follow. server.auth \u00b6 This file configures who is staff on your server. Please see the UserAuth setup section for more information. Running \u00b6 Once you're finished configuring your server, change back to the rorserver directory and run the following: chmod +x rorserver sh StartServer.sh chmod +x rorserver only needs to be run once to set permissions. If successful, your server should now be running and registered on the server list! Please see the troubleshooting section if you receive an error. UserAuth setup \u00b6 This section will teach you how to set up the server.auth file. This is used to define who is staff on your server. Shut down your server before following these steps. User token \u00b6 First, you need to set a user token in your game's settings. To do this, please follow this tutorial . server.auth \u00b6 Open the server.auth file in a text editor. The contents should look like this: ; This files defines who is an admin, moderator etc on your server ; the syntax is as follows: <authorization> <token> <username (optional)> ; - where authorization is a number between 1 and 13: ; 1: administrator (red name, has access to all admin functions) ; 4: moderator (red name, has access to all admin functions) ; 8: bot, robot (blue name, no special privileges) ; - token is the user token of the user. It's the token that uniquely identifies the user, not the username. ; This is not the normal token, but an encoded version of it. ; You can get this token by starting your server, filling in your token ; in your configurator and then look in the logfile for your encoded token. ; A typical encoded token is exactly 40 characters long. ; - username is the username that will be shown to other players ; The username that the user fills in into their configurator will be overridden by this username. ; If you do not specify a username, the username from the client's configurator will be used. ; ; note: You need to restart server after every edit to this file. ; note: Do not use spaces in the usernames ; note: Empty lines and lines starting with a \";\" will be ignored. ; EXAMPLE ADMIN (replace these with your username and encoded token) ;1 9b3c463506f128319a0f16ef08d39d876ca25c68 admin_user Start your server, join it and open the log file located at config/server.log . You should see a line similar to this: INFO| New client: example_user (en_US), using RoR 0.4.7.0-dev-0ab5bca-dirty, with token 0EBB5A8B28053AB3CF63D4C59F0C1E04F28F01C9 0EBB5A8B28053AB3CF63D4C59F0C1E04F28F01C9 is the hashed token for the user, which is what you will set in your auth file. If you want the user to be a admin, set the number to 1 , or 4 if you want the user to be a moderator. ;example admin 1 0EBB5A8B28053AB3CF63D4C59F0C1E04F28F01C9 example_user ;example moderator 4 0EBB5A8B28053AB3CF63D4C59F0C1E04F28F01C9 example_user Make sure to remove the comment ( ; ) before the line. Save the file and restart your server. If the server read the auth file correctly, it should log this: INFO| found X auth overrides in the authorizations file! The next time you join your server you should now have a red flag next to your name if you're a admin or a blue flag if you're a moderator. Admin/moderator commands: !list - Lists all users on a server with their UID !kick/!ban - Kicks or bans a user. Note that server bans are currently removed when the server restarts. Usage: !kick UID reason or !ban UID reason !say - Sends a message to a user or the entire server. Usage: !say 10 message or !say -1 message Troubleshooting \u00b6 Many things can go wrong with your server, here's a small selection of problems that may occur: Common error messages \u00b6 Cannot connect to master server \u00b6 Registration failed, response code: HTTP 503, body: {\"result\":false,\"message\":\"Could not connect to your server and verify it's version. Please check your Firewall or leave it as it is now to create a local only server. Your server is NOT advertised on the master server! This usually means that you didn't forward your port. Another cause may be that you specified the wrong IP address. If you don't know the correct IP address, then don't specify one. The server will search the correct IP address itself. Address already in use \u00b6 FATAL Listerer: SWInetSocket::bind() error: Address already in use The port that you filled in is already in use by another program. Please use another port number. Failed to open authorization file \u00b6 Couldn't open the local authorizations file ('/etc/rorserver/simple.auth'). No authorizations were loaded. This means that the server failed to read your authorization file. Make sure your filename matches the one you specified and refer back to the UserAuth setup section. If you didn't setup an authorization file, you can safely ignore this error message. Connection issues \u00b6 Server uses a different protocol version \u00b6 Network fatal error: server uses a different protocol version You need to download the correct game version to match your server version. Version 2021.04 supports RoRNet 2.43, the latest server protocol. The latest version may be downloaded from the homepage . If you've come across a problem not listed here, please post in the appropriate support forum","title":"Multiplayer server setup"},{"location":"gameplay/multiplayer-server-setup/#multiplayer-server-setup","text":"","title":"Multiplayer server setup"},{"location":"gameplay/multiplayer-server-setup/#introduction","text":"This tutorial will guide you through the process of setting up a Rigs of Rods multiplayer server.","title":"Introduction"},{"location":"gameplay/multiplayer-server-setup/#port-forwarding","text":"THIS STEP IS EXTREMELY IMPORTANT - FAILURE TO PORT FORWARD WILL RESULT IN YOUR SERVER TO NOT APPEAR ON THE SERVER LIST AND OTHER PLAYERS WILL NOT BE ABLE TO JOIN! Before we begin, you MUST be able to forward the server port (TCP 12000 by default). This requires accessing your router's firewall settings. Warning All routers/ISPs are different, so just search for a tutorial for your router. A general port forwarding guide can be found here . If you're unable to figure it out, don't bother trying to host a server. If you fail to port forward, the Cannot connect to master server error will appear on startup. On Windows, you also may have to allow rorserver.exe through the firewall. Got that? Great! Let's begin.","title":"Port forwarding"},{"location":"gameplay/multiplayer-server-setup/#windows","text":"","title":"Windows"},{"location":"gameplay/multiplayer-server-setup/#requirements","text":"VS 2015 Redistributable x86 Text editor (such as Notepad) Router access (for port forwarding) Good internet connection speed A brain, basic computer knowledge, and patience","title":"Requirements"},{"location":"gameplay/multiplayer-server-setup/#download","text":"First, download rorserver-2021.04-windows.zip from here . Extract the zip into a new folder:","title":"Download"},{"location":"gameplay/multiplayer-server-setup/#servercfg","text":"Browse to the config folder and open server.cfg with Notepad. This is the main configuration file for your server. Each section contains a comment explaining what it does, pretty self-explanatory. For simplicity's sake, you only need to change the name , terrain , port , and password lines. Save and close the file once you're done.","title":"server.cfg"},{"location":"gameplay/multiplayer-server-setup/#servermotd","text":"This file sets your server's Message of the Day (MOTD), shown on server join: Fill it out with whatever you'd like.","title":"server.motd"},{"location":"gameplay/multiplayer-server-setup/#serverrules","text":"This file contains the rules for your server, shown by typing !rules . Just as before, fill it out with rules you want players to follow.","title":"server.rules"},{"location":"gameplay/multiplayer-server-setup/#serverauth","text":"This file configures who is staff on your server. Please see the UserAuth setup section for more information.","title":"server.auth"},{"location":"gameplay/multiplayer-server-setup/#running","text":"Once you're finished configuring your server, double-click StartServer.bat to launch the server: If successful, your server should now be running and registered on the server list! Please see the troubleshooting section if you receive an error.","title":"Running"},{"location":"gameplay/multiplayer-server-setup/#linux","text":"","title":"Linux"},{"location":"gameplay/multiplayer-server-setup/#download_1","text":"I will assume you're running the server on a 64-bit VPS with SSH/FTP access and have unzip and nano installed. First, download rorserver-2021.04-linux.zip from here . Upload the file to your VPS using an FTP client such as WinSCP or FileZilla. Now SSH into your VPS and change to the directory where you uploaded the zip file. Extract the zip with the following command: unzip rorserver-2021.04-linux.zip -d rorserver The server files should now be located in the rorserver folder:","title":"Download"},{"location":"gameplay/multiplayer-server-setup/#servercfg_1","text":"In SSH, Change to the config directory and type nano server.cfg . This is the main configuration file for your server. Each section contains a comment explaining what it does, pretty self-explanatory. For simplicity's sake, you only need to change the name , terrain , port , and password lines. Once you're done, press CTRL+O to save the file and CTRL+X to exit.","title":"server.cfg"},{"location":"gameplay/multiplayer-server-setup/#servermotd_1","text":"This file sets your server's Message of the Day (MOTD), shown on server join: Fill it out with whatever you'd like.","title":"server.motd"},{"location":"gameplay/multiplayer-server-setup/#serverrules_1","text":"This file contains the rules for your server, shown by typing !rules . Just as before, fill it out with rules you want players to follow.","title":"server.rules"},{"location":"gameplay/multiplayer-server-setup/#serverauth_1","text":"This file configures who is staff on your server. Please see the UserAuth setup section for more information.","title":"server.auth"},{"location":"gameplay/multiplayer-server-setup/#running_1","text":"Once you're finished configuring your server, change back to the rorserver directory and run the following: chmod +x rorserver sh StartServer.sh chmod +x rorserver only needs to be run once to set permissions. If successful, your server should now be running and registered on the server list! Please see the troubleshooting section if you receive an error.","title":"Running"},{"location":"gameplay/multiplayer-server-setup/#userauth-setup","text":"This section will teach you how to set up the server.auth file. This is used to define who is staff on your server. Shut down your server before following these steps.","title":"UserAuth setup"},{"location":"gameplay/multiplayer-server-setup/#user-token","text":"First, you need to set a user token in your game's settings. To do this, please follow this tutorial .","title":"User token"},{"location":"gameplay/multiplayer-server-setup/#serverauth_2","text":"Open the server.auth file in a text editor. The contents should look like this: ; This files defines who is an admin, moderator etc on your server ; the syntax is as follows: <authorization> <token> <username (optional)> ; - where authorization is a number between 1 and 13: ; 1: administrator (red name, has access to all admin functions) ; 4: moderator (red name, has access to all admin functions) ; 8: bot, robot (blue name, no special privileges) ; - token is the user token of the user. It's the token that uniquely identifies the user, not the username. ; This is not the normal token, but an encoded version of it. ; You can get this token by starting your server, filling in your token ; in your configurator and then look in the logfile for your encoded token. ; A typical encoded token is exactly 40 characters long. ; - username is the username that will be shown to other players ; The username that the user fills in into their configurator will be overridden by this username. ; If you do not specify a username, the username from the client's configurator will be used. ; ; note: You need to restart server after every edit to this file. ; note: Do not use spaces in the usernames ; note: Empty lines and lines starting with a \";\" will be ignored. ; EXAMPLE ADMIN (replace these with your username and encoded token) ;1 9b3c463506f128319a0f16ef08d39d876ca25c68 admin_user Start your server, join it and open the log file located at config/server.log . You should see a line similar to this: INFO| New client: example_user (en_US), using RoR 0.4.7.0-dev-0ab5bca-dirty, with token 0EBB5A8B28053AB3CF63D4C59F0C1E04F28F01C9 0EBB5A8B28053AB3CF63D4C59F0C1E04F28F01C9 is the hashed token for the user, which is what you will set in your auth file. If you want the user to be a admin, set the number to 1 , or 4 if you want the user to be a moderator. ;example admin 1 0EBB5A8B28053AB3CF63D4C59F0C1E04F28F01C9 example_user ;example moderator 4 0EBB5A8B28053AB3CF63D4C59F0C1E04F28F01C9 example_user Make sure to remove the comment ( ; ) before the line. Save the file and restart your server. If the server read the auth file correctly, it should log this: INFO| found X auth overrides in the authorizations file! The next time you join your server you should now have a red flag next to your name if you're a admin or a blue flag if you're a moderator. Admin/moderator commands: !list - Lists all users on a server with their UID !kick/!ban - Kicks or bans a user. Note that server bans are currently removed when the server restarts. Usage: !kick UID reason or !ban UID reason !say - Sends a message to a user or the entire server. Usage: !say 10 message or !say -1 message","title":"server.auth"},{"location":"gameplay/multiplayer-server-setup/#troubleshooting","text":"Many things can go wrong with your server, here's a small selection of problems that may occur:","title":"Troubleshooting"},{"location":"gameplay/multiplayer-server-setup/#common-error-messages","text":"","title":"Common error messages"},{"location":"gameplay/multiplayer-server-setup/#cannot-connect-to-master-server","text":"Registration failed, response code: HTTP 503, body: {\"result\":false,\"message\":\"Could not connect to your server and verify it's version. Please check your Firewall or leave it as it is now to create a local only server. Your server is NOT advertised on the master server! This usually means that you didn't forward your port. Another cause may be that you specified the wrong IP address. If you don't know the correct IP address, then don't specify one. The server will search the correct IP address itself.","title":"Cannot connect to master server"},{"location":"gameplay/multiplayer-server-setup/#address-already-in-use","text":"FATAL Listerer: SWInetSocket::bind() error: Address already in use The port that you filled in is already in use by another program. Please use another port number.","title":"Address already in use"},{"location":"gameplay/multiplayer-server-setup/#failed-to-open-authorization-file","text":"Couldn't open the local authorizations file ('/etc/rorserver/simple.auth'). No authorizations were loaded. This means that the server failed to read your authorization file. Make sure your filename matches the one you specified and refer back to the UserAuth setup section. If you didn't setup an authorization file, you can safely ignore this error message.","title":"Failed to open authorization file"},{"location":"gameplay/multiplayer-server-setup/#connection-issues","text":"","title":"Connection issues"},{"location":"gameplay/multiplayer-server-setup/#server-uses-a-different-protocol-version","text":"Network fatal error: server uses a different protocol version You need to download the correct game version to match your server version. Version 2021.04 supports RoRNet 2.43, the latest server protocol. The latest version may be downloaded from the homepage . If you've come across a problem not listed here, please post in the appropriate support forum","title":"Server uses a different protocol version"},{"location":"gameplay/version-2020-01-faq/","text":"Version 2020.01 FAQ \u00b6 Rigs of Rods version 2020.01 brings some important changes to how players interact with the game. This page should answer any questions you have about these changes. Version format change \u00b6 Until now, Rigs of Rods has used the semver release format (0.38.x, 0.39.x, 0.4.x). Starting with version 2020.01, we now use date-based versioning. All future versions will now start with <year>.<month> Why? \u00b6 In 2016, we (the RoR developers) released version 0.4.7.0. During the following years, lots of bugfixes and new features were added. We wanted to include them all with the next release, 0.4.8.0, but new bugs and technical issues prevented us from doing so. So on January 2019, the first release candidate, 0.4.8 RC1 , was released as a test build. As with all test builds, bugs were found and the next release candidates (RC2, RC3, RC4) followed. But as we made more changes and bugfixes, mods became dependent on the development builds to function properly. The current stable release (0.4.7.0) became too old to support them. However, the game still had some major glitches holding back an official 0.4.8.0 release. As a solution, we decided to release 0.4.8 RC4 as a replacement to 0.4.7.0, followed by RC5 a few months later. With RoR now considered 'stable enough' to do another stable release, we wanted to break away from release candidates. The original plan was to finally officially release 0.4.8.0, however compatibility issues with the Documents user folder (explained below) made it nearly impossible to correctly handle upgrades. After long discussions on Discord and GitHub( 1 / 2 ) we ultimately decided to change the version format. User folder location change \u00b6 Since 0.38, the user directory, where mods and configuration files are stored, was named after the version number ( Rigs of Rods 0.38/0.39/0.4 ). All 0.4 versions have used the same Documents\\Rigs of Rods 0.4 directory. Over time, the config file format has received major updates, making it increasingly difficult to be backwards compatible. In most cases, attempting to upgrade from older versions caused RoR to either outright crash or have other major glitches. Starting with version 2020.01, the user directory has been moved to Documents\\My Games\\Rigs of Rods . The My Games folder is used by a large amount of modern Windows games to store configuration files, so it is fitting for RoR to use it as well. The user directory on Linux will remain in ~/.rigsofrods for now. Mods \u00b6 On first run, players with the old directory will receive a notice about the directory change. To continue using your mods, you will have to move your mod directories ( mods on recent RCs, or packs , terrains , and vehicles on older versions) to the new My Games\\Rigs of Rods directory. RoR itself will not move the folders to prevent data loss. The Installing content page has been updated for the new directory. Settings and input mappings \u00b6 At the moment, players who already use 0.4.8 RC5 can move the config and savegames folders from Documents\\Rigs of Rods 0.4 to the new directory without issues. For those running older versions, DO NOT move the config or savegames folders. Version 2020.01 is not compatible with anything older than 0.4.8 RC5. If you have input maps for controllers ( separate controller .map files , not an edited input.map !!) you will have to move those to the new config folder to continue using your input devices. End of 32 bit support \u00b6 Beginning with version 2020.01, Rigs of Rods will be for 64-bit systems only due to unfixable bugs with 32 bit builds. We're sorry for any inconvenience this may cause.","title":"Version 2020.01 FAQ"},{"location":"gameplay/version-2020-01-faq/#version-202001-faq","text":"Rigs of Rods version 2020.01 brings some important changes to how players interact with the game. This page should answer any questions you have about these changes.","title":"Version 2020.01 FAQ"},{"location":"gameplay/version-2020-01-faq/#version-format-change","text":"Until now, Rigs of Rods has used the semver release format (0.38.x, 0.39.x, 0.4.x). Starting with version 2020.01, we now use date-based versioning. All future versions will now start with <year>.<month>","title":"Version format change"},{"location":"gameplay/version-2020-01-faq/#why","text":"In 2016, we (the RoR developers) released version 0.4.7.0. During the following years, lots of bugfixes and new features were added. We wanted to include them all with the next release, 0.4.8.0, but new bugs and technical issues prevented us from doing so. So on January 2019, the first release candidate, 0.4.8 RC1 , was released as a test build. As with all test builds, bugs were found and the next release candidates (RC2, RC3, RC4) followed. But as we made more changes and bugfixes, mods became dependent on the development builds to function properly. The current stable release (0.4.7.0) became too old to support them. However, the game still had some major glitches holding back an official 0.4.8.0 release. As a solution, we decided to release 0.4.8 RC4 as a replacement to 0.4.7.0, followed by RC5 a few months later. With RoR now considered 'stable enough' to do another stable release, we wanted to break away from release candidates. The original plan was to finally officially release 0.4.8.0, however compatibility issues with the Documents user folder (explained below) made it nearly impossible to correctly handle upgrades. After long discussions on Discord and GitHub( 1 / 2 ) we ultimately decided to change the version format.","title":"Why?"},{"location":"gameplay/version-2020-01-faq/#user-folder-location-change","text":"Since 0.38, the user directory, where mods and configuration files are stored, was named after the version number ( Rigs of Rods 0.38/0.39/0.4 ). All 0.4 versions have used the same Documents\\Rigs of Rods 0.4 directory. Over time, the config file format has received major updates, making it increasingly difficult to be backwards compatible. In most cases, attempting to upgrade from older versions caused RoR to either outright crash or have other major glitches. Starting with version 2020.01, the user directory has been moved to Documents\\My Games\\Rigs of Rods . The My Games folder is used by a large amount of modern Windows games to store configuration files, so it is fitting for RoR to use it as well. The user directory on Linux will remain in ~/.rigsofrods for now.","title":"User folder location change"},{"location":"gameplay/version-2020-01-faq/#mods","text":"On first run, players with the old directory will receive a notice about the directory change. To continue using your mods, you will have to move your mod directories ( mods on recent RCs, or packs , terrains , and vehicles on older versions) to the new My Games\\Rigs of Rods directory. RoR itself will not move the folders to prevent data loss. The Installing content page has been updated for the new directory.","title":"Mods"},{"location":"gameplay/version-2020-01-faq/#settings-and-input-mappings","text":"At the moment, players who already use 0.4.8 RC5 can move the config and savegames folders from Documents\\Rigs of Rods 0.4 to the new directory without issues. For those running older versions, DO NOT move the config or savegames folders. Version 2020.01 is not compatible with anything older than 0.4.8 RC5. If you have input maps for controllers ( separate controller .map files , not an edited input.map !!) you will have to move those to the new config folder to continue using your input devices.","title":"Settings and input mappings"},{"location":"gameplay/version-2020-01-faq/#end-of-32-bit-support","text":"Beginning with version 2020.01, Rigs of Rods will be for 64-bit systems only due to unfixable bugs with 32 bit builds. We're sorry for any inconvenience this may cause.","title":"End of 32 bit support"},{"location":"legal/crash-report-privacy-policy/","text":"Crash Report Privacy Policy \u00b6 What information do we collect? \u00b6 We collect information from you when you send us an error report from Rigs of Rods. The information includes: Crash descriptor XML file which contains basic information about the crash Crash minidump file which contains technical information about exception in RoR Various RoR generated files: Logs : RoR.log, mygui.log, configlog.txt, mods.cache Configurations : RoR.cfg, ogre.cfg, input.map, ground_models.cfg A screenshot of the RoR window when it crashed (only the main window, not the whole desktop). You may be asked to enter your e-mail address and problem description. This information is also included into the crash descriptor XML. What do we use your information for? \u00b6 Any of the information we collect from you may be used in one of the following ways: To improve Rigs of Rods (we continually strive to improve our software based on the information and feedback we receive from you) Do we disclose any information to outside parties? \u00b6 We do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. We may release your information when we believe release is appropriate to comply with the law or protect ours or others rights, property, or safety. California Online Privacy Protection Act Compliance \u00b6 Because we value your privacy we have taken the necessary precautions to be in compliance with the California Online Privacy Protection Act. We therefore will not distribute your personal information to outside parties without your consent. Your Consent \u00b6 By sending the error report, you consent to our privacy policy. Changes to our Privacy Policy \u00b6 If we decide to change our privacy policy, we will post those changes on this page.","title":"Crash Report Privacy Policy"},{"location":"legal/crash-report-privacy-policy/#crash-report-privacy-policy","text":"","title":"Crash Report Privacy Policy"},{"location":"legal/crash-report-privacy-policy/#what-information-do-we-collect","text":"We collect information from you when you send us an error report from Rigs of Rods. The information includes: Crash descriptor XML file which contains basic information about the crash Crash minidump file which contains technical information about exception in RoR Various RoR generated files: Logs : RoR.log, mygui.log, configlog.txt, mods.cache Configurations : RoR.cfg, ogre.cfg, input.map, ground_models.cfg A screenshot of the RoR window when it crashed (only the main window, not the whole desktop). You may be asked to enter your e-mail address and problem description. This information is also included into the crash descriptor XML.","title":"What information do we collect?"},{"location":"legal/crash-report-privacy-policy/#what-do-we-use-your-information-for","text":"Any of the information we collect from you may be used in one of the following ways: To improve Rigs of Rods (we continually strive to improve our software based on the information and feedback we receive from you)","title":"What do we use your information for?"},{"location":"legal/crash-report-privacy-policy/#do-we-disclose-any-information-to-outside-parties","text":"We do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. We may release your information when we believe release is appropriate to comply with the law or protect ours or others rights, property, or safety.","title":"Do we disclose any information to outside parties?"},{"location":"legal/crash-report-privacy-policy/#california-online-privacy-protection-act-compliance","text":"Because we value your privacy we have taken the necessary precautions to be in compliance with the California Online Privacy Protection Act. We therefore will not distribute your personal information to outside parties without your consent.","title":"California Online Privacy Protection Act Compliance"},{"location":"legal/crash-report-privacy-policy/#your-consent","text":"By sending the error report, you consent to our privacy policy.","title":"Your Consent"},{"location":"legal/crash-report-privacy-policy/#changes-to-our-privacy-policy","text":"If we decide to change our privacy policy, we will post those changes on this page.","title":"Changes to our Privacy Policy"},{"location":"rules/rules-backseat/","text":"Backseat \u00b6 This page exists as a clarification for the following rule: Terms of Service#BACKSEAT Do not backseat moderate \u00b6 If you see a post that violates these guidelines, don't worry, a moderator will see it soon. Do not post a message (or say, as a part of your message) telling someone to follow these guidelines. In general, it is preferred simply to let moderators notice and address problems. Do not reply if a person bumps a thread, instead report the post and wait until a moderator handles it. If you find a severe problem (i.e. someone making personal attacks, posting inappropriate pictures or other things that need to be addressed immediately), please use the Report button to report the post. Do not backtalk moderators or admins \u00b6 Don't give attitude to moderators or admins doing their job. If you have a problem with something, open a thread in forum support, or send them a polite PM - perhaps there's a misunderstanding. Do not argue when you disagree about an infraction you got. If you think the infraction is totally inappropriate, contact the person who gave it to you politely and describe your opinion precisely.","title":"BACKSEAT"},{"location":"rules/rules-backseat/#backseat","text":"This page exists as a clarification for the following rule: Terms of Service#BACKSEAT","title":"Backseat"},{"location":"rules/rules-backseat/#do-not-backseat-moderate","text":"If you see a post that violates these guidelines, don't worry, a moderator will see it soon. Do not post a message (or say, as a part of your message) telling someone to follow these guidelines. In general, it is preferred simply to let moderators notice and address problems. Do not reply if a person bumps a thread, instead report the post and wait until a moderator handles it. If you find a severe problem (i.e. someone making personal attacks, posting inappropriate pictures or other things that need to be addressed immediately), please use the Report button to report the post.","title":"Do not backseat moderate"},{"location":"rules/rules-backseat/#do-not-backtalk-moderators-or-admins","text":"Don't give attitude to moderators or admins doing their job. If you have a problem with something, open a thread in forum support, or send them a polite PM - perhaps there's a misunderstanding. Do not argue when you disagree about an infraction you got. If you think the infraction is totally inappropriate, contact the person who gave it to you politely and describe your opinion precisely.","title":"Do not backtalk moderators or admins"},{"location":"rules/rules-begging/","text":"Begging \u00b6 This page exists as a clarification for the following rule: Terms of Service#BEGGING What is begging? \u00b6 Asking for someone to release something. Asking when something will be released. Asking an author to post his/her creation. Asking for any updates of a project. Telling someone to create something. Asking an author to include updated pictures of his/her project. Bumping your topic to say \"plz can som1 help me plsplspls\". Why? \u00b6 Because it's impolite. Nobody gets paid here. Everyone is a volunteer. Projects may be done quickly, or they may be done slowly, or they may even languish and die. Do not be impolite towards people taking their time to contribute. You are encouraged to offer praise. You are not allowed to make demands. So I can't make any suggestions? \u00b6 You can absolutely make suggestions and give constructive criticism, as long as they aren't cloaked begging. For example, I suggest you release this would be begging. I suggest you change the windows in X way is not begging. There's a difference between asking someone to do something, and suggesting a method of doing something they're already doing... Also, it's about politeness. The more polite you are; the more helpful you're being; the less likely it is that something will be taken to be begging.","title":"BEGGING"},{"location":"rules/rules-begging/#begging","text":"This page exists as a clarification for the following rule: Terms of Service#BEGGING","title":"Begging"},{"location":"rules/rules-begging/#what-is-begging","text":"Asking for someone to release something. Asking when something will be released. Asking an author to post his/her creation. Asking for any updates of a project. Telling someone to create something. Asking an author to include updated pictures of his/her project. Bumping your topic to say \"plz can som1 help me plsplspls\".","title":"What is begging?"},{"location":"rules/rules-begging/#why","text":"Because it's impolite. Nobody gets paid here. Everyone is a volunteer. Projects may be done quickly, or they may be done slowly, or they may even languish and die. Do not be impolite towards people taking their time to contribute. You are encouraged to offer praise. You are not allowed to make demands.","title":"Why?"},{"location":"rules/rules-begging/#so-i-cant-make-any-suggestions","text":"You can absolutely make suggestions and give constructive criticism, as long as they aren't cloaked begging. For example, I suggest you release this would be begging. I suggest you change the windows in X way is not begging. There's a difference between asking someone to do something, and suggesting a method of doing something they're already doing... Also, it's about politeness. The more polite you are; the more helpful you're being; the less likely it is that something will be taken to be begging.","title":"So I can't make any suggestions?"},{"location":"rules/rules-grammar/","text":"Grammar \u00b6 This page exists as a clarification for the following rule: Terms of Service#GRAMMAR Caps lock use \u00b6 Any excessive use of caps lock in your post will be edited or deleted. If you continue to use upper case in your post you will be contacted by a admin. Abbreviations in posts \u00b6 Posts that contain only lol/rofl/lmao or any other abbreviation will be considered as spam and could end up being deleted if it adds nothing to the discussion.","title":"GRAMMAR"},{"location":"rules/rules-grammar/#grammar","text":"This page exists as a clarification for the following rule: Terms of Service#GRAMMAR","title":"Grammar"},{"location":"rules/rules-grammar/#caps-lock-use","text":"Any excessive use of caps lock in your post will be edited or deleted. If you continue to use upper case in your post you will be contacted by a admin.","title":"Caps lock use"},{"location":"rules/rules-grammar/#abbreviations-in-posts","text":"Posts that contain only lol/rofl/lmao or any other abbreviation will be considered as spam and could end up being deleted if it adds nothing to the discussion.","title":"Abbreviations in posts"},{"location":"rules/rules-links/","text":"Links \u00b6 This page exists as a clarification for the following rule: Terms of Service#LINKS Do not advertise \u00b6 No advertisements of any kind are permitted without prior approval from a forum administrator. Please send a PM to a forum admin if you wish to post a link to another site or otherwise advertise something. Also unpaid advertisement for non-free vehicles (or any other RoR-related business) is forbidden in the forums! All content for RoR is free. Anyone found to be selling mods will be banned. Moderators and admins are allowed to remove any external link that is inappropriate with the rules or the goal of the forum. Spam \u00b6 Spam is strictly forbidden! Our forum has spam protection that keeps most spammers out. If you find a spam post, just use the Report button and let a staff member handle it. Do not reply to the spammer.","title":"LINKS"},{"location":"rules/rules-links/#links","text":"This page exists as a clarification for the following rule: Terms of Service#LINKS","title":"Links"},{"location":"rules/rules-links/#do-not-advertise","text":"No advertisements of any kind are permitted without prior approval from a forum administrator. Please send a PM to a forum admin if you wish to post a link to another site or otherwise advertise something. Also unpaid advertisement for non-free vehicles (or any other RoR-related business) is forbidden in the forums! All content for RoR is free. Anyone found to be selling mods will be banned. Moderators and admins are allowed to remove any external link that is inappropriate with the rules or the goal of the forum.","title":"Do not advertise"},{"location":"rules/rules-links/#spam","text":"Spam is strictly forbidden! Our forum has spam protection that keeps most spammers out. If you find a spam post, just use the Report button and let a staff member handle it. Do not reply to the spammer.","title":"Spam"},{"location":"rules/rules-nice/","text":"Nice \u00b6 This page exists as a clarification for the following rule: Terms of Service#NICE Be nice \u00b6 Be nice. Don't be rude. Respect your fellow posters, moderators, and admins. Problems with a post \u00b6 If someone has made a mistake in there post like forgetting to close a tag or if you find a post offensive, think it's spam or have a problem that could need a administrators help, then use the [[Image:Report.png]] link at the bottom right of the post. Problems with PMs \u00b6 If someone is bothering you in a PM, click the Report button below their message and a staff member will handle it.","title":"NICE"},{"location":"rules/rules-nice/#nice","text":"This page exists as a clarification for the following rule: Terms of Service#NICE","title":"Nice"},{"location":"rules/rules-nice/#be-nice","text":"Be nice. Don't be rude. Respect your fellow posters, moderators, and admins.","title":"Be nice"},{"location":"rules/rules-nice/#problems-with-a-post","text":"If someone has made a mistake in there post like forgetting to close a tag or if you find a post offensive, think it's spam or have a problem that could need a administrators help, then use the [[Image:Report.png]] link at the bottom right of the post.","title":"Problems with a post"},{"location":"rules/rules-nice/#problems-with-pms","text":"If someone is bothering you in a PM, click the Report button below their message and a staff member will handle it.","title":"Problems with PMs"},{"location":"rules/rules-search/","text":"Search \u00b6 This page exists as a clarification for the following rule: Terms of Service#SEARCH Search before asking \u00b6 Search the forum before making a request or asking a question. Many times, you will find that your question or problem has already been posted, and there is an answer sitting right there, waiting for you to find - without the delay of waiting for someone to reply. Adding your vote to an existing request or problem report is better than creating a new topic. Why was I warned? \u00b6 If you've been given a warning pointing you here, it's possible that you have asked a question that is considered to be very lazy. For example, if someone asks, \"What does a Toyota truck look like?\", I would warn them regarding this guideline, because you can very easily use Google image search to find plenty of pictures of Toyota trucks.","title":"SEARCH"},{"location":"rules/rules-search/#search","text":"This page exists as a clarification for the following rule: Terms of Service#SEARCH","title":"Search"},{"location":"rules/rules-search/#search-before-asking","text":"Search the forum before making a request or asking a question. Many times, you will find that your question or problem has already been posted, and there is an answer sitting right there, waiting for you to find - without the delay of waiting for someone to reply. Adding your vote to an existing request or problem report is better than creating a new topic.","title":"Search before asking"},{"location":"rules/rules-search/#why-was-i-warned","text":"If you've been given a warning pointing you here, it's possible that you have asked a question that is considered to be very lazy. For example, if someone asks, \"What does a Toyota truck look like?\", I would warn them regarding this guideline, because you can very easily use Google image search to find plenty of pictures of Toyota trucks.","title":"Why was I warned?"},{"location":"rules/rules-singularity/","text":"Singularity \u00b6 This page exists as a clarification for the following rule: Terms of Service#SINGULARITY The Rule of Singularity \u00b6 One account per person (do not create multiple accounts, all of your accounts will be banned if we find out) One topic per subject (do not create multiple topics for the same thing. Note that this applies to sub-parts of the same thing, for example: projects are subject to this rule. One topic. Period.) One post per problem (do not post your problem in multiple threads - choose ONE place to post it) User Accounts \u00b6 You may only be permitted to 1 user account unless you have specific permission from a forum administrator.","title":"SINGULARITY"},{"location":"rules/rules-singularity/#singularity","text":"This page exists as a clarification for the following rule: Terms of Service#SINGULARITY","title":"Singularity"},{"location":"rules/rules-singularity/#the-rule-of-singularity","text":"One account per person (do not create multiple accounts, all of your accounts will be banned if we find out) One topic per subject (do not create multiple topics for the same thing. Note that this applies to sub-parts of the same thing, for example: projects are subject to this rule. One topic. Period.) One post per problem (do not post your problem in multiple threads - choose ONE place to post it)","title":"The Rule of Singularity"},{"location":"rules/rules-singularity/#user-accounts","text":"You may only be permitted to 1 user account unless you have specific permission from a forum administrator.","title":"User Accounts"},{"location":"rules/rules-stolen-content/","text":"Stolen Content \u00b6 This page exists as a clarification for the following rule: Terms of Service#STOLEN CONTENT Authorship Requirements \u00b6 When creating or modding: You may freely use your own creations (of course). You may use the RoR creations of others if the original author approves (they may give a blanket statement (You may mod this as you wish..) or permission might be granted on a case by case basis) and credit is given. You may use third-party creations if you follow the terms and conditions below Usage of 3 rd party content . Also you must be able to verify that you may use 3 rd party material. If the original author stated nothing about copyright, then you must ask him/her! Why do these polices exist? \u00b6 If someone were to steal copyrighted work (for example: a Need for Speed 3d model) and used it in RoR/uploaded it to the forums or repository, then the author/copyright holder (in this example, Electronic Arts) could sue the RoR website for copyright infringement. Such a lawsuit would likely be quite costly, and possibly spell the end of RoR. It is therefore imperative that all copyright regulations be followed. Usage of 3 rd party content \u00b6 Using content from Sketchup Warehouse: Forbidden Using content licensed under a Creative Commons Licence: allowed, except if licensed under CC-BY-NC-ND or CC BY-ND, those are forbidden as modifications are not allowed. Giving credit and a source is always necessary when posting on this forum , even if licensed under CC-0. This way we can easily check if the model is legit for this website. Using copyrighted content (this is what you get from most 3D model websites): Only allowed if you have written permission from the original author (or all authors if there were multiple persons involved), even if the website itself states that all models are free to use. You need to send us a screenshot of this permission before uploading or showing pictures. Usage of content from banned members \u00b6 Generally it is allowed to use or post screenshots of content made by members who are now banned from the forum. There is one exception: If a member is known for many violations of stolen content rules (especially if he/she was banned for this), content of this user may not be shown, modified, reuploaded etc. We will not provide a list on that as we don't want to create a \"wall of shame\", so please inform yourself which content might be affected by this rule. If you are unsure, don't post. Consequences \u00b6 If you are caught stealing copyrighted materials you will be punished accordingly. It may lead to you being banned from uploading content to the repository, or banned completely from the RoR website. Copyright violations are considered serious rule breaches and are not to be taken lightly.","title":"STOLEN CONTENT"},{"location":"rules/rules-stolen-content/#stolen-content","text":"This page exists as a clarification for the following rule: Terms of Service#STOLEN CONTENT","title":"Stolen Content"},{"location":"rules/rules-stolen-content/#authorship-requirements","text":"When creating or modding: You may freely use your own creations (of course). You may use the RoR creations of others if the original author approves (they may give a blanket statement (You may mod this as you wish..) or permission might be granted on a case by case basis) and credit is given. You may use third-party creations if you follow the terms and conditions below Usage of 3 rd party content . Also you must be able to verify that you may use 3 rd party material. If the original author stated nothing about copyright, then you must ask him/her!","title":"Authorship Requirements"},{"location":"rules/rules-stolen-content/#why-do-these-polices-exist","text":"If someone were to steal copyrighted work (for example: a Need for Speed 3d model) and used it in RoR/uploaded it to the forums or repository, then the author/copyright holder (in this example, Electronic Arts) could sue the RoR website for copyright infringement. Such a lawsuit would likely be quite costly, and possibly spell the end of RoR. It is therefore imperative that all copyright regulations be followed.","title":"Why do these polices exist?"},{"location":"rules/rules-stolen-content/#usage-of-3rd-party-content","text":"Using content from Sketchup Warehouse: Forbidden Using content licensed under a Creative Commons Licence: allowed, except if licensed under CC-BY-NC-ND or CC BY-ND, those are forbidden as modifications are not allowed. Giving credit and a source is always necessary when posting on this forum , even if licensed under CC-0. This way we can easily check if the model is legit for this website. Using copyrighted content (this is what you get from most 3D model websites): Only allowed if you have written permission from the original author (or all authors if there were multiple persons involved), even if the website itself states that all models are free to use. You need to send us a screenshot of this permission before uploading or showing pictures.","title":"Usage of 3rd party content"},{"location":"rules/rules-stolen-content/#usage-of-content-from-banned-members","text":"Generally it is allowed to use or post screenshots of content made by members who are now banned from the forum. There is one exception: If a member is known for many violations of stolen content rules (especially if he/she was banned for this), content of this user may not be shown, modified, reuploaded etc. We will not provide a list on that as we don't want to create a \"wall of shame\", so please inform yourself which content might be affected by this rule. If you are unsure, don't post.","title":"Usage of content from banned members"},{"location":"rules/rules-stolen-content/#consequences","text":"If you are caught stealing copyrighted materials you will be punished accordingly. It may lead to you being banned from uploading content to the repository, or banned completely from the RoR website. Copyright violations are considered serious rule breaches and are not to be taken lightly.","title":"Consequences"},{"location":"rules/rules-unwritten/","text":"Unwritten \u00b6 This page exists as a clarification for the following rule: Terms of Service#UNWRITTEN Not All-Inclusive \u00b6 This rules list does not try to list every single bad behaviour, as many behaviours are common sense. It will generally list common guidelines that are often disregarded. Cleverness \u00b6 Please do not try to cleverly circumvent some rule listed here. These rules are general guidelines and are very flexible. Rules Lawyering \u00b6 The rules exist to make the forum a better place. Sometimes there will be exceptions. Also, the rules list is kept a short as possible on purpose. You may see some apparent loophole, but the spirit of the rules is enforced - so you will find yourself in trouble if you try to exploit some loophole. Mods and Admins \u00b6 If a moderator or admin tells you to do something, do it. If you have a problem with it, you may start a thread on the forum support board or send the staff member a PM.","title":"UNWRITTEN"},{"location":"rules/rules-unwritten/#unwritten","text":"This page exists as a clarification for the following rule: Terms of Service#UNWRITTEN","title":"Unwritten"},{"location":"rules/rules-unwritten/#not-all-inclusive","text":"This rules list does not try to list every single bad behaviour, as many behaviours are common sense. It will generally list common guidelines that are often disregarded.","title":"Not All-Inclusive"},{"location":"rules/rules-unwritten/#cleverness","text":"Please do not try to cleverly circumvent some rule listed here. These rules are general guidelines and are very flexible.","title":"Cleverness"},{"location":"rules/rules-unwritten/#rules-lawyering","text":"The rules exist to make the forum a better place. Sometimes there will be exceptions. Also, the rules list is kept a short as possible on purpose. You may see some apparent loophole, but the spirit of the rules is enforced - so you will find yourself in trouble if you try to exploit some loophole.","title":"Rules Lawyering"},{"location":"rules/rules-unwritten/#mods-and-admins","text":"If a moderator or admin tells you to do something, do it. If you have a problem with it, you may start a thread on the forum support board or send the staff member a PM.","title":"Mods and Admins"},{"location":"rules/rules-useless/","text":"Useless \u00b6 This page exists as a clarification for the following rule: Terms of Service#USELESS Bumping of threads \u00b6 This is disallowed when the target is only to get the thread up to the top of the list again without any meaningful content in the bumper. If that happens, those bumpers may be deleted instantly. Do not reply to bumped threads, instead report the bumping post and wait for a moderator to take action. Also make sure to not reply to old WIP threads to ask for progress or download links. If the author had made further progress, he/she would have posted it on his own. If you want to reply to an old thread first think about if the reply is really necessary. If a discussion has ended 6 months ago don't bring it up again even if you think that you have great arguments. Manually added signatures \u00b6 Do not manually sign your posts. That's what the \"signature\" area is for. You can find it in your profile settings. What are manually added signatures? \u00b6 Anything you type at the end of all (or nearly all) of your posts. Most simply and typically, it would be your name or username. Why is this not allowed? \u00b6 Because that's exactly what the signature box is for. Manually adding a signature might allow you to get around or otherwise not follow the signature guidelines. Quoting \u00b6 It's GREAT to quote parts of a message you're replying to so everyone can understand the conversation. However, excessive quoting is worse than no quoting. For large posts, do not quote the entire post. Do not quote images or videos. Only quote what's needed. Delete the parts of the quote that aren't needed.","title":"USELESS"},{"location":"rules/rules-useless/#useless","text":"This page exists as a clarification for the following rule: Terms of Service#USELESS","title":"Useless"},{"location":"rules/rules-useless/#bumping-of-threads","text":"This is disallowed when the target is only to get the thread up to the top of the list again without any meaningful content in the bumper. If that happens, those bumpers may be deleted instantly. Do not reply to bumped threads, instead report the bumping post and wait for a moderator to take action. Also make sure to not reply to old WIP threads to ask for progress or download links. If the author had made further progress, he/she would have posted it on his own. If you want to reply to an old thread first think about if the reply is really necessary. If a discussion has ended 6 months ago don't bring it up again even if you think that you have great arguments.","title":"Bumping of threads"},{"location":"rules/rules-useless/#manually-added-signatures","text":"Do not manually sign your posts. That's what the \"signature\" area is for. You can find it in your profile settings.","title":"Manually added signatures"},{"location":"rules/rules-useless/#what-are-manually-added-signatures","text":"Anything you type at the end of all (or nearly all) of your posts. Most simply and typically, it would be your name or username.","title":"What are manually added signatures?"},{"location":"rules/rules-useless/#why-is-this-not-allowed","text":"Because that's exactly what the signature box is for. Manually adding a signature might allow you to get around or otherwise not follow the signature guidelines.","title":"Why is this not allowed?"},{"location":"rules/rules-useless/#quoting","text":"It's GREAT to quote parts of a message you're replying to so everyone can understand the conversation. However, excessive quoting is worse than no quoting. For large posts, do not quote the entire post. Do not quote images or videos. Only quote what's needed. Delete the parts of the quote that aren't needed.","title":"Quoting"},{"location":"rules/terms-of-service/","text":"Terms of Service \u00b6 You can click on each header to find more information on each rule. INFRACTIONS \u00b6 If you disregard any of the following rules, you will get a warning or infraction. AGE REQUIREMENT \u00b6 To use any of our online services, the minimum age requirement is 13 years of age. If you are below the age of 13, you are not allowed to use any of our web services (Reason: COPPA ) UNWRITTEN \u00b6 This list of rules is not all-inclusive. Just because something's not here doesn't mean it's not wrong. Do not be a rules lawyer. STOLEN CONTENT \u00b6 Do not steal content from other people and claim it as yours. Do not use content from Sketchup Warehouse or other games. Do not use copyrighted content without written permission of the original authors. Do not show pictures or videos of stolen content. A good rule of thumb: Any content you find that isn't on our official forum/archives is more than likely stolen in most cases. INSULTING \u00b6 Don't insult other members. Do not tell members to kill themselves or things in that category, there will be hard consequences. NICE \u00b6 Don't be an idiot. Moderators are given a little leeway when dealing with rules breakers, especially repeat offenders. Do NOT backtalk moderators or administrators. EVER. BACKSEAT \u00b6 Do not backseat moderate. If you see something wrong, chances are a moderator will get to it soon. If it's a minor problem, ignore it. If it's a major problem, use the Report button below a post. Do not start or contribute to a flamewar. BEGGING \u00b6 Do not beg, whine, or pester. Don't ask for or when anything will be released. Don't ask for updates. Don't ask for betas. USELESS \u00b6 Do not bump topics. Do not use memes. Don't reply just to reply - write something useful. SEARCH \u00b6 Search before asking questions, especially questions about mod links. Most of the time you can just Google the name of the mod and it'll be on the first result. GRAMMAR \u00b6 Don't use Discord/IRC/chat speak. Use proper spelling, punctuation, and grammar. Don't TYPE IN ALL CAPS! Don't spam with emoticons. SINGULARITY \u00b6 One account per person. One person per account. One topic per subject. One post per problem. Any particular thing should appear just once - don't waste resources. PROFANITY \u00b6 No profanity. Do not try to get around the censored words filter by selectively misspelling a word (e.g. replacing letter 's' with dollar signs) LINKS \u00b6 No external links for anything bad (viruses, porn, warez) or anything requiring money (donation sites, software, services). PRIVACY \u00b6 Do not post your email. Do not post public details such as your address or real name unless you are considered an adult in the country you reside. LANGUAGE \u00b6 Use the language of the board - this is English. You may use multiple languages that all say the same thing as long as one of them is the board's language. EMBEDDING IMAGES \u00b6 The preferred method for adding images to posts is to click the button below the typing area of a post, and attaching images there. Pictures are automatically uploaded when you submit your post. You may edit pictures later if needed. In huge screenshot threads ( Random Screens , Development Screens ) it is obligatory to use the internal attachment system of the forum to improve performance. Please do not use services like imageshack to show images as the images are getting deleted over there after a certain time! Please note this does not apply to signatures. RULES CHANGES \u00b6 The written guidelines will change with time. Things will be added and updated. But it is not to be expected that all bad behaviours will appear here. You are expected to try your best not to break any guidelines, and to be a positive contributor, rather than a problem contributor.","title":"Terms of Service"},{"location":"rules/terms-of-service/#terms-of-service","text":"You can click on each header to find more information on each rule.","title":"Terms of Service"},{"location":"rules/terms-of-service/#infractions","text":"If you disregard any of the following rules, you will get a warning or infraction.","title":"INFRACTIONS"},{"location":"rules/terms-of-service/#age-requirement","text":"To use any of our online services, the minimum age requirement is 13 years of age. If you are below the age of 13, you are not allowed to use any of our web services (Reason: COPPA )","title":"AGE REQUIREMENT"},{"location":"rules/terms-of-service/#unwritten","text":"This list of rules is not all-inclusive. Just because something's not here doesn't mean it's not wrong. Do not be a rules lawyer.","title":"UNWRITTEN"},{"location":"rules/terms-of-service/#stolen-content","text":"Do not steal content from other people and claim it as yours. Do not use content from Sketchup Warehouse or other games. Do not use copyrighted content without written permission of the original authors. Do not show pictures or videos of stolen content. A good rule of thumb: Any content you find that isn't on our official forum/archives is more than likely stolen in most cases.","title":"STOLEN CONTENT"},{"location":"rules/terms-of-service/#insulting","text":"Don't insult other members. Do not tell members to kill themselves or things in that category, there will be hard consequences.","title":"INSULTING"},{"location":"rules/terms-of-service/#nice","text":"Don't be an idiot. Moderators are given a little leeway when dealing with rules breakers, especially repeat offenders. Do NOT backtalk moderators or administrators. EVER.","title":"NICE"},{"location":"rules/terms-of-service/#backseat","text":"Do not backseat moderate. If you see something wrong, chances are a moderator will get to it soon. If it's a minor problem, ignore it. If it's a major problem, use the Report button below a post. Do not start or contribute to a flamewar.","title":"BACKSEAT"},{"location":"rules/terms-of-service/#begging","text":"Do not beg, whine, or pester. Don't ask for or when anything will be released. Don't ask for updates. Don't ask for betas.","title":"BEGGING"},{"location":"rules/terms-of-service/#useless","text":"Do not bump topics. Do not use memes. Don't reply just to reply - write something useful.","title":"USELESS"},{"location":"rules/terms-of-service/#search","text":"Search before asking questions, especially questions about mod links. Most of the time you can just Google the name of the mod and it'll be on the first result.","title":"SEARCH"},{"location":"rules/terms-of-service/#grammar","text":"Don't use Discord/IRC/chat speak. Use proper spelling, punctuation, and grammar. Don't TYPE IN ALL CAPS! Don't spam with emoticons.","title":"GRAMMAR"},{"location":"rules/terms-of-service/#singularity","text":"One account per person. One person per account. One topic per subject. One post per problem. Any particular thing should appear just once - don't waste resources.","title":"SINGULARITY"},{"location":"rules/terms-of-service/#profanity","text":"No profanity. Do not try to get around the censored words filter by selectively misspelling a word (e.g. replacing letter 's' with dollar signs)","title":"PROFANITY"},{"location":"rules/terms-of-service/#links","text":"No external links for anything bad (viruses, porn, warez) or anything requiring money (donation sites, software, services).","title":"LINKS"},{"location":"rules/terms-of-service/#privacy","text":"Do not post your email. Do not post public details such as your address or real name unless you are considered an adult in the country you reside.","title":"PRIVACY"},{"location":"rules/terms-of-service/#language","text":"Use the language of the board - this is English. You may use multiple languages that all say the same thing as long as one of them is the board's language.","title":"LANGUAGE"},{"location":"rules/terms-of-service/#embedding-images","text":"The preferred method for adding images to posts is to click the button below the typing area of a post, and attaching images there. Pictures are automatically uploaded when you submit your post. You may edit pictures later if needed. In huge screenshot threads ( Random Screens , Development Screens ) it is obligatory to use the internal attachment system of the forum to improve performance. Please do not use services like imageshack to show images as the images are getting deleted over there after a certain time! Please note this does not apply to signatures.","title":"EMBEDDING IMAGES"},{"location":"rules/terms-of-service/#rules-changes","text":"The written guidelines will change with time. Things will be added and updated. But it is not to be expected that all bad behaviours will appear here. You are expected to try your best not to break any guidelines, and to be a positive contributor, rather than a problem contributor.","title":"RULES CHANGES"},{"location":"terrain-creation/building-rail-tracks/","text":"Building rail tracks \u00b6 Basic Principle \u00b6 The tracks are simple meshes that are placed on the map. They have a collision mesh on which all rail vehicles drive. The track gauge is approximately 1435mm, which is the most common in the world. In reality train wheels have flanges. In RoR wheels can\u0092t have such a geometry, so we use nodes with low friction to keep everything on the rail (we call them guidance nodes). Propulsed rail vehicles use standard wheels spanning the two rails. The result is a quite long wheel what may be odd on the first sight, but if you think about it real train wheels are basically the same. This also helps to keep the nodecount down. The wagons use low friction nodes instead of wheels. Main reason is the nodecount, e.g. on a 4 axle wagon we can save approx. 120 nodes by doing this, what will give you a much better framerate. Basic node and beam principles \u00b6 To make your rail vehicle working well, you need to obtain certain principles. First of all your bogie geometry needs to be exactly as shown in the picture If you make a wagon without wheels, the low friction nodes running on the rail need to be exactly where the wheel in the picture would touch the rail. Your guidance nodes (those running on the inner side of the rail) need to be contacters. Give them a mass of 50 kilos. Give them low friction using set_node_defaults . If you don't use a wheel, the nodes sliding on top of the rail also need low friction. Node 0 needs to be exactly in the middle of your vehicle and 0.5 meters below the rail. Otherwise it won't spawn correctly in the train spawner. Don't forget to flag it with \"c\": don't detect ground contact. Make your wheels very hard using the spring and damping options. Make the bogie node and beam very stiff using set_beam_defaults . Building a railway line \u00b6 When you want to create your track layout in a 3d modeling program (Blender, 3ds Max), you need to make sure the coordinates in the 3d modeling program are the same as in RoR. Open the terrain *.zip and search for a *.cfg file. Read out the size of the terrain, switch to your 3d modeling program and create a plane with the same size in the correct position: This will be our placement help. TODO: Fix link [ http://www.rigsofrods.com/attachment.php?attachmentid=306258&d=1333744539 Now load the tracks from the blender file] and start assembling them to a nice railway track. When finished, you need to attach all track pieces together, but DO NOT ATTACH THE SWITCHES! We only placed them to read out the coordinates and we will place them on the map using the terrn file. For that purpose, open the terrn file, click each switch in blender/3ds and copy the coordinates (including rotational values) over to the terrn file. Then do to place the node and beam. Annoying, I know ;-) When done, it's time to export the track layout. It should look like with gaps for the switches. Move the pivot point of the track to (0, 0, 0) and export the mesh. Now you just need to place it on (0, 0, 0) in the terrn file and probably get the angles right. Everything should be ingame then. Making track by extracting spline from heightmap \u00b6 If you choose to place your track using a 3d modeling program, you can also generate track from a spline Introduction \u00b6 This tutorial is made in 3ds Max, but should also be valid for Blender. It will show you how to extract a Spline from a heightmap and use it for placing roads or railway lines. Step 1 \u00b6 Convert heightmap raw to bmp with ImageMagick Step 2 \u00b6 Create a plane in 3ds Max, apply a 3d displacement modifier, load your converted heightmap and assign the height found in the maps *.cfg there. Subdivide your plane to the accuracy you want Step 3 \u00b6 Create a spine representing the longitudinal track layout Step 4 \u00b6 Convert the heightmap to a poly object Step 5 \u00b6 Extrude the spline to make it solid Step 6 \u00b6 Choose the spline solid, add a ProBoolean modifier, check substract, choose the heightmap solid Step 7 \u00b6 Choose the outermost edge of the resulting body, right click, choose create contour ->now you have your spline following the heightmap Step 8 \u00b6 Use the Lofting tool to create a road or train track. Correct your spline, twist the loft for banked curves, texture etc. You can also use the normalize spline modifier for better accuracy or smoothness. See also \u00b6 If you have a question on the system, please post to TODO: fix old forum link [ http://www.rigsofrods.com/threads/88801-The-railroad-system-technical-discussion-and-mapbuilders-guideline ]","title":"Building rail tracks"},{"location":"terrain-creation/building-rail-tracks/#building-rail-tracks","text":"","title":"Building rail tracks"},{"location":"terrain-creation/building-rail-tracks/#basic-principle","text":"The tracks are simple meshes that are placed on the map. They have a collision mesh on which all rail vehicles drive. The track gauge is approximately 1435mm, which is the most common in the world. In reality train wheels have flanges. In RoR wheels can\u0092t have such a geometry, so we use nodes with low friction to keep everything on the rail (we call them guidance nodes). Propulsed rail vehicles use standard wheels spanning the two rails. The result is a quite long wheel what may be odd on the first sight, but if you think about it real train wheels are basically the same. This also helps to keep the nodecount down. The wagons use low friction nodes instead of wheels. Main reason is the nodecount, e.g. on a 4 axle wagon we can save approx. 120 nodes by doing this, what will give you a much better framerate.","title":"Basic Principle"},{"location":"terrain-creation/building-rail-tracks/#basic-node-and-beam-principles","text":"To make your rail vehicle working well, you need to obtain certain principles. First of all your bogie geometry needs to be exactly as shown in the picture If you make a wagon without wheels, the low friction nodes running on the rail need to be exactly where the wheel in the picture would touch the rail. Your guidance nodes (those running on the inner side of the rail) need to be contacters. Give them a mass of 50 kilos. Give them low friction using set_node_defaults . If you don't use a wheel, the nodes sliding on top of the rail also need low friction. Node 0 needs to be exactly in the middle of your vehicle and 0.5 meters below the rail. Otherwise it won't spawn correctly in the train spawner. Don't forget to flag it with \"c\": don't detect ground contact. Make your wheels very hard using the spring and damping options. Make the bogie node and beam very stiff using set_beam_defaults .","title":"Basic node and beam principles"},{"location":"terrain-creation/building-rail-tracks/#building-a-railway-line","text":"When you want to create your track layout in a 3d modeling program (Blender, 3ds Max), you need to make sure the coordinates in the 3d modeling program are the same as in RoR. Open the terrain *.zip and search for a *.cfg file. Read out the size of the terrain, switch to your 3d modeling program and create a plane with the same size in the correct position: This will be our placement help. TODO: Fix link [ http://www.rigsofrods.com/attachment.php?attachmentid=306258&d=1333744539 Now load the tracks from the blender file] and start assembling them to a nice railway track. When finished, you need to attach all track pieces together, but DO NOT ATTACH THE SWITCHES! We only placed them to read out the coordinates and we will place them on the map using the terrn file. For that purpose, open the terrn file, click each switch in blender/3ds and copy the coordinates (including rotational values) over to the terrn file. Then do to place the node and beam. Annoying, I know ;-) When done, it's time to export the track layout. It should look like with gaps for the switches. Move the pivot point of the track to (0, 0, 0) and export the mesh. Now you just need to place it on (0, 0, 0) in the terrn file and probably get the angles right. Everything should be ingame then.","title":"Building a railway line"},{"location":"terrain-creation/building-rail-tracks/#making-track-by-extracting-spline-from-heightmap","text":"If you choose to place your track using a 3d modeling program, you can also generate track from a spline","title":"Making track by extracting spline from heightmap"},{"location":"terrain-creation/building-rail-tracks/#introduction","text":"This tutorial is made in 3ds Max, but should also be valid for Blender. It will show you how to extract a Spline from a heightmap and use it for placing roads or railway lines.","title":"Introduction"},{"location":"terrain-creation/building-rail-tracks/#step-1","text":"Convert heightmap raw to bmp with ImageMagick","title":"Step 1"},{"location":"terrain-creation/building-rail-tracks/#step-2","text":"Create a plane in 3ds Max, apply a 3d displacement modifier, load your converted heightmap and assign the height found in the maps *.cfg there. Subdivide your plane to the accuracy you want","title":"Step 2"},{"location":"terrain-creation/building-rail-tracks/#step-3","text":"Create a spine representing the longitudinal track layout","title":"Step 3"},{"location":"terrain-creation/building-rail-tracks/#step-4","text":"Convert the heightmap to a poly object","title":"Step 4"},{"location":"terrain-creation/building-rail-tracks/#step-5","text":"Extrude the spline to make it solid","title":"Step 5"},{"location":"terrain-creation/building-rail-tracks/#step-6","text":"Choose the spline solid, add a ProBoolean modifier, check substract, choose the heightmap solid","title":"Step 6"},{"location":"terrain-creation/building-rail-tracks/#step-7","text":"Choose the outermost edge of the resulting body, right click, choose create contour ->now you have your spline following the heightmap","title":"Step 7"},{"location":"terrain-creation/building-rail-tracks/#step-8","text":"Use the Lofting tool to create a road or train track. Correct your spline, twist the loft for banked curves, texture etc. You can also use the normalize spline modifier for better accuracy or smoothness.","title":"Step 8"},{"location":"terrain-creation/building-rail-tracks/#see-also","text":"If you have a question on the system, please post to TODO: fix old forum link [ http://www.rigsofrods.com/threads/88801-The-railroad-system-technical-discussion-and-mapbuilders-guideline ]","title":"See also"},{"location":"terrain-creation/collision-meshes/","text":"Collision meshes \u00b6 A collision mesh is a \"substitute\" or \"replacement\" mesh for a given model. Except, this mesh does not replace the original model, it is transparent and simplifies your model. It does not simplify how it looks, but how it behaves as an object in Rigs of Rods. For example, if you want to model a log cabin with a detailed roof, drainpipes, and window frames, then the framerate/physic lag in Rigs of Rods would be a single digit. However, a collision mesh will make it behave like it is the most simple model out there. Now that you (hopefully) comprehend this concept, let's begin the tutorial. How to make a collision mesh \u00b6 Getting the Resources \u00b6 In order to success in this tutorial/guide, you must have a modeling program with an OGRE exporter. SketchUp will be used as an example. Modeling the complex object \u00b6 If you have a profession in SketchUp, you may know how to make some pretty nice stuff. For example, here is a complex house I made. ... and here it is in-game As you may see, I get ~25 frames-per-second, while I normally get ~100 around a simpler object. A collision mesh will polish up the framerate and physic lag. Modeling the collision mesh \u00b6 You want to make the collision mesh be exactly around the model, or else it will be out of place. My best suggestion is to model over it, but snapping your model to the original model. So, here is my model: ... and here is the collision mesh I modeled. As you may see, I left out the window detail, door detail, roof detail, the stairs, the fence, and the chimney. I did this because the car won't be interacting much with those aspects of the house in the first place, so why waste the framerate on them? Once you are done modeling it, make sure it is right around your model. The exporting process \u00b6 Once it is put next to the model (make sure they are separate groups), select only ONE of them, and click the following... Then name your object however you like. I will name it \"House\". The reason why you want it separate is because one will be the house [appearance] and one will be the collision mesh [physical structure]. Then click \"OK\" and a series of windows come up. Then, separately select the collision mesh, and repeat the process. For the name, add \"Collision\" or \"-Collision\" at the end so it is easier to identify. It can even be as simple as as adding a \"1\" or \"C\" to the end. I will use the \"-Collision\" extension for the example. Then the series of windows pop up. You are done exporting! Editing in notepad \u00b6 As a standard procedure for SketchUp, go to the following directory: Then, go to the .MATERIAL file. Open it, and remove the section \"Material SketchUp Default\" or something along those lines. Then, go to the .ODEF file. Then, target the mesh line. Then, replace it with the collision name of your mesh. Using the files \u00b6 For objects, the necessary files are the .ODEF, the .MESH, the .MATERIAL, and any textures left behind. For the collision mesh, all you need is the .MESH of the collision mesh. Because it does not need a .MATERIAL file because it's invisible, and it does not need an .ODEF because it uses the .ODEF of the original house. Then, add those to the index of the .ZIP of the terrain you will be adding the object to. Once I placed the object, look how much better my framerate is compared to the one in Step II. Collision Mesh Troubleshooting \u00b6 So you just made an absolutely amazing [insert amazing, knock-your-socks-off object for RoR here] If you're like me, the reason you've been procrastinating so much on exporting is because you don't want to deal with the complicated and irritating task of getting collision meshes to work. They never seem to work the first time, and you can't identify the problem, resulting in gray hairs, chronic anxiety, and eventual cardiac failure if the problem persists. This guide will give you some helpful hints as to fixing the problems. Please note: By \"failures\" I mean the truck falls through the mesh and gets stuck. FPS drop \u00b6 PROBLEM: Bounding box causes huge fps drop. SOLUTION: Make a simpler collision mesh. Random Collisions \u00b6 PROBLEM: Seemingly random collisions into random invisible objects around the object in question/no collision with object or collision several meters below surface of object. SOLUTION: Your collision mesh is either centred wrong or badly scaled. Or both. If you're modelling in Blender, hit CTRL+A in object mode to apply scale and rotation to your object before exporting so that it exports at the size that you actually see. Try to get the centres of your collision mesh and object as close together as possible. If you're using SketchUp...then figure it out yourself; I can't help you. Get a real 3D modelling program. Or add helpful info here, remember that this is a Wiki. Location-based collision failures \u00b6 PROBLEM: Failures of collision mesh based on location of object. SOLUTION: The collision mesh of the object is intersecting with that of another. Move the object. You could also fix the collision mesh so that it doesn't intersect. General collision failures \u00b6 PROBLEM: Failures of collision mesh in general SOLUTION: There are one or more faces intersecting in your mesh. Rigs of Rods doesn't like bounding faces intersecting with each other. Make it one continuous surface rather than a collection of boxes. Or, at least, make the collision mesh like this. Vehicles getting \"sucked in\" to a collision mesh \u00b6 PROBLEM: You're driving along, testing your new mesh... then instead of crashing into it, you get sucked in. And now you can't get out. SOLUTION: Your collision mesh's normals are flipped the wrong way. Flip them the right way out and you ought to be fine.","title":"Collision meshes"},{"location":"terrain-creation/collision-meshes/#collision-meshes","text":"A collision mesh is a \"substitute\" or \"replacement\" mesh for a given model. Except, this mesh does not replace the original model, it is transparent and simplifies your model. It does not simplify how it looks, but how it behaves as an object in Rigs of Rods. For example, if you want to model a log cabin with a detailed roof, drainpipes, and window frames, then the framerate/physic lag in Rigs of Rods would be a single digit. However, a collision mesh will make it behave like it is the most simple model out there. Now that you (hopefully) comprehend this concept, let's begin the tutorial.","title":"Collision meshes"},{"location":"terrain-creation/collision-meshes/#how-to-make-a-collision-mesh","text":"","title":"How to make a collision mesh"},{"location":"terrain-creation/collision-meshes/#getting-the-resources","text":"In order to success in this tutorial/guide, you must have a modeling program with an OGRE exporter. SketchUp will be used as an example.","title":"Getting the Resources"},{"location":"terrain-creation/collision-meshes/#modeling-the-complex-object","text":"If you have a profession in SketchUp, you may know how to make some pretty nice stuff. For example, here is a complex house I made. ... and here it is in-game As you may see, I get ~25 frames-per-second, while I normally get ~100 around a simpler object. A collision mesh will polish up the framerate and physic lag.","title":"Modeling the complex object"},{"location":"terrain-creation/collision-meshes/#modeling-the-collision-mesh","text":"You want to make the collision mesh be exactly around the model, or else it will be out of place. My best suggestion is to model over it, but snapping your model to the original model. So, here is my model: ... and here is the collision mesh I modeled. As you may see, I left out the window detail, door detail, roof detail, the stairs, the fence, and the chimney. I did this because the car won't be interacting much with those aspects of the house in the first place, so why waste the framerate on them? Once you are done modeling it, make sure it is right around your model.","title":"Modeling the collision mesh"},{"location":"terrain-creation/collision-meshes/#the-exporting-process","text":"Once it is put next to the model (make sure they are separate groups), select only ONE of them, and click the following... Then name your object however you like. I will name it \"House\". The reason why you want it separate is because one will be the house [appearance] and one will be the collision mesh [physical structure]. Then click \"OK\" and a series of windows come up. Then, separately select the collision mesh, and repeat the process. For the name, add \"Collision\" or \"-Collision\" at the end so it is easier to identify. It can even be as simple as as adding a \"1\" or \"C\" to the end. I will use the \"-Collision\" extension for the example. Then the series of windows pop up. You are done exporting!","title":"The exporting process"},{"location":"terrain-creation/collision-meshes/#editing-in-notepad","text":"As a standard procedure for SketchUp, go to the following directory: Then, go to the .MATERIAL file. Open it, and remove the section \"Material SketchUp Default\" or something along those lines. Then, go to the .ODEF file. Then, target the mesh line. Then, replace it with the collision name of your mesh.","title":"Editing in notepad"},{"location":"terrain-creation/collision-meshes/#using-the-files","text":"For objects, the necessary files are the .ODEF, the .MESH, the .MATERIAL, and any textures left behind. For the collision mesh, all you need is the .MESH of the collision mesh. Because it does not need a .MATERIAL file because it's invisible, and it does not need an .ODEF because it uses the .ODEF of the original house. Then, add those to the index of the .ZIP of the terrain you will be adding the object to. Once I placed the object, look how much better my framerate is compared to the one in Step II.","title":"Using the files"},{"location":"terrain-creation/collision-meshes/#collision-mesh-troubleshooting","text":"So you just made an absolutely amazing [insert amazing, knock-your-socks-off object for RoR here] If you're like me, the reason you've been procrastinating so much on exporting is because you don't want to deal with the complicated and irritating task of getting collision meshes to work. They never seem to work the first time, and you can't identify the problem, resulting in gray hairs, chronic anxiety, and eventual cardiac failure if the problem persists. This guide will give you some helpful hints as to fixing the problems. Please note: By \"failures\" I mean the truck falls through the mesh and gets stuck.","title":"Collision Mesh Troubleshooting"},{"location":"terrain-creation/collision-meshes/#fps-drop","text":"PROBLEM: Bounding box causes huge fps drop. SOLUTION: Make a simpler collision mesh.","title":"FPS drop"},{"location":"terrain-creation/collision-meshes/#random-collisions","text":"PROBLEM: Seemingly random collisions into random invisible objects around the object in question/no collision with object or collision several meters below surface of object. SOLUTION: Your collision mesh is either centred wrong or badly scaled. Or both. If you're modelling in Blender, hit CTRL+A in object mode to apply scale and rotation to your object before exporting so that it exports at the size that you actually see. Try to get the centres of your collision mesh and object as close together as possible. If you're using SketchUp...then figure it out yourself; I can't help you. Get a real 3D modelling program. Or add helpful info here, remember that this is a Wiki.","title":"Random Collisions"},{"location":"terrain-creation/collision-meshes/#location-based-collision-failures","text":"PROBLEM: Failures of collision mesh based on location of object. SOLUTION: The collision mesh of the object is intersecting with that of another. Move the object. You could also fix the collision mesh so that it doesn't intersect.","title":"Location-based collision failures"},{"location":"terrain-creation/collision-meshes/#general-collision-failures","text":"PROBLEM: Failures of collision mesh in general SOLUTION: There are one or more faces intersecting in your mesh. Rigs of Rods doesn't like bounding faces intersecting with each other. Make it one continuous surface rather than a collection of boxes. Or, at least, make the collision mesh like this.","title":"General collision failures"},{"location":"terrain-creation/collision-meshes/#vehicles-getting-sucked-in-to-a-collision-mesh","text":"PROBLEM: You're driving along, testing your new mesh... then instead of crashing into it, you get sucked in. And now you can't get out. SOLUTION: Your collision mesh's normals are flipped the wrong way. Flip them the right way out and you ought to be fine.","title":"Vehicles getting \"sucked in\" to a collision mesh"},{"location":"terrain-creation/custom-texture-splatting/","text":"Custom texture splatting \u00b6 Introduction \u00b6 So, you want to make nice looking map with detailed textures? Here is the place ;-) Alpha-splatting is a technique that allows you to place detailed tiled textures on your terrain. Their implementation follows RGBA (Red-Green-Blue-Alpha) images. With the files that are suggested here you can also apply an overlay map which means that you can vary the color of each of your detailed textures by blending a big image over them (the textured you used before alpha-splatting for example). Note: this article doesn't refer to our terrain system . Techniques here are relevant for old Terrn subsystem or advanced users who want to create meshed terrains. Our terrain system currently doesn't allow making your own shaders, you need to use it's builtins. 2 shaders are discussed here. Choose one of them: Shader 1 \u00b6 PROS Have an overlay texture Blend the textures nicely over each other CONS Need for a shader file (*.cg) and a program file (*.program) Limited to 8 textures Sizes of the tiles are all the same The overlay texture always darken the terrain and lowers the contrast of the detailed textures Shader 2 \u00b6 PROS Only consists of a material file (simpler) Unlimited (or supposed so) number of detailed textures Tile size can be set for each texture individually The contrast and luminosity of your textures remain unaltered CONS No overlay texture (if you want one) Slightly harsher transition between textures Shader 1 \u00b6 Before starting make sure you have the shader, program and material file from the following link: http://www.ogre3d.org/tikiwiki/Terrain+Alpha+Splatting . Let's keep the things simple. We'll begin with only 3 detailed textures. 1. Make a RGB image defining your zones (eg: red for grass, green for sand, blue for rocks). Do it just as you did for the groundmodel. If you used RGB colors for your ground-model you can re-use this file. !! DO NOT USE DDS TEXTURES FOR THOSE RGBA IMAGES !! They compress the image and give some pixels the average colors of their neighbors. Then those pixels that are not exactly red, green or blue will look black on your terrain in RoR, ruining your work... 2. Prepare your detailed textures and save them as dds - Paint.net is free and embeds the DDS exporter. Keep the resolution not too high (512*512 is a good compromise today in 2010) otherwise your map will lag a lot. 3. Locate this line in the material file: param_named pageSize float 1024 This parameter (1024) should correspond to your heightmap (the *raw) size - 1 (i.e. your heightmap is 513*513 then this parameter should be 512*512). 4. Locate this code in the material file: fragment_program_ref AlphaSplatTerrain/FP { param_named alpha0Mask float4 1 1 1 0 param_named alpha1Mask float4 0 0 0 0 } These settings are OK for our use but it is useful to understand their meaning: each 1 activates an alpha-splatting channel. In this example we will only use the three first channels of our first RGBA image (so we'll use Red, Green and Blue channel. Not alpha because the fourth parameter is set to 0). If you want to use more channels then you have to activate them here. 5. Go to the end of file and locate the following code: material DemoSplatTerrainShader&nbsp;: AlphaSplatTerrain { set_texture_alias AlphaMap1 alphamap1.png set_texture_alias AlphaMap2 black.png set_texture_alias Splat1 gras.jpg set_texture_alias Splat2 moos2.jpg set_texture_alias Splat3 schlamm_getrocknet1.jpg set_texture_alias Splat4 gras.jpg set_texture_alias Splat5 gras.jpg set_texture_alias Splat6 moos2.jpg set_texture_alias Splat7 schlamm_getrocknet1.jpg set_texture_alias Splat8 gras.jpg set_texture_alias Detail Detail3.jpg set_texture_alias Fallback cooltex.jpg } Here you have to reference the images you prepared before. AlphaMap1 is your RGB image. AlphaMap2 isn't used as you didn't activate the corresponding channels. Fill Splat 1,2,3 with the name of your detailed textures. 6. You just have to tune the terrain CFG file by enabling the vertexnormals (that will automatically shade your map) and adding the name of the material to use for alpha-splatting (so replace \"DemoSplatTerrainShader\" by your material name): ## The name of the material you will define to shade the terrain CustomMaterialName=DemoSplatTerrainShader Actually you just have to copy the one of the ogre example. The material name is defined just before referencing the images in the code (see the code above) and that's it! If you don't rename anything then you don't have to alter program and shader (*.cg) files at all. Shader 2 \u00b6 This shader was introduced in RoR first by Fat-Alfie. He kindly sent it to me as I needed an alpha-splat shader without the overlay texture. Pre-requisites \u00b6 Take the code below and make a file containing it named : yourmapname -alphasplat.material (of course replace yourmapname with what you want). Place this file into your map folder. The extension \"-alphasplat\" is not mandatory but why not setting a guideline here? That will make our RoR-life easier. material RoRwiki-alpha { receive_shadows on technique { // base pass pass { lighting off texture_unit { // we use the gravel texture as the base, other textures are blended over it texture gravel.dds scale 0.007 0.007 } } // detail texture 1 pass pass { lighting off // blend with former pass scene_blend alpha_blend // only overwrite fragments with the same depth depth_func equal // alpha map for the grass texture_unit { texture mapname_alpha_1.png // use alpha from this texture alpha_op_ex source1 src_texture src_texture // and colour from last pass colour_op_ex source2 src_texture src_texture } // detail texture texture_unit { texture grass.dds scale 0.007 0.007 // alpha blend colour with colour from last pass colour_op_ex blend_diffuse_alpha src_texture src_current } } // lighting pass pass { ambient 1 1 1 diffuse 1 1 1 depth_func equal scene_blend zero src_colour } } } Let's go \u00b6 You can see in the shader that there 3 passes (base pass, detail texture 1 pass and lightning pass). Each pass correspond to a \"layer\" that Ogre (graphical engine) will add to your terrain. Each one is blended over the previous ones. Giving your material a name \u00b6 First replace \"RoRwiki-alpha\" with your material name (choose one, containing no spaces) Base pass \u00b6 This pass will tile a texture all over the map. All the other textures will be blended over it. You will need a detailed texture Reference your detailed texture (replace \"gravel.dds\" with the name of your detailed texture) Set its scale. Leave it as it is (0.007 0.007), you will judge if that's looks OK once you have this material in-game. Detail texture 1 pass \u00b6 In this pass you will apply your first texture except the base one. You need to provide an \"alpha-map\" to indicate where the texture should show on your terrain (white parts) and where it shouldn't (transparent parts). It is an image that should have the same size as your heightmap - 1 (e.g. heightmap is 513*513, alpha map should be 512*512). The most common format is PNG. Tip: you can derive those maps from your ground models !! DO NOT USE DDS TEXTURES FOR THOSE RGBA IMAGES !! They compress the image and give some pixels the average colors of their neighbors. Then those pixels that are not exactly red, green or blue will look black on your terrain in RoR, ruining your work... You will need an alpha-map You will need a detailed texture Reference your alpha-map (replace \"mapname_alpha_1.png\" with your alpha-map name Reference your detailed texture (replace \"grass.dds\" with your detailed texture name) Set the scale (leave it as it is now, 0.007 0.007) Adding more textures \u00b6 For adding a new texture with its alpha map, simply copy the detail texture 1 pass and paste it before the lightning pass. Repeat the steps described before and add as many as you want! Lightning Pass \u00b6 This defines how your terrain should be shaded. Leave this pass as it is for now. Referencing your material in the terrain CFG file \u00b6 You just have to tune the terrain CFG file by enabling the vertexnormals (that will automatically shade your map) and adding the name of the material to use for alpha-splatting (so replace \"DemoSplatTerrainShader\" by your material name): ## The name of the material you will define to shade the terrain CustomMaterialName=RoRwiki-alpha Done \u00b6 Now include everything in your terrain ZIP file (alpha maps, detailed textures, material file, CFG), fire up RoR and cross your fingers! Last advice \u00b6 And now it only begins! To have a nice looking and very personal ground, spend time making your different textures fit together. Try to split some of the layers too (i.e. generate 2-3 kind of rocks, 2-3 kind of grasses). Use L3DT ( http://www.bundysoft.com/L3DT/ ) to generate those images for you based on the curves and slopes of your terrain and make custom climates for controlling that all. And the most important: look at the real world ;-) -- DeGa (2010)","title":"Alpha splatting"},{"location":"terrain-creation/custom-texture-splatting/#custom-texture-splatting","text":"","title":"Custom texture splatting"},{"location":"terrain-creation/custom-texture-splatting/#introduction","text":"So, you want to make nice looking map with detailed textures? Here is the place ;-) Alpha-splatting is a technique that allows you to place detailed tiled textures on your terrain. Their implementation follows RGBA (Red-Green-Blue-Alpha) images. With the files that are suggested here you can also apply an overlay map which means that you can vary the color of each of your detailed textures by blending a big image over them (the textured you used before alpha-splatting for example). Note: this article doesn't refer to our terrain system . Techniques here are relevant for old Terrn subsystem or advanced users who want to create meshed terrains. Our terrain system currently doesn't allow making your own shaders, you need to use it's builtins. 2 shaders are discussed here. Choose one of them:","title":"Introduction"},{"location":"terrain-creation/custom-texture-splatting/#shader-1","text":"PROS Have an overlay texture Blend the textures nicely over each other CONS Need for a shader file (*.cg) and a program file (*.program) Limited to 8 textures Sizes of the tiles are all the same The overlay texture always darken the terrain and lowers the contrast of the detailed textures","title":"Shader 1"},{"location":"terrain-creation/custom-texture-splatting/#shader-2","text":"PROS Only consists of a material file (simpler) Unlimited (or supposed so) number of detailed textures Tile size can be set for each texture individually The contrast and luminosity of your textures remain unaltered CONS No overlay texture (if you want one) Slightly harsher transition between textures","title":"Shader 2"},{"location":"terrain-creation/custom-texture-splatting/#shader-1_1","text":"Before starting make sure you have the shader, program and material file from the following link: http://www.ogre3d.org/tikiwiki/Terrain+Alpha+Splatting . Let's keep the things simple. We'll begin with only 3 detailed textures. 1. Make a RGB image defining your zones (eg: red for grass, green for sand, blue for rocks). Do it just as you did for the groundmodel. If you used RGB colors for your ground-model you can re-use this file. !! DO NOT USE DDS TEXTURES FOR THOSE RGBA IMAGES !! They compress the image and give some pixels the average colors of their neighbors. Then those pixels that are not exactly red, green or blue will look black on your terrain in RoR, ruining your work... 2. Prepare your detailed textures and save them as dds - Paint.net is free and embeds the DDS exporter. Keep the resolution not too high (512*512 is a good compromise today in 2010) otherwise your map will lag a lot. 3. Locate this line in the material file: param_named pageSize float 1024 This parameter (1024) should correspond to your heightmap (the *raw) size - 1 (i.e. your heightmap is 513*513 then this parameter should be 512*512). 4. Locate this code in the material file: fragment_program_ref AlphaSplatTerrain/FP { param_named alpha0Mask float4 1 1 1 0 param_named alpha1Mask float4 0 0 0 0 } These settings are OK for our use but it is useful to understand their meaning: each 1 activates an alpha-splatting channel. In this example we will only use the three first channels of our first RGBA image (so we'll use Red, Green and Blue channel. Not alpha because the fourth parameter is set to 0). If you want to use more channels then you have to activate them here. 5. Go to the end of file and locate the following code: material DemoSplatTerrainShader&nbsp;: AlphaSplatTerrain { set_texture_alias AlphaMap1 alphamap1.png set_texture_alias AlphaMap2 black.png set_texture_alias Splat1 gras.jpg set_texture_alias Splat2 moos2.jpg set_texture_alias Splat3 schlamm_getrocknet1.jpg set_texture_alias Splat4 gras.jpg set_texture_alias Splat5 gras.jpg set_texture_alias Splat6 moos2.jpg set_texture_alias Splat7 schlamm_getrocknet1.jpg set_texture_alias Splat8 gras.jpg set_texture_alias Detail Detail3.jpg set_texture_alias Fallback cooltex.jpg } Here you have to reference the images you prepared before. AlphaMap1 is your RGB image. AlphaMap2 isn't used as you didn't activate the corresponding channels. Fill Splat 1,2,3 with the name of your detailed textures. 6. You just have to tune the terrain CFG file by enabling the vertexnormals (that will automatically shade your map) and adding the name of the material to use for alpha-splatting (so replace \"DemoSplatTerrainShader\" by your material name): ## The name of the material you will define to shade the terrain CustomMaterialName=DemoSplatTerrainShader Actually you just have to copy the one of the ogre example. The material name is defined just before referencing the images in the code (see the code above) and that's it! If you don't rename anything then you don't have to alter program and shader (*.cg) files at all.","title":"Shader 1"},{"location":"terrain-creation/custom-texture-splatting/#shader-2_1","text":"This shader was introduced in RoR first by Fat-Alfie. He kindly sent it to me as I needed an alpha-splat shader without the overlay texture.","title":"Shader 2"},{"location":"terrain-creation/custom-texture-splatting/#pre-requisites","text":"Take the code below and make a file containing it named : yourmapname -alphasplat.material (of course replace yourmapname with what you want). Place this file into your map folder. The extension \"-alphasplat\" is not mandatory but why not setting a guideline here? That will make our RoR-life easier. material RoRwiki-alpha { receive_shadows on technique { // base pass pass { lighting off texture_unit { // we use the gravel texture as the base, other textures are blended over it texture gravel.dds scale 0.007 0.007 } } // detail texture 1 pass pass { lighting off // blend with former pass scene_blend alpha_blend // only overwrite fragments with the same depth depth_func equal // alpha map for the grass texture_unit { texture mapname_alpha_1.png // use alpha from this texture alpha_op_ex source1 src_texture src_texture // and colour from last pass colour_op_ex source2 src_texture src_texture } // detail texture texture_unit { texture grass.dds scale 0.007 0.007 // alpha blend colour with colour from last pass colour_op_ex blend_diffuse_alpha src_texture src_current } } // lighting pass pass { ambient 1 1 1 diffuse 1 1 1 depth_func equal scene_blend zero src_colour } } }","title":"Pre-requisites"},{"location":"terrain-creation/custom-texture-splatting/#lets-go","text":"You can see in the shader that there 3 passes (base pass, detail texture 1 pass and lightning pass). Each pass correspond to a \"layer\" that Ogre (graphical engine) will add to your terrain. Each one is blended over the previous ones.","title":"Let's go"},{"location":"terrain-creation/custom-texture-splatting/#giving-your-material-a-name","text":"First replace \"RoRwiki-alpha\" with your material name (choose one, containing no spaces)","title":"Giving your material a name"},{"location":"terrain-creation/custom-texture-splatting/#base-pass","text":"This pass will tile a texture all over the map. All the other textures will be blended over it. You will need a detailed texture Reference your detailed texture (replace \"gravel.dds\" with the name of your detailed texture) Set its scale. Leave it as it is (0.007 0.007), you will judge if that's looks OK once you have this material in-game.","title":"Base pass"},{"location":"terrain-creation/custom-texture-splatting/#detail-texture-1-pass","text":"In this pass you will apply your first texture except the base one. You need to provide an \"alpha-map\" to indicate where the texture should show on your terrain (white parts) and where it shouldn't (transparent parts). It is an image that should have the same size as your heightmap - 1 (e.g. heightmap is 513*513, alpha map should be 512*512). The most common format is PNG. Tip: you can derive those maps from your ground models !! DO NOT USE DDS TEXTURES FOR THOSE RGBA IMAGES !! They compress the image and give some pixels the average colors of their neighbors. Then those pixels that are not exactly red, green or blue will look black on your terrain in RoR, ruining your work... You will need an alpha-map You will need a detailed texture Reference your alpha-map (replace \"mapname_alpha_1.png\" with your alpha-map name Reference your detailed texture (replace \"grass.dds\" with your detailed texture name) Set the scale (leave it as it is now, 0.007 0.007)","title":"Detail texture 1 pass"},{"location":"terrain-creation/custom-texture-splatting/#adding-more-textures","text":"For adding a new texture with its alpha map, simply copy the detail texture 1 pass and paste it before the lightning pass. Repeat the steps described before and add as many as you want!","title":"Adding more textures"},{"location":"terrain-creation/custom-texture-splatting/#lightning-pass","text":"This defines how your terrain should be shaded. Leave this pass as it is for now.","title":"Lightning Pass"},{"location":"terrain-creation/custom-texture-splatting/#referencing-your-material-in-the-terrain-cfg-file","text":"You just have to tune the terrain CFG file by enabling the vertexnormals (that will automatically shade your map) and adding the name of the material to use for alpha-splatting (so replace \"DemoSplatTerrainShader\" by your material name): ## The name of the material you will define to shade the terrain CustomMaterialName=RoRwiki-alpha","title":"Referencing your material in the terrain CFG file"},{"location":"terrain-creation/custom-texture-splatting/#done","text":"Now include everything in your terrain ZIP file (alpha maps, detailed textures, material file, CFG), fire up RoR and cross your fingers!","title":"Done"},{"location":"terrain-creation/custom-texture-splatting/#last-advice","text":"And now it only begins! To have a nice looking and very personal ground, spend time making your different textures fit together. Try to split some of the layers too (i.e. generate 2-3 kind of rocks, 2-3 kind of grasses). Use L3DT ( http://www.bundysoft.com/L3DT/ ) to generate those images for you based on the curves and slopes of your terrain and make custom climates for controlling that all. And the most important: look at the real world ;-) -- DeGa (2010)","title":"Last advice"},{"location":"terrain-creation/editing-terrain-objects/","text":"Adding/moving terrain objects \u00b6 Introduction \u00b6 As of Rigs of Rods 0.4.x, terrain objects are stored in .tobj files, they contain placements for all objects/trees/grass/etc on a terrain. This page will show you how to add/move terrain objects. There are multiple ways to do this, however this page will only explain the two easiest methods. Adding a new object \u00b6 For this tutorial, I will be placing a Rig-A-Deal (truckshop) on Baja Track using Rigs of Rods version 0.4.7.0+. Open Rigs of Rods and select the map you want to add an object to. Go to where you want the object to be without being in a vehicle, for example here: Now press the h key. The current position coordinates will be written to the RoR.log (Located in Documents\\My Games\\Rigs of Rods\\logs on Windows or ~/.rigsofrods/logs on Linux. Open the RoR.log file in any text editor and scroll down to the end of the file. You should see a line similar to this: Position: 875.549, 67.6607, 1155.26, 0, 366.073, 0 This is the coordinates for your new object. Now find and open the terrain zip (Example: Bajatrack.zip ) and open the correct .tobj file (Example: Bajatrack.tobj ) It should look similar to this: Now take the numbers from the RoR.log line and add them to the end of the file, like so: //Jump 831.099426, 68.162605, 1071.317383, 0.000000, 97.500000, 3.500000, road 829.796570, 68.773094, 1061.421387, 0.000000, 97.500000, 10.000000, road 828.511108, 70.509575, 1051.657593, 0.000000, 97.500000, 21.500000, road 827.296692, 74.174591, 1042.432983, 0.000000, 97.500000, 42.000000, road 826.326721, 80.865898, 1035.065063, 0.000000, 97.500000, 60.500000, road 825.683960, 89.569458, 1030.182983, 0.000000, 97.500000, 64.500000, road 825.122009, 98.595306, 1025.914673, 0.000000, 97.500000, 0.000000, road 823.816772, 98.595306, 1016.000244, 0.000000, 97.500000, 0.000000, road 822.511536, 98.595306, 1006.085815, 0.000000, 97.500000, 0.000000, road 821.206299, 98.595306, 996.171387, 0.000000, 97.500000, -20.000000, road 819.979736, 95.175102, 986.854858, 0.000000, 97.500000, -20.000000, road 818.753174, 91.754898, 977.538330, 0.000000, 97.500000, -20.000000, road 817.526611, 88.334694, 968.221802, 0.000000, 97.500000, -10.000000, road 816.241150, 86.598213, 958.457947, 0.000000, 97.500000, -2.000000, road 814.936707, 86.249222, 948.549561, 0.000000, 97.500000, -2.000000, road 813.632263, 85.900230, 938.641174, 0.000000, 97.500000, -2.000000, road //new object // x y z rx ry rz odefname (without .odef file extension) 875.549, 67.6607, 1155.26, 0, 0, 0, truckshop I recommend leaving the rotation (last 3) values to 0 for now. Save the file and reopen Rigs of Rods. Your new object should appear roughly where you want it: To precisely place your object, you can use the built-in \"terrain/object editor\" that is included with 0.4.7.0+. I'll explain how to use it below. Moving objects \u00b6 Note: The editor cannot move roads/Paged Geometry trees/grass. First, make sure you're running RoR version 0.4.7.0 or newer. Next, load the terrain you want to edit. While not in a vehicle, press CTRL+Y . A notification box should appear in the top right: You should now be in \"terrain editing mode\". These are the controls for the editor: CTRL+Y - Activates the editor Enter - Selects nearest object based on free camera or RoRBot's position Middle mouse click - Select object CTRL+[ and CTRL+] - Cycles through objects as listed in the `.tobj` file. If the terrain features a race, race checkpoints will appear first. WASD - Movement Arrow keys - Rotation R - Change rotation axis I - Reset object rotation CTRL+Y - Exit editor and save changes In this example I will rotate the truckshop. Move RoRBot near the object and press Enter . The object should now be selected: Use the keys listed above to move/rotate. You may have to switch the rotation axis using the R key to correctly rotate the object. Once you have your object(s) placed where you want it press CTRL+Y again to exit the editor: The changes have been saved to the editor_out.cfg file in the /config folder. Open that file in a text editor. It should look similar to this: And finally, copy the correct placement line to your map's .tobj file. Example: //Jump 831.099426, 68.162605, 1071.317383, 0.000000, 97.500000, 3.500000, road 829.796570, 68.773094, 1061.421387, 0.000000, 97.500000, 10.000000, road 828.511108, 70.509575, 1051.657593, 0.000000, 97.500000, 21.500000, road 827.296692, 74.174591, 1042.432983, 0.000000, 97.500000, 42.000000, road 826.326721, 80.865898, 1035.065063, 0.000000, 97.500000, 60.500000, road 825.683960, 89.569458, 1030.182983, 0.000000, 97.500000, 64.500000, road 825.122009, 98.595306, 1025.914673, 0.000000, 97.500000, 0.000000, road 823.816772, 98.595306, 1016.000244, 0.000000, 97.500000, 0.000000, road 822.511536, 98.595306, 1006.085815, 0.000000, 97.500000, 0.000000, road 821.206299, 98.595306, 996.171387, 0.000000, 97.500000, -20.000000, road 819.979736, 95.175102, 986.854858, 0.000000, 97.500000, -20.000000, road 818.753174, 91.754898, 977.538330, 0.000000, 97.500000, -20.000000, road 817.526611, 88.334694, 968.221802, 0.000000, 97.500000, -10.000000, road 816.241150, 86.598213, 958.457947, 0.000000, 97.500000, -2.000000, road 814.936707, 86.249222, 948.549561, 0.000000, 97.500000, -2.000000, road 813.632263, 85.900230, 938.641174, 0.000000, 97.500000, -2.000000, road //new object // x y z rx ry rz meshname (without .mesh file extension) 875.549, 67.7777, 1155.08, -0.232, 87.462, 0.706, truckshop Open Rigs of Rods again and load your map, the object should be in the same place as when you moved it using the editor. Congratulations! You have learned how to easily add/move objects.","title":"Editing terrain objects"},{"location":"terrain-creation/editing-terrain-objects/#addingmoving-terrain-objects","text":"","title":"Adding/moving terrain objects"},{"location":"terrain-creation/editing-terrain-objects/#introduction","text":"As of Rigs of Rods 0.4.x, terrain objects are stored in .tobj files, they contain placements for all objects/trees/grass/etc on a terrain. This page will show you how to add/move terrain objects. There are multiple ways to do this, however this page will only explain the two easiest methods.","title":"Introduction"},{"location":"terrain-creation/editing-terrain-objects/#adding-a-new-object","text":"For this tutorial, I will be placing a Rig-A-Deal (truckshop) on Baja Track using Rigs of Rods version 0.4.7.0+. Open Rigs of Rods and select the map you want to add an object to. Go to where you want the object to be without being in a vehicle, for example here: Now press the h key. The current position coordinates will be written to the RoR.log (Located in Documents\\My Games\\Rigs of Rods\\logs on Windows or ~/.rigsofrods/logs on Linux. Open the RoR.log file in any text editor and scroll down to the end of the file. You should see a line similar to this: Position: 875.549, 67.6607, 1155.26, 0, 366.073, 0 This is the coordinates for your new object. Now find and open the terrain zip (Example: Bajatrack.zip ) and open the correct .tobj file (Example: Bajatrack.tobj ) It should look similar to this: Now take the numbers from the RoR.log line and add them to the end of the file, like so: //Jump 831.099426, 68.162605, 1071.317383, 0.000000, 97.500000, 3.500000, road 829.796570, 68.773094, 1061.421387, 0.000000, 97.500000, 10.000000, road 828.511108, 70.509575, 1051.657593, 0.000000, 97.500000, 21.500000, road 827.296692, 74.174591, 1042.432983, 0.000000, 97.500000, 42.000000, road 826.326721, 80.865898, 1035.065063, 0.000000, 97.500000, 60.500000, road 825.683960, 89.569458, 1030.182983, 0.000000, 97.500000, 64.500000, road 825.122009, 98.595306, 1025.914673, 0.000000, 97.500000, 0.000000, road 823.816772, 98.595306, 1016.000244, 0.000000, 97.500000, 0.000000, road 822.511536, 98.595306, 1006.085815, 0.000000, 97.500000, 0.000000, road 821.206299, 98.595306, 996.171387, 0.000000, 97.500000, -20.000000, road 819.979736, 95.175102, 986.854858, 0.000000, 97.500000, -20.000000, road 818.753174, 91.754898, 977.538330, 0.000000, 97.500000, -20.000000, road 817.526611, 88.334694, 968.221802, 0.000000, 97.500000, -10.000000, road 816.241150, 86.598213, 958.457947, 0.000000, 97.500000, -2.000000, road 814.936707, 86.249222, 948.549561, 0.000000, 97.500000, -2.000000, road 813.632263, 85.900230, 938.641174, 0.000000, 97.500000, -2.000000, road //new object // x y z rx ry rz odefname (without .odef file extension) 875.549, 67.6607, 1155.26, 0, 0, 0, truckshop I recommend leaving the rotation (last 3) values to 0 for now. Save the file and reopen Rigs of Rods. Your new object should appear roughly where you want it: To precisely place your object, you can use the built-in \"terrain/object editor\" that is included with 0.4.7.0+. I'll explain how to use it below.","title":"Adding a new object"},{"location":"terrain-creation/editing-terrain-objects/#moving-objects","text":"Note: The editor cannot move roads/Paged Geometry trees/grass. First, make sure you're running RoR version 0.4.7.0 or newer. Next, load the terrain you want to edit. While not in a vehicle, press CTRL+Y . A notification box should appear in the top right: You should now be in \"terrain editing mode\". These are the controls for the editor: CTRL+Y - Activates the editor Enter - Selects nearest object based on free camera or RoRBot's position Middle mouse click - Select object CTRL+[ and CTRL+] - Cycles through objects as listed in the `.tobj` file. If the terrain features a race, race checkpoints will appear first. WASD - Movement Arrow keys - Rotation R - Change rotation axis I - Reset object rotation CTRL+Y - Exit editor and save changes In this example I will rotate the truckshop. Move RoRBot near the object and press Enter . The object should now be selected: Use the keys listed above to move/rotate. You may have to switch the rotation axis using the R key to correctly rotate the object. Once you have your object(s) placed where you want it press CTRL+Y again to exit the editor: The changes have been saved to the editor_out.cfg file in the /config folder. Open that file in a text editor. It should look similar to this: And finally, copy the correct placement line to your map's .tobj file. Example: //Jump 831.099426, 68.162605, 1071.317383, 0.000000, 97.500000, 3.500000, road 829.796570, 68.773094, 1061.421387, 0.000000, 97.500000, 10.000000, road 828.511108, 70.509575, 1051.657593, 0.000000, 97.500000, 21.500000, road 827.296692, 74.174591, 1042.432983, 0.000000, 97.500000, 42.000000, road 826.326721, 80.865898, 1035.065063, 0.000000, 97.500000, 60.500000, road 825.683960, 89.569458, 1030.182983, 0.000000, 97.500000, 64.500000, road 825.122009, 98.595306, 1025.914673, 0.000000, 97.500000, 0.000000, road 823.816772, 98.595306, 1016.000244, 0.000000, 97.500000, 0.000000, road 822.511536, 98.595306, 1006.085815, 0.000000, 97.500000, 0.000000, road 821.206299, 98.595306, 996.171387, 0.000000, 97.500000, -20.000000, road 819.979736, 95.175102, 986.854858, 0.000000, 97.500000, -20.000000, road 818.753174, 91.754898, 977.538330, 0.000000, 97.500000, -20.000000, road 817.526611, 88.334694, 968.221802, 0.000000, 97.500000, -10.000000, road 816.241150, 86.598213, 958.457947, 0.000000, 97.500000, -2.000000, road 814.936707, 86.249222, 948.549561, 0.000000, 97.500000, -2.000000, road 813.632263, 85.900230, 938.641174, 0.000000, 97.500000, -2.000000, road //new object // x y z rx ry rz meshname (without .mesh file extension) 875.549, 67.7777, 1155.08, -0.232, 87.462, 0.706, truckshop Open Rigs of Rods again and load your map, the object should be in the same place as when you moved it using the editor. Congratulations! You have learned how to easily add/move objects.","title":"Moving objects"},{"location":"terrain-creation/intro/","text":"Intro to terrain creation \u00b6 Creating a terrain for Rigs of Rods is quite technically involved and largely manual process. This page aims to give you an overview of required work, as well as guides and advice for your own projects. Anatomy of terrain \u00b6 Before you start making your own terrain, you need to know and understand what does a terrain consist of and how it all works together. Ground \u00b6 Obviously the most significant part of the terrain. Ground provides a surface for land vehicles to drive on, airplanes to take off from/land on etc. Ground has shape, physical properties like friction and visual attributes. In RoR, the primary method of defining ground shape is using a heightmap. A heightmap is a grayscale image where black represents lowest areas and white represents highest areas. A visual 3d ground is generated by RoR when map is loaded. Physics properties are defined using a configuration file which defines surface types, as well as a set of images which define areas of effect for the surface types. Visual appearance is achieved using tiling textures, texture blending (a.k.a splatting) and built-in shader effects (normal mapping, specular mapping). An alternative approach to creating ground is to implement it as static object. In this case, none of the above applies. The shape would be defined by the mesh (3d model) geometry. Physics property setup is different. Visual appearance is specified by material script. Water \u00b6 Another typical part of a landscape. Bodies of water can vary in size from small ponds to lakes and seas. RoR implements water as a single body covering the whole map and penetrating all objects. It's specified as \"water height\" attribute of the map. All areas below the specified height will be flooded. Static objects \u00b6 Anything that doesn't move. Mostly buildings of all kinds, but also roads, structures like bridges, and finally roads and other tracks. Each of these objects must have a visual mesh (3d model). RoR uses OGRE's \".mesh\" format. Static objects may also have a collision mesh and associated friction settings, which are defined in a .odef file. Those which don't are ethereal - vehicles just drive through them. Static object may also trigger special events. A \"truck shop\" building will, when entered, will display a vehicle menu. A \"load spawner\" deck will bring up a menu with trailers and loads. And so on. Stationary dynamic objects \u00b6 Stationary or semi-stationary objects like cranes, hall doors, bridges or wind turbines are made from dynamic physical model, just like vehicles, except they're completely or partially fixed to the ground. The basic structure \u00b6 Terrains are distributed as ZIP archives containing a set of terrain-definition files and various resources. A terrain must be in a ZIP archive, otherwise it doesn't load correctly. The files \u00b6 .terrn2 : Entry point for the terrain. This is the only required file for a terrain to have. [General] #Name of the terrain Name = My Terrain #File name of the heightmap configuration GeometryConfig = my-terrain.otc #If your map needs water, set this value to 1 Water=0 #Water level WaterLine=1.0 #Terrain/water color, usually left at the default values. AmbientColor = 0.93, 0.86, 0.76 #The position RoRBot spawns at when the terrain is loaded. #The numbers do not have to be seperated by commas. StartPosition = 1364.25 121.028 1272.22 #Where the map will be located in the terrain selector menu. Best to leave it as the default. CategoryID = 129 #Version of the terrain. Version = 1 #Unique ID of the terrain. You can generate one at https://guidgenerator.com GUID = 9b202f78-ba1c-4d58-9996-61066fa5d9fc #Extras #Landuse config, configures surface types (dirt,mud,etc) TractionMap = landuse.cfg #Caelum sky configuration file. CaelumConfigFile = my-sky.os #Sandstorm sky cubemap material. SandStormCubeMap = tracks/skyboxcol #Authors of the terrain. [Authors] terrain = yourname #Filename for the object (.tobj) file. [Objects] my-terrain.tobj= #Filename for the Angelscript file. [Scripts] my-script.as= .otc : \"Ogre Terrain Config\". Configures the OGRE::Terrain subsystem which RoR uses for terrain display. See below for example files. -page-x-x.otc : Configures the terrain's ground textures. Most terrains only have 1 page, so this file is usually named mapname-page-0-0.otc . See below for a example file. .tobj : Placements for static objects/trees/grass/etc. See the Static objects section for more info. .os : Caelum system (sky/weather) config. Visuals only. Example file here. .hdx : Hydrax config (0.4.5 and up). Water display. Example file here. .as : Terrain script file, usually used for races. See this page for more info. Note that, there is no editor which would create these files for you. You need to copy a template and work manually from there. Templates can be found here . The heightmap \u00b6 As said above, RoR's primary mechanism for shaping a terrain are heightmaps. We use 8-bit or 16-bit unsigned integer RAW heightmaps. As of 0.4.x, using a PNG image for the heightmap is also supported. If you want to use RAW, They can be converted from images or generated in a specialized tool. We provide tutorials for several of them. To use the heightmap in a terrain, you must configure it in a .otc and -page-x-x.otc file (filename, size, bit depth...) and include it into terrain's ZIP archive. You can use ImageMagick to convert to and from the .raw heightmap files: To convert from a .raw file to a bitmap image file issue the following command: convert -depth 16 -size 1025x1025 -endian LSB gray:mymap.raw mymap.bmp To convert back to a .raw file for RoR execute: convert mymap.bmp -resize 1025x1025 -endian LSB -flip gray:mymap.raw For more information, see ImageMagick's command-line processing page. The layout of an .otc is different depending on which format your heightmap is. An example .otc file for a RAW heightmap: ;Heightmap values ;size (horizontal/vertical) Heightmap.0.0.raw.size=1025 ;bytes per pixel (1 = 8bit, 2=16bit) Heightmap.0.0.raw.bpp=2 ;If the terrain heightmap needs to be flipped (eg. Terragen exports RAW upside down) Heightmap.0.0.flipX=1 ;Terrain size values ;size (both values must be the same for textures to work properly!) WorldSizeX=3000 WorldSizeZ=3000 ;Terrain max height WorldSizeY=300 ;To disable caching (creating a `.mapbin` file in `/cache` folder) when changing terrain textures. disableCaching=1 ;Filename to define the textures. PageFileFormat=my-terrain-page-0-0.otc ;Advanced texture values, best to leave them as the defaults. LightmapEnabled=0 SpecularMappingEnabled=1 NormalMappingEnabled=1 Example for a PNG heightmap: ## the amount of pages in this terrain ## 0, 0 means that you only have one page PagesX=0 PagesZ=0 PageFileFormat=my-terrain-page-{X}-{Z}.otc ## the factor with what the heightmap values get multiplied with WorldSizeY=0 ## The world size of the terrain WorldSizeX=3000 WorldSizeZ=3000 ## Sets the default size of blend maps for a new terrain. This is the resolution of each blending layer for a new terrain. default: 1024 LayerBlendMapSize=2048 ## disableCaching=1 will always enforce regeneration of the terrain, useful if you want to change the terrain config (.otc) and test it. Does not cache the objects on it. disableCaching=1 #optimizations ## Minimum batch size (along one edge) in vertices; must be 2^n+1. The terrain will be divided into tiles, and this is the minimum size of one tile in vertices (at any LOD). default: 17 minBatchSize=17 ## Maximum batch size (along one edge) in vertices; must be 2^n+1 and <= 65. The terrain will be divided into hierarchical tiles, and this is the maximum size of one tile in vertices (at any LOD). default: 65 maxBatchSize=65 ## Whether to support a light map over the terrain in the shader, if it's present (default true). LightmapEnabled=1 ## Whether to support normal mapping per layer in the shader (default true). NormalMappingEnabled=1 ## Whether to support specular mapping per layer in the shader (default true). SpecularMappingEnabled=1 ## Whether to support parallax mapping per layer in the shader (default true). ParallaxMappingEnabled=0 ## Whether to support a global colour map over the terrain in the shader, if it's present (default true). GlobalColourMapEnabled=0 ## Whether to use depth shadows (default false). ReceiveDynamicShadowsDepth=0 ## Sets the default size of composite maps for a new terrain, default: 1024 CompositeMapSize=1024 ## Set the distance at which to start using a composite map if present, default: 4000 CompositeMapDistance=5000 ## the default size of 'skirts' used to hide terrain cracks, default: 30 SkirtSize=30 ## Sets the default size of lightmaps for a new terrain, default: 1024 LightMapSize=1024 ## Whether the terrain will be able to cast shadows, default: 0 CastsDynamicShadows=0 ## Set the maximum screen pixel error that should be allowed when rendering, default: MaxPixelError=0 ## dump the blend maps to files named blendmap_layer_X.png DebugBlendMaps=0 Ground textures \u00b6 See also: Ogre Terrain Page Config (.otc) The system is designed for texturing by several tiling textures combined via built-in texture blending (aka texture splatting). Other built-in effects: normal mapping , specular mapping, parallax mapping . Terrain supports \"Global Light maps\" (Mountains will shadow the terrain if the sun is low, etc...), but this feature is not currently used by RoR. A standard (single layer) -page-x-x.otc file: mapname.raw = Heightmap filename 1 = Amount of layers worldSize = X/Z value in the .otc [Has to be the same] mapname.dds = texture name mapname.raw 1 ; worldSize, diffusespecular, normalheight, blendmap, blendmapmode, alpha 3000 , mapname-diffspec.dds , mapname-normal.dds -page-x-x.otc file with multiple layers: (Limited to 6 texture layers) mapname.raw 4 ; worldSize, diffusespecular, normalheight, blendmap, blendmapmode, alpha 3500 , mapname-ds.dds , mapname-ds.dds 5, mapname-gravel_diffusespecular.dds,mapname-gravel_normalheight.dds,mapname_RGB.png, R, 0.9 5, mapname-lushGrass2-ds.dds,mapname_lushGrass_NRM-ds.dds,mapname_RGB.png, B, 1.0 5, mapname_Cracked2_DS.dds,mapname_Cracked_NM.dds,mapname_RGB.png, G, 1.0 Static objects \u00b6 All static objects/grass/etc on a terrain are defined in a .tobj file, multiple of these files can be defined in the .terrn2 . A normal terrain object is usually formatted like this: // x y z rx ry rz odefname (without .odef file extension) 875.549, 67.6607, 1155.26, 0, 0, 0, truckshop RoR uses Paged Geometry for trees/grass, see this page for more info. For help editing terrain objects, see: Adding/moving terrain objects A .tobj file featuring trees, grass, objects, and roads: //grass and trees grass 200, 0.5, 0.05, 10, 0.1, 0.2, 0.2, 1, 1, 1, 0, 9, seaweed none none grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass1 aspen.jpg aspen_grass_density.png trees 0, 360, 0.1, 0.12, 2, 60, 3000, fir05_30.mesh aspen-test.dds aspen_grass_density2.png //trucks/loads/boats 1191.162109, 35.034180, 930.908203, 0.000000, 0.000000, 0.000000, truck wrecker.truck 1131.103516, 35.034180, 910.888672, 0.000000, 0.000000, 0.000000, load acontainer.load 1221.191406, 35.034180, 930.908203, 0.000000, 0.000000, 0.000000, load crate.load 1185.191406, 35.034180, 827.042773, 0.000000, -144.000000, 0.000000, truck an-12.airplane 1091.064453, 37.036133, 1224.194336, 0.000000, 0.000000, 0.000000, truck dodgepolice.truck 332.380859, 33.032227, 1009.191406, 0.000000, 23.000000, 0.000000, boat smit.boat //objects 1181.152344, 34.183350, 950.927734, 0.000000, 0.000000, 0.000000, truckshop sale RigaDeal 1181.152344, 34.183350, 910.888672, 0.000000, 0.000000, 0.000000, myhangar2 repair Rods 1133.914917, 34.134541, 945.474792, 0.000000, 90.000000, 0.000000, load-spawner sale ColdDepot 1151.123047, 33.833008, 995.971680, 0.000000, 0.000000, 0.000000, a1da0UID-smallhouse 1131.103516, 33.833008, 995.971680, 0.000000, 90.000000, 0.000000, a1da0UID-smallhouse 1231.201172, 33.833008, 940.917969, 0.000000, 0.000000, 0.000000, a1da0UID-myobs //1141.113281, 33.833008, 1020.996094, 0.000000, 45.000000, 0.000000, a1da0UID-smallhouse2 //some roads 1026.371338, 34.086056, 1007.492920, 0.000000, -144.000000, 0.000000, road 1018.273438, 34.086056, 1013.378662, 0.000000, -144.000000, 0.000000, road 1010.175537, 34.086056, 1019.254395, 0.000000, -144.000000, 0.500000, road 1002.077637, 34.173340, 1025.140137, 0.000000, -144.000000, 0.000000, road 994.111877, 34.173340, 1030.935791, 0.000000, -146.000000, 0.500000, road 985.945923, 34.260723, 1036.441162, 0.000000, -148.000000, 0.000000, road 977.557739, 34.260723, 1041.686279, 0.000000, -149.500000, 0.000000, road 969.035400, 34.260723, 1046.711182, 0.000000, -151.000000, 0.500000, road 960.350952, 34.348011, 1051.525879, 0.000000, -152.000000, 0.000000, road 951.652466, 34.348011, 1056.150391, 0.000000, -154.000000, -0.500000, road 942.834839, 34.260723, 1060.464600, 0.000000, -156.500000, 0.000000, road 933.910156, 34.260723, 1064.348389, 0.000000, -160.000000, 1.000000, road 924.580017, 34.435394, 1067.741699, 0.000000, -161.000000, 1.000000, road","title":"Intro to terrain creation"},{"location":"terrain-creation/intro/#intro-to-terrain-creation","text":"Creating a terrain for Rigs of Rods is quite technically involved and largely manual process. This page aims to give you an overview of required work, as well as guides and advice for your own projects.","title":"Intro to terrain creation"},{"location":"terrain-creation/intro/#anatomy-of-terrain","text":"Before you start making your own terrain, you need to know and understand what does a terrain consist of and how it all works together.","title":"Anatomy of terrain"},{"location":"terrain-creation/intro/#ground","text":"Obviously the most significant part of the terrain. Ground provides a surface for land vehicles to drive on, airplanes to take off from/land on etc. Ground has shape, physical properties like friction and visual attributes. In RoR, the primary method of defining ground shape is using a heightmap. A heightmap is a grayscale image where black represents lowest areas and white represents highest areas. A visual 3d ground is generated by RoR when map is loaded. Physics properties are defined using a configuration file which defines surface types, as well as a set of images which define areas of effect for the surface types. Visual appearance is achieved using tiling textures, texture blending (a.k.a splatting) and built-in shader effects (normal mapping, specular mapping). An alternative approach to creating ground is to implement it as static object. In this case, none of the above applies. The shape would be defined by the mesh (3d model) geometry. Physics property setup is different. Visual appearance is specified by material script.","title":"Ground"},{"location":"terrain-creation/intro/#water","text":"Another typical part of a landscape. Bodies of water can vary in size from small ponds to lakes and seas. RoR implements water as a single body covering the whole map and penetrating all objects. It's specified as \"water height\" attribute of the map. All areas below the specified height will be flooded.","title":"Water"},{"location":"terrain-creation/intro/#static-objects","text":"Anything that doesn't move. Mostly buildings of all kinds, but also roads, structures like bridges, and finally roads and other tracks. Each of these objects must have a visual mesh (3d model). RoR uses OGRE's \".mesh\" format. Static objects may also have a collision mesh and associated friction settings, which are defined in a .odef file. Those which don't are ethereal - vehicles just drive through them. Static object may also trigger special events. A \"truck shop\" building will, when entered, will display a vehicle menu. A \"load spawner\" deck will bring up a menu with trailers and loads. And so on.","title":"Static objects"},{"location":"terrain-creation/intro/#stationary-dynamic-objects","text":"Stationary or semi-stationary objects like cranes, hall doors, bridges or wind turbines are made from dynamic physical model, just like vehicles, except they're completely or partially fixed to the ground.","title":"Stationary dynamic objects"},{"location":"terrain-creation/intro/#the-basic-structure","text":"Terrains are distributed as ZIP archives containing a set of terrain-definition files and various resources. A terrain must be in a ZIP archive, otherwise it doesn't load correctly.","title":"The basic structure"},{"location":"terrain-creation/intro/#the-files","text":".terrn2 : Entry point for the terrain. This is the only required file for a terrain to have. [General] #Name of the terrain Name = My Terrain #File name of the heightmap configuration GeometryConfig = my-terrain.otc #If your map needs water, set this value to 1 Water=0 #Water level WaterLine=1.0 #Terrain/water color, usually left at the default values. AmbientColor = 0.93, 0.86, 0.76 #The position RoRBot spawns at when the terrain is loaded. #The numbers do not have to be seperated by commas. StartPosition = 1364.25 121.028 1272.22 #Where the map will be located in the terrain selector menu. Best to leave it as the default. CategoryID = 129 #Version of the terrain. Version = 1 #Unique ID of the terrain. You can generate one at https://guidgenerator.com GUID = 9b202f78-ba1c-4d58-9996-61066fa5d9fc #Extras #Landuse config, configures surface types (dirt,mud,etc) TractionMap = landuse.cfg #Caelum sky configuration file. CaelumConfigFile = my-sky.os #Sandstorm sky cubemap material. SandStormCubeMap = tracks/skyboxcol #Authors of the terrain. [Authors] terrain = yourname #Filename for the object (.tobj) file. [Objects] my-terrain.tobj= #Filename for the Angelscript file. [Scripts] my-script.as= .otc : \"Ogre Terrain Config\". Configures the OGRE::Terrain subsystem which RoR uses for terrain display. See below for example files. -page-x-x.otc : Configures the terrain's ground textures. Most terrains only have 1 page, so this file is usually named mapname-page-0-0.otc . See below for a example file. .tobj : Placements for static objects/trees/grass/etc. See the Static objects section for more info. .os : Caelum system (sky/weather) config. Visuals only. Example file here. .hdx : Hydrax config (0.4.5 and up). Water display. Example file here. .as : Terrain script file, usually used for races. See this page for more info. Note that, there is no editor which would create these files for you. You need to copy a template and work manually from there. Templates can be found here .","title":"The files"},{"location":"terrain-creation/intro/#the-heightmap","text":"As said above, RoR's primary mechanism for shaping a terrain are heightmaps. We use 8-bit or 16-bit unsigned integer RAW heightmaps. As of 0.4.x, using a PNG image for the heightmap is also supported. If you want to use RAW, They can be converted from images or generated in a specialized tool. We provide tutorials for several of them. To use the heightmap in a terrain, you must configure it in a .otc and -page-x-x.otc file (filename, size, bit depth...) and include it into terrain's ZIP archive. You can use ImageMagick to convert to and from the .raw heightmap files: To convert from a .raw file to a bitmap image file issue the following command: convert -depth 16 -size 1025x1025 -endian LSB gray:mymap.raw mymap.bmp To convert back to a .raw file for RoR execute: convert mymap.bmp -resize 1025x1025 -endian LSB -flip gray:mymap.raw For more information, see ImageMagick's command-line processing page. The layout of an .otc is different depending on which format your heightmap is. An example .otc file for a RAW heightmap: ;Heightmap values ;size (horizontal/vertical) Heightmap.0.0.raw.size=1025 ;bytes per pixel (1 = 8bit, 2=16bit) Heightmap.0.0.raw.bpp=2 ;If the terrain heightmap needs to be flipped (eg. Terragen exports RAW upside down) Heightmap.0.0.flipX=1 ;Terrain size values ;size (both values must be the same for textures to work properly!) WorldSizeX=3000 WorldSizeZ=3000 ;Terrain max height WorldSizeY=300 ;To disable caching (creating a `.mapbin` file in `/cache` folder) when changing terrain textures. disableCaching=1 ;Filename to define the textures. PageFileFormat=my-terrain-page-0-0.otc ;Advanced texture values, best to leave them as the defaults. LightmapEnabled=0 SpecularMappingEnabled=1 NormalMappingEnabled=1 Example for a PNG heightmap: ## the amount of pages in this terrain ## 0, 0 means that you only have one page PagesX=0 PagesZ=0 PageFileFormat=my-terrain-page-{X}-{Z}.otc ## the factor with what the heightmap values get multiplied with WorldSizeY=0 ## The world size of the terrain WorldSizeX=3000 WorldSizeZ=3000 ## Sets the default size of blend maps for a new terrain. This is the resolution of each blending layer for a new terrain. default: 1024 LayerBlendMapSize=2048 ## disableCaching=1 will always enforce regeneration of the terrain, useful if you want to change the terrain config (.otc) and test it. Does not cache the objects on it. disableCaching=1 #optimizations ## Minimum batch size (along one edge) in vertices; must be 2^n+1. The terrain will be divided into tiles, and this is the minimum size of one tile in vertices (at any LOD). default: 17 minBatchSize=17 ## Maximum batch size (along one edge) in vertices; must be 2^n+1 and <= 65. The terrain will be divided into hierarchical tiles, and this is the maximum size of one tile in vertices (at any LOD). default: 65 maxBatchSize=65 ## Whether to support a light map over the terrain in the shader, if it's present (default true). LightmapEnabled=1 ## Whether to support normal mapping per layer in the shader (default true). NormalMappingEnabled=1 ## Whether to support specular mapping per layer in the shader (default true). SpecularMappingEnabled=1 ## Whether to support parallax mapping per layer in the shader (default true). ParallaxMappingEnabled=0 ## Whether to support a global colour map over the terrain in the shader, if it's present (default true). GlobalColourMapEnabled=0 ## Whether to use depth shadows (default false). ReceiveDynamicShadowsDepth=0 ## Sets the default size of composite maps for a new terrain, default: 1024 CompositeMapSize=1024 ## Set the distance at which to start using a composite map if present, default: 4000 CompositeMapDistance=5000 ## the default size of 'skirts' used to hide terrain cracks, default: 30 SkirtSize=30 ## Sets the default size of lightmaps for a new terrain, default: 1024 LightMapSize=1024 ## Whether the terrain will be able to cast shadows, default: 0 CastsDynamicShadows=0 ## Set the maximum screen pixel error that should be allowed when rendering, default: MaxPixelError=0 ## dump the blend maps to files named blendmap_layer_X.png DebugBlendMaps=0","title":"The heightmap"},{"location":"terrain-creation/intro/#ground-textures","text":"See also: Ogre Terrain Page Config (.otc) The system is designed for texturing by several tiling textures combined via built-in texture blending (aka texture splatting). Other built-in effects: normal mapping , specular mapping, parallax mapping . Terrain supports \"Global Light maps\" (Mountains will shadow the terrain if the sun is low, etc...), but this feature is not currently used by RoR. A standard (single layer) -page-x-x.otc file: mapname.raw = Heightmap filename 1 = Amount of layers worldSize = X/Z value in the .otc [Has to be the same] mapname.dds = texture name mapname.raw 1 ; worldSize, diffusespecular, normalheight, blendmap, blendmapmode, alpha 3000 , mapname-diffspec.dds , mapname-normal.dds -page-x-x.otc file with multiple layers: (Limited to 6 texture layers) mapname.raw 4 ; worldSize, diffusespecular, normalheight, blendmap, blendmapmode, alpha 3500 , mapname-ds.dds , mapname-ds.dds 5, mapname-gravel_diffusespecular.dds,mapname-gravel_normalheight.dds,mapname_RGB.png, R, 0.9 5, mapname-lushGrass2-ds.dds,mapname_lushGrass_NRM-ds.dds,mapname_RGB.png, B, 1.0 5, mapname_Cracked2_DS.dds,mapname_Cracked_NM.dds,mapname_RGB.png, G, 1.0","title":"Ground textures"},{"location":"terrain-creation/intro/#static-objects_1","text":"All static objects/grass/etc on a terrain are defined in a .tobj file, multiple of these files can be defined in the .terrn2 . A normal terrain object is usually formatted like this: // x y z rx ry rz odefname (without .odef file extension) 875.549, 67.6607, 1155.26, 0, 0, 0, truckshop RoR uses Paged Geometry for trees/grass, see this page for more info. For help editing terrain objects, see: Adding/moving terrain objects A .tobj file featuring trees, grass, objects, and roads: //grass and trees grass 200, 0.5, 0.05, 10, 0.1, 0.2, 0.2, 1, 1, 1, 0, 9, seaweed none none grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass1 aspen.jpg aspen_grass_density.png trees 0, 360, 0.1, 0.12, 2, 60, 3000, fir05_30.mesh aspen-test.dds aspen_grass_density2.png //trucks/loads/boats 1191.162109, 35.034180, 930.908203, 0.000000, 0.000000, 0.000000, truck wrecker.truck 1131.103516, 35.034180, 910.888672, 0.000000, 0.000000, 0.000000, load acontainer.load 1221.191406, 35.034180, 930.908203, 0.000000, 0.000000, 0.000000, load crate.load 1185.191406, 35.034180, 827.042773, 0.000000, -144.000000, 0.000000, truck an-12.airplane 1091.064453, 37.036133, 1224.194336, 0.000000, 0.000000, 0.000000, truck dodgepolice.truck 332.380859, 33.032227, 1009.191406, 0.000000, 23.000000, 0.000000, boat smit.boat //objects 1181.152344, 34.183350, 950.927734, 0.000000, 0.000000, 0.000000, truckshop sale RigaDeal 1181.152344, 34.183350, 910.888672, 0.000000, 0.000000, 0.000000, myhangar2 repair Rods 1133.914917, 34.134541, 945.474792, 0.000000, 90.000000, 0.000000, load-spawner sale ColdDepot 1151.123047, 33.833008, 995.971680, 0.000000, 0.000000, 0.000000, a1da0UID-smallhouse 1131.103516, 33.833008, 995.971680, 0.000000, 90.000000, 0.000000, a1da0UID-smallhouse 1231.201172, 33.833008, 940.917969, 0.000000, 0.000000, 0.000000, a1da0UID-myobs //1141.113281, 33.833008, 1020.996094, 0.000000, 45.000000, 0.000000, a1da0UID-smallhouse2 //some roads 1026.371338, 34.086056, 1007.492920, 0.000000, -144.000000, 0.000000, road 1018.273438, 34.086056, 1013.378662, 0.000000, -144.000000, 0.000000, road 1010.175537, 34.086056, 1019.254395, 0.000000, -144.000000, 0.500000, road 1002.077637, 34.173340, 1025.140137, 0.000000, -144.000000, 0.000000, road 994.111877, 34.173340, 1030.935791, 0.000000, -146.000000, 0.500000, road 985.945923, 34.260723, 1036.441162, 0.000000, -148.000000, 0.000000, road 977.557739, 34.260723, 1041.686279, 0.000000, -149.500000, 0.000000, road 969.035400, 34.260723, 1046.711182, 0.000000, -151.000000, 0.500000, road 960.350952, 34.348011, 1051.525879, 0.000000, -152.000000, 0.000000, road 951.652466, 34.348011, 1056.150391, 0.000000, -154.000000, -0.500000, road 942.834839, 34.260723, 1060.464600, 0.000000, -156.500000, 0.000000, road 933.910156, 34.260723, 1064.348389, 0.000000, -160.000000, 1.000000, road 924.580017, 34.435394, 1067.741699, 0.000000, -161.000000, 1.000000, road","title":"Static objects"},{"location":"terrain-creation/l3dt-map-making/","text":"L3DT Map Making \u00b6 Introduction \u00b6 L3DT is a Windows application for generating terrain maps and textures. It is intended to help game developers and digital artists create vast high-quality 3D worlds. About L3DT web page This page will teach you how to export an L3DT terrain into Rigs of Rods version 0.4.8.0+. Please read everything carefully and do not skip any steps. Required applications \u00b6 L3DT (Standard or Professional) ( Pro 16.05 will be used here) GIMP 2.10 DDS plugin for GIMP (See the included readme file for installation instructions) Notepad++ A brain, some basic computer knowledge, and some patience For this tutorial, I will assume you already have a ready-to-export terrain in L3DT. This is a simple 1024x1024 terrain generated by L3DT's \"Design Map\" feature. I've uploaded the project files here for reference. Note : You may only be able to open the project file in the Pro version due to it using 4096x4096 textures. Setting up \u00b6 Start by downloading a template terrain . For simplicity sake, choose the template_04_raw.zip version. Once downloaded, extract the zip into any folder. Delete template_04_raw.raw , simple2_asphalt_diffusespecular.dds , and simple2_asphalt_normalheight.dds as you will not be needing them. Rename the files to what you'd like your terrain to be named (for this tutorial I will just name it l3dt_tutorial ). Now open all the files in Notepad++ by selecting them then right click -> Edit with Notepad++ Press CTRL+F to open the Find menu, then switch to the Replace tab. Set \"Find what\" to template_04_raw and \"Replace with\" with your terrain name, then click Replace All in All Opened Documents . If successful, you should see something similar to Replace in Opened Files: 5 occurrences were replaced. Now click File -> Save All to save your current files. We're ready to export the heightmap now. Exporting the heightmap \u00b6 In L3DT, right click the Heightfield layer -> Export layer... Set the \"File format\" to RAW . Click the ... button to browse to where your terrain files are located. Name the file the same as you did previously (i.e. l3dt_tutorial.raw ). Now check the Re-size for export box and set the Width and Height to the same values as you did when you generated the terrain (i.e. 1024x1024). You should now have a .raw file in your working directory. The OTC file \u00b6 Now go back to Notepad++ and open l3dt_tutorial.otc . The file will look similar to this: Heightmap.0.0.raw.size=5 Heightmap.0.0.raw.bpp=2 Heightmap.0.0.flipX=0 WorldSizeX=3000 WorldSizeZ=3000 WorldSizeY=0 disableCaching=1 PageFileFormat=l3dt_tutorial-page-0-0.otc MaxPixelError=0 LightmapEnabled=0 SpecularMappingEnabled=1 NormalMappingEnabled=1 Heightmap.0.0.raw.size=5 Size of your heightmap. For this terrain, it is 1024 . Heightmap.0.0.raw.bpp=2 Bytes per pixel (1 = 8bit, 2=16bit). Leave this at 2 . Heightmap.0.0.flipX=0 If the terrain heightmap needs to be flipped. since L3DT doesn't export the heightmap upside down leave this at 0 . WorldSizeX=3000 WorldSizeZ=3000 Size of the terrain. Since this is a 1024x1024 terrain, set both to 1024 . WorldSizeY=0 Maximum height of the terrain. To get this value, in L3DT go to Operations -> Heightfield -> Change vertical range... . Add the non-negative minimum value to the maximum value. If you get a decimal, you should be safe to round it (i.e. 139 ). disableCaching=1 This prevents the game from caching the heightmap. For testing purposes, leave it at 1 . PageFileFormat=l3dt_tutorial-page-0-0.otc Name of the file that defines the terrain textures. Since we already renamed it earlier, there's no need to change this. MaxPixelError=0 LightmapEnabled=0 SpecularMappingEnabled=1 NormalMappingEnabled=1 Advanced heightmap/texture settings, it's best to leave these at their current values. The finished file: Heightmap.0.0.raw.size=1024 Heightmap.0.0.raw.bpp=2 Heightmap.0.0.flipX=0 WorldSizeX=1024 WorldSizeZ=1024 WorldSizeY=139 disableCaching=1 PageFileFormat=l3dt_tutorial-page-0-0.otc MaxPixelError=0 LightmapEnabled=0 SpecularMappingEnabled=1 NormalMappingEnabled=1 We're ready to export the textures now. Exporting textures \u00b6 Texture map \u00b6 Right click Texture map -> Export layer... Set the \"File format\" to PNG . Just as you did previously, browse to your terrain directory and set the file name (i.e. l3dt_tutorial.png ). Check the Re-size for export box and set your texture size (in this case, 4096x4096 ) Normal map \u00b6 Now right click Terrain normals -> Export layer... and repeat the same steps as last time. You should now have two textures in your working directory. Applying alpha mask \u00b6 To prevent the terrain texture from being overly shiny in-game, you will have to apply an alpha mask to both the texture map and the normal map. To do this, open both textures in GIMP. Go to Layer -> Mask -> Add Layer Mask... Select Black (full transparency) then click Add . Now go to File -> Export As... Change the file extension to .dds then click Export . If you installed the DDS plugin correctly, you should now have a Save as DDS dialog. Set the Compression to BC3 / DXT5 then click OK to export. Repeat the same steps for the normal map texture. Once you're done, you should have two new DDS files in your working directory. You can now delete the two PNG textures we exported earlier as they're no longer needed. The page file \u00b6 Now open l3dt_tutorial-page-0-0.otc . The file will look similar to this: l3dt_tutorial.raw 1 ; worldSize, diffusespecular, normalheight, blendmap, blendmapmode, alpha 4, simple2_asphalt_diffusespecular.dds, simple2_asphalt_diffusespecular.dds l3dt_tutorial.raw The name of your heightmap RAW file. Since we already renamed it earlier, there's no need to change this. 1 The number of texture layers. Since we only have 1 layer, leave it at 1 . 4, simple2_asphalt_diffusespecular.dds, simple2_asphalt_diffusespecular.dds 4 The size of your terrain. It typically is the same as the WorldSizeX/WorldSizeZ values. So in this case, 1024 . simple2_asphalt_diffusespecular.dds, simple2_asphalt_diffusespecular.dds The names of your texture map and normal map. For this terrain, they are named l3dt_tutorial.dds and l3dt_tutorial_normal.dds . The finished file: l3dt_tutorial.raw 1 ; worldSize, diffusespecular, normalheight, blendmap, blendmapmode, alpha 1024, l3dt_tutorial.dds, l3dt_tutorial_normal.dds The Terrn2 file \u00b6 The last file we need to edit is the l3dt_tutorial.terrn2 file. It will look similar to this: [General] Name = Template 0.4 (RAW Heightmap) Terrain GeometryConfig = l3dt_tutorial.otc Water=0 #WaterLine=1.0 AmbientColor = 0.93, 0.86, 0.76 StartPosition = 512, 1, 512 #CaelumConfigFile = SandStormCubeMap = tracks/skyboxcol Gravity = -9.81 CategoryID = 129 Version = 1 GUID = 995a989c-28a7-4836-b5fe-bc699b81b97b //TractionMap = l3dt_tutorial-landuse.cfg [Authors] template = CuriousMike [Objects] l3dt_tutorial.tobj= [Scripts] Name = Template 0.4 (RAW Heightmap) Terrain The name of your terrain. In this example, I will name it L3DT Tutorial Terrain V2 . GeometryConfig = l3dt_tutorial.otc The filename of your terrain's main OTC file. Since we already renamed it earlier, there's no need to change this. Water=0 If your map has water, set this to 1 . Otherwise, leave it at 0 . #WaterLine=1.0 If your terrain doesn't have water, skip this step. Otherwise, remove the # from the beginning of the line. To get this value, go back to the Change vertical range... dialog you got the minimum/maximum height values from earlier. The non-negative minimum value is your WaterLine value. For this terrain, it is 40 . Again, you should be safe to round it. AmbientColor = 0.93, 0.86, 0.76 StartPosition = 512, 1, 512 #CaelumConfigFile = SandStormCubeMap = tracks/skyboxcol Gravity = -9.81 CategoryID = 129 Version = 1 These values can currently be left as is. GUID = 995a989c-28a7-4836-b5fe-bc699b81b97b The ID that uniquely identifies your terrain. You can generate one here . //TractionMap = l3dt_tutorial-landuse.cfg The file that defines the different ground types. Since we don't currently have one, leave it commented out. [Authors] template = CuriousMike The authors of the terrain. Just set your username. For example terrain = CuriousMike . [Objects] l3dt_tutorial.tobj= The name of your objects file. Since we already renamed it earlier, there's no need to change this. [Scripts] The AngelScript filename. Since we don't have one, just ignore this. In-Game \u00b6 And finally, zip all your files up and place them into your packs / mods folder. Now launch RoR and load your terrain! If everything went well, your terrain should look almost identical to how it does in L3DT's Sapphire: Changing the spawn position \u00b6 When you loaded the terrain, you most likely spawned in the water or on the side of a mountain. To fix this, move RoRBot to where you'd like to spawn at. Then press the h key. This is will log the current position to RoR.log . Now browse to C:\\Users\\%username%\\Documents\\Rigs of Rods 0.4\\logs and open the RoR.log file. Scroll to the bottom of the file. You should find a line similar to this: 22:21:51: Position: 885.289, 113.769, 586.640, 0.0, 0.0, 0.0 Now open your .terrn2 file and find the StartPosition line. StartPosition = 512, 1, 512 Copy the first 3 numbers from the position line, for example: StartPosition = 885.289, 113.769, 586.640 Save the file and launch RoR. You should now spawn in the position you set. Congratulations! You have learned how to get your L3DT terrain in-game! Download the finished terrain here . Troubleshooting \u00b6 Stream size does not match calculated image size \u00b6 Your Heightmap.0.0.raw.size value does not match the size of your exported raw file. Make sure the size you set in the export dialog is the same. In-game world scale doesn't match the L3DT terrain \u00b6 Make sure your WorldSizeX / WorldSizeZ matches the size in L3DT. Also check if you calculated the WorldSizeY value correctly. Terrain texture is solid black \u00b6 Your texture names in your page file don't match the filename. Terrain texture is shiny \u00b6 You didn't apply the alpha mask in GIMP correctly. RoR crashes while loading the terrain \u00b6 Check all your files and make sure you didn't make any syntax errors. You can also check your RoR.log to see where the crash occurs at. More help \u00b6 If you have a different issue than the one listed here and you're sure you didn't do anything obviously wrong, then please make a thread in the correct subforum or join our Discord server and ask your question in the #content-creation channel.","title":"L3DT Map Making"},{"location":"terrain-creation/l3dt-map-making/#l3dt-map-making","text":"","title":"L3DT Map Making"},{"location":"terrain-creation/l3dt-map-making/#introduction","text":"L3DT is a Windows application for generating terrain maps and textures. It is intended to help game developers and digital artists create vast high-quality 3D worlds. About L3DT web page This page will teach you how to export an L3DT terrain into Rigs of Rods version 0.4.8.0+. Please read everything carefully and do not skip any steps.","title":"Introduction"},{"location":"terrain-creation/l3dt-map-making/#required-applications","text":"L3DT (Standard or Professional) ( Pro 16.05 will be used here) GIMP 2.10 DDS plugin for GIMP (See the included readme file for installation instructions) Notepad++ A brain, some basic computer knowledge, and some patience For this tutorial, I will assume you already have a ready-to-export terrain in L3DT. This is a simple 1024x1024 terrain generated by L3DT's \"Design Map\" feature. I've uploaded the project files here for reference. Note : You may only be able to open the project file in the Pro version due to it using 4096x4096 textures.","title":"Required applications"},{"location":"terrain-creation/l3dt-map-making/#setting-up","text":"Start by downloading a template terrain . For simplicity sake, choose the template_04_raw.zip version. Once downloaded, extract the zip into any folder. Delete template_04_raw.raw , simple2_asphalt_diffusespecular.dds , and simple2_asphalt_normalheight.dds as you will not be needing them. Rename the files to what you'd like your terrain to be named (for this tutorial I will just name it l3dt_tutorial ). Now open all the files in Notepad++ by selecting them then right click -> Edit with Notepad++ Press CTRL+F to open the Find menu, then switch to the Replace tab. Set \"Find what\" to template_04_raw and \"Replace with\" with your terrain name, then click Replace All in All Opened Documents . If successful, you should see something similar to Replace in Opened Files: 5 occurrences were replaced. Now click File -> Save All to save your current files. We're ready to export the heightmap now.","title":"Setting up"},{"location":"terrain-creation/l3dt-map-making/#exporting-the-heightmap","text":"In L3DT, right click the Heightfield layer -> Export layer... Set the \"File format\" to RAW . Click the ... button to browse to where your terrain files are located. Name the file the same as you did previously (i.e. l3dt_tutorial.raw ). Now check the Re-size for export box and set the Width and Height to the same values as you did when you generated the terrain (i.e. 1024x1024). You should now have a .raw file in your working directory.","title":"Exporting the heightmap"},{"location":"terrain-creation/l3dt-map-making/#the-otc-file","text":"Now go back to Notepad++ and open l3dt_tutorial.otc . The file will look similar to this: Heightmap.0.0.raw.size=5 Heightmap.0.0.raw.bpp=2 Heightmap.0.0.flipX=0 WorldSizeX=3000 WorldSizeZ=3000 WorldSizeY=0 disableCaching=1 PageFileFormat=l3dt_tutorial-page-0-0.otc MaxPixelError=0 LightmapEnabled=0 SpecularMappingEnabled=1 NormalMappingEnabled=1 Heightmap.0.0.raw.size=5 Size of your heightmap. For this terrain, it is 1024 . Heightmap.0.0.raw.bpp=2 Bytes per pixel (1 = 8bit, 2=16bit). Leave this at 2 . Heightmap.0.0.flipX=0 If the terrain heightmap needs to be flipped. since L3DT doesn't export the heightmap upside down leave this at 0 . WorldSizeX=3000 WorldSizeZ=3000 Size of the terrain. Since this is a 1024x1024 terrain, set both to 1024 . WorldSizeY=0 Maximum height of the terrain. To get this value, in L3DT go to Operations -> Heightfield -> Change vertical range... . Add the non-negative minimum value to the maximum value. If you get a decimal, you should be safe to round it (i.e. 139 ). disableCaching=1 This prevents the game from caching the heightmap. For testing purposes, leave it at 1 . PageFileFormat=l3dt_tutorial-page-0-0.otc Name of the file that defines the terrain textures. Since we already renamed it earlier, there's no need to change this. MaxPixelError=0 LightmapEnabled=0 SpecularMappingEnabled=1 NormalMappingEnabled=1 Advanced heightmap/texture settings, it's best to leave these at their current values. The finished file: Heightmap.0.0.raw.size=1024 Heightmap.0.0.raw.bpp=2 Heightmap.0.0.flipX=0 WorldSizeX=1024 WorldSizeZ=1024 WorldSizeY=139 disableCaching=1 PageFileFormat=l3dt_tutorial-page-0-0.otc MaxPixelError=0 LightmapEnabled=0 SpecularMappingEnabled=1 NormalMappingEnabled=1 We're ready to export the textures now.","title":"The OTC file"},{"location":"terrain-creation/l3dt-map-making/#exporting-textures","text":"","title":"Exporting textures"},{"location":"terrain-creation/l3dt-map-making/#texture-map","text":"Right click Texture map -> Export layer... Set the \"File format\" to PNG . Just as you did previously, browse to your terrain directory and set the file name (i.e. l3dt_tutorial.png ). Check the Re-size for export box and set your texture size (in this case, 4096x4096 )","title":"Texture map"},{"location":"terrain-creation/l3dt-map-making/#normal-map","text":"Now right click Terrain normals -> Export layer... and repeat the same steps as last time. You should now have two textures in your working directory.","title":"Normal map"},{"location":"terrain-creation/l3dt-map-making/#applying-alpha-mask","text":"To prevent the terrain texture from being overly shiny in-game, you will have to apply an alpha mask to both the texture map and the normal map. To do this, open both textures in GIMP. Go to Layer -> Mask -> Add Layer Mask... Select Black (full transparency) then click Add . Now go to File -> Export As... Change the file extension to .dds then click Export . If you installed the DDS plugin correctly, you should now have a Save as DDS dialog. Set the Compression to BC3 / DXT5 then click OK to export. Repeat the same steps for the normal map texture. Once you're done, you should have two new DDS files in your working directory. You can now delete the two PNG textures we exported earlier as they're no longer needed.","title":"Applying alpha mask"},{"location":"terrain-creation/l3dt-map-making/#the-page-file","text":"Now open l3dt_tutorial-page-0-0.otc . The file will look similar to this: l3dt_tutorial.raw 1 ; worldSize, diffusespecular, normalheight, blendmap, blendmapmode, alpha 4, simple2_asphalt_diffusespecular.dds, simple2_asphalt_diffusespecular.dds l3dt_tutorial.raw The name of your heightmap RAW file. Since we already renamed it earlier, there's no need to change this. 1 The number of texture layers. Since we only have 1 layer, leave it at 1 . 4, simple2_asphalt_diffusespecular.dds, simple2_asphalt_diffusespecular.dds 4 The size of your terrain. It typically is the same as the WorldSizeX/WorldSizeZ values. So in this case, 1024 . simple2_asphalt_diffusespecular.dds, simple2_asphalt_diffusespecular.dds The names of your texture map and normal map. For this terrain, they are named l3dt_tutorial.dds and l3dt_tutorial_normal.dds . The finished file: l3dt_tutorial.raw 1 ; worldSize, diffusespecular, normalheight, blendmap, blendmapmode, alpha 1024, l3dt_tutorial.dds, l3dt_tutorial_normal.dds","title":"The page file"},{"location":"terrain-creation/l3dt-map-making/#the-terrn2-file","text":"The last file we need to edit is the l3dt_tutorial.terrn2 file. It will look similar to this: [General] Name = Template 0.4 (RAW Heightmap) Terrain GeometryConfig = l3dt_tutorial.otc Water=0 #WaterLine=1.0 AmbientColor = 0.93, 0.86, 0.76 StartPosition = 512, 1, 512 #CaelumConfigFile = SandStormCubeMap = tracks/skyboxcol Gravity = -9.81 CategoryID = 129 Version = 1 GUID = 995a989c-28a7-4836-b5fe-bc699b81b97b //TractionMap = l3dt_tutorial-landuse.cfg [Authors] template = CuriousMike [Objects] l3dt_tutorial.tobj= [Scripts] Name = Template 0.4 (RAW Heightmap) Terrain The name of your terrain. In this example, I will name it L3DT Tutorial Terrain V2 . GeometryConfig = l3dt_tutorial.otc The filename of your terrain's main OTC file. Since we already renamed it earlier, there's no need to change this. Water=0 If your map has water, set this to 1 . Otherwise, leave it at 0 . #WaterLine=1.0 If your terrain doesn't have water, skip this step. Otherwise, remove the # from the beginning of the line. To get this value, go back to the Change vertical range... dialog you got the minimum/maximum height values from earlier. The non-negative minimum value is your WaterLine value. For this terrain, it is 40 . Again, you should be safe to round it. AmbientColor = 0.93, 0.86, 0.76 StartPosition = 512, 1, 512 #CaelumConfigFile = SandStormCubeMap = tracks/skyboxcol Gravity = -9.81 CategoryID = 129 Version = 1 These values can currently be left as is. GUID = 995a989c-28a7-4836-b5fe-bc699b81b97b The ID that uniquely identifies your terrain. You can generate one here . //TractionMap = l3dt_tutorial-landuse.cfg The file that defines the different ground types. Since we don't currently have one, leave it commented out. [Authors] template = CuriousMike The authors of the terrain. Just set your username. For example terrain = CuriousMike . [Objects] l3dt_tutorial.tobj= The name of your objects file. Since we already renamed it earlier, there's no need to change this. [Scripts] The AngelScript filename. Since we don't have one, just ignore this.","title":"The Terrn2 file"},{"location":"terrain-creation/l3dt-map-making/#in-game","text":"And finally, zip all your files up and place them into your packs / mods folder. Now launch RoR and load your terrain! If everything went well, your terrain should look almost identical to how it does in L3DT's Sapphire:","title":"In-Game"},{"location":"terrain-creation/l3dt-map-making/#changing-the-spawn-position","text":"When you loaded the terrain, you most likely spawned in the water or on the side of a mountain. To fix this, move RoRBot to where you'd like to spawn at. Then press the h key. This is will log the current position to RoR.log . Now browse to C:\\Users\\%username%\\Documents\\Rigs of Rods 0.4\\logs and open the RoR.log file. Scroll to the bottom of the file. You should find a line similar to this: 22:21:51: Position: 885.289, 113.769, 586.640, 0.0, 0.0, 0.0 Now open your .terrn2 file and find the StartPosition line. StartPosition = 512, 1, 512 Copy the first 3 numbers from the position line, for example: StartPosition = 885.289, 113.769, 586.640 Save the file and launch RoR. You should now spawn in the position you set. Congratulations! You have learned how to get your L3DT terrain in-game! Download the finished terrain here .","title":"Changing the spawn position"},{"location":"terrain-creation/l3dt-map-making/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"terrain-creation/l3dt-map-making/#stream-size-does-not-match-calculated-image-size","text":"Your Heightmap.0.0.raw.size value does not match the size of your exported raw file. Make sure the size you set in the export dialog is the same.","title":"Stream size does not match calculated image size"},{"location":"terrain-creation/l3dt-map-making/#in-game-world-scale-doesnt-match-the-l3dt-terrain","text":"Make sure your WorldSizeX / WorldSizeZ matches the size in L3DT. Also check if you calculated the WorldSizeY value correctly.","title":"In-game world scale doesn't match the L3DT terrain"},{"location":"terrain-creation/l3dt-map-making/#terrain-texture-is-solid-black","text":"Your texture names in your page file don't match the filename.","title":"Terrain texture is solid black"},{"location":"terrain-creation/l3dt-map-making/#terrain-texture-is-shiny","text":"You didn't apply the alpha mask in GIMP correctly.","title":"Terrain texture is shiny"},{"location":"terrain-creation/l3dt-map-making/#ror-crashes-while-loading-the-terrain","text":"Check all your files and make sure you didn't make any syntax errors. You can also check your RoR.log to see where the crash occurs at.","title":"RoR crashes while loading the terrain"},{"location":"terrain-creation/l3dt-map-making/#more-help","text":"If you have a different issue than the one listed here and you're sure you didn't do anything obviously wrong, then please make a thread in the correct subforum or join our Discord server and ask your question in the #content-creation channel.","title":"More help"},{"location":"terrain-creation/object-format/","text":"Object format (.odef) \u00b6 Introduction \u00b6 The .odef format specifies a static object that can be placed on a terrain. These files are placed in the same zip as the object's mesh files. Rigs of Rods will not load the object if the file does not exist! Basic example with a collision mesh: Building.mesh 1, 1, 1 beginmesh mesh BuildingCollision.mesh endmesh end Advanced example file featuring event boxes: hangar.mesh 1, 1, 1 beginmesh mesh hangar.mesh endmesh beginbox boxcoords -23.75, -21.75, -0.2, 2.1, -3.07, -0.19 virtual event shopplane avatar endbox beginbox boxcoords -17, 17, 0, 4.5, -29, 4 virtual event spawnzone direction 0, 90, 0 endbox end The format is described below: The first line specifies the visual mesh to use The second line specifies the scale of it ( x , y , z ) Default: 1,1,1 After that, several sections can follow ( beginbox , beginmesh , playanimation ) The .odef file must be always closed with end If there are no Begin box nor Begin mesh sections, the object will have no collisions. Commands \u00b6 These commands can be called outside or inside a beginbox or beginmesh : setMeshMaterial \u00b6 setMeshMaterial tracks/bigsign/town You can create different materials (red, blue, green skins) for your object and now, you only need to create 3 different .odef files, one for each color. For example you create a file called myRedBuilding.odef and inside you specify setMeshMaterial myRedColor , myRedColor is defined on any .material file you need to create. nocast \u00b6 Disables shadow casting for the object. Useful for skyboxes. Example: Building.mesh 1, 1, 1 beginmesh mesh BuildingCollision.mesh endmesh nocast end Begin box \u00b6 Specifies a box that can be used for collisions or events. boxcoords x, x1, y, y1, z, z1 where the upper near left vertex of the 3D box is ( x , y , z ) and the lower far right vertex of the box is ( x1 , y1 , z1 ). If you are defining a collision box, you don't need any other optional commands, just endbox . optional: virtual : this makes the box to spawn an event. In this case you must also have an event line in this box: optional: event eventname filterevent eventname : the name of the event it should generate. Some predefined values are shopboat , shoptruck , shopplane , shoptrain and spawnzone but you can define a non existing eventname if you want to use with Angelscript. filterevent : on what it should trigger. valid values: avatar , truck , and airplane . optional: direction 0, 90, 0 : this determines the direction of objects spawned in this box optional: camera x, y, z : Coordinates to place the camera. optional: forcecamera x, y, z : Coordinates to place the camera, and force to change to this camera point of view when player enter at the box coords. optional: frictionconfig name-groundmodel.cfg Loads a custom groundmodel config. Use this if you want to use a groundmodel not specified in ground_models.cfg . name-groundmodel.cfg is the name of your groundmodel config file. optional: stdfriction name Where name is either concrete , asphalt , gravel , rock , ice , snow , metal , grass or sand : this will set the type of friction the collision box will do. The physical parameters of these standard friction materials are defined in the configuration file ground_models.cfg . optional: friction adhesion velocity, static friction coef, dynamic friction coef, hydrodynamic coef, Stribeck velocity, alpha, strength, fx_type, [fx_color] : this will set the parameters of the friction the collision box will do. The physical parameters are manually given. endbox must close the box beginbox boxcoords -23.75, -21.75, -0.2, 2.1, -3.07, -0.19 virtual event shopplane avatar endbox Whenever the character (RoRbot) enters the box specifies by boxcoords, a trigger shopplane will be triggered, so the spawn menu will be shown. Begin mesh \u00b6 You can use a existing mesh that RoR collision system will use. beginmesh : this enables you to use meshes for collisions: mesh hangar.mesh : this load the mesh hangar.mesh as a collision mesh. Important: Only use very low polygon meshes, or the simulation will be slowed down drastically! endmesh : closes the actual mesh box You can also use the option stdfriction with this syntax. For example, if you have made a road object in 3D and you want to give it an asphalt friction, give it an odef file like this one: mr_road.mesh 1, 1, 1 beginmesh mesh mr_road.mesh stdfriction asphalt endmesh end Animations \u00b6 If your object has an animation you can play it with this additional line: playanimation speedfactorMin speedfactorMax AnimationName Example from the terrain Fall Run : playanimation 0.5, 0.6, CAT_330c_diging Notes: These objects wont be collide-able, and the animation will loop forever Particles \u00b6 You can add chimneys or other particle effects to your object using this: ;particleSystem scale, x, y, z, particleInstanceName particleScriptName particleSystem 1, 1, 1, 1, myfire1 enhancedFire","title":"Object (odef) file format"},{"location":"terrain-creation/object-format/#object-format-odef","text":"","title":"Object format (.odef)"},{"location":"terrain-creation/object-format/#introduction","text":"The .odef format specifies a static object that can be placed on a terrain. These files are placed in the same zip as the object's mesh files. Rigs of Rods will not load the object if the file does not exist! Basic example with a collision mesh: Building.mesh 1, 1, 1 beginmesh mesh BuildingCollision.mesh endmesh end Advanced example file featuring event boxes: hangar.mesh 1, 1, 1 beginmesh mesh hangar.mesh endmesh beginbox boxcoords -23.75, -21.75, -0.2, 2.1, -3.07, -0.19 virtual event shopplane avatar endbox beginbox boxcoords -17, 17, 0, 4.5, -29, 4 virtual event spawnzone direction 0, 90, 0 endbox end The format is described below: The first line specifies the visual mesh to use The second line specifies the scale of it ( x , y , z ) Default: 1,1,1 After that, several sections can follow ( beginbox , beginmesh , playanimation ) The .odef file must be always closed with end If there are no Begin box nor Begin mesh sections, the object will have no collisions.","title":"Introduction"},{"location":"terrain-creation/object-format/#commands","text":"These commands can be called outside or inside a beginbox or beginmesh :","title":"Commands"},{"location":"terrain-creation/object-format/#setmeshmaterial","text":"setMeshMaterial tracks/bigsign/town You can create different materials (red, blue, green skins) for your object and now, you only need to create 3 different .odef files, one for each color. For example you create a file called myRedBuilding.odef and inside you specify setMeshMaterial myRedColor , myRedColor is defined on any .material file you need to create.","title":"setMeshMaterial"},{"location":"terrain-creation/object-format/#nocast","text":"Disables shadow casting for the object. Useful for skyboxes. Example: Building.mesh 1, 1, 1 beginmesh mesh BuildingCollision.mesh endmesh nocast end","title":"nocast"},{"location":"terrain-creation/object-format/#begin-box","text":"Specifies a box that can be used for collisions or events. boxcoords x, x1, y, y1, z, z1 where the upper near left vertex of the 3D box is ( x , y , z ) and the lower far right vertex of the box is ( x1 , y1 , z1 ). If you are defining a collision box, you don't need any other optional commands, just endbox . optional: virtual : this makes the box to spawn an event. In this case you must also have an event line in this box: optional: event eventname filterevent eventname : the name of the event it should generate. Some predefined values are shopboat , shoptruck , shopplane , shoptrain and spawnzone but you can define a non existing eventname if you want to use with Angelscript. filterevent : on what it should trigger. valid values: avatar , truck , and airplane . optional: direction 0, 90, 0 : this determines the direction of objects spawned in this box optional: camera x, y, z : Coordinates to place the camera. optional: forcecamera x, y, z : Coordinates to place the camera, and force to change to this camera point of view when player enter at the box coords. optional: frictionconfig name-groundmodel.cfg Loads a custom groundmodel config. Use this if you want to use a groundmodel not specified in ground_models.cfg . name-groundmodel.cfg is the name of your groundmodel config file. optional: stdfriction name Where name is either concrete , asphalt , gravel , rock , ice , snow , metal , grass or sand : this will set the type of friction the collision box will do. The physical parameters of these standard friction materials are defined in the configuration file ground_models.cfg . optional: friction adhesion velocity, static friction coef, dynamic friction coef, hydrodynamic coef, Stribeck velocity, alpha, strength, fx_type, [fx_color] : this will set the parameters of the friction the collision box will do. The physical parameters are manually given. endbox must close the box beginbox boxcoords -23.75, -21.75, -0.2, 2.1, -3.07, -0.19 virtual event shopplane avatar endbox Whenever the character (RoRbot) enters the box specifies by boxcoords, a trigger shopplane will be triggered, so the spawn menu will be shown.","title":"Begin box"},{"location":"terrain-creation/object-format/#begin-mesh","text":"You can use a existing mesh that RoR collision system will use. beginmesh : this enables you to use meshes for collisions: mesh hangar.mesh : this load the mesh hangar.mesh as a collision mesh. Important: Only use very low polygon meshes, or the simulation will be slowed down drastically! endmesh : closes the actual mesh box You can also use the option stdfriction with this syntax. For example, if you have made a road object in 3D and you want to give it an asphalt friction, give it an odef file like this one: mr_road.mesh 1, 1, 1 beginmesh mesh mr_road.mesh stdfriction asphalt endmesh end","title":"Begin mesh"},{"location":"terrain-creation/object-format/#animations","text":"If your object has an animation you can play it with this additional line: playanimation speedfactorMin speedfactorMax AnimationName Example from the terrain Fall Run : playanimation 0.5, 0.6, CAT_330c_diging Notes: These objects wont be collide-able, and the animation will loop forever","title":"Animations"},{"location":"terrain-creation/object-format/#particles","text":"You can add chimneys or other particle effects to your object using this: ;particleSystem scale, x, y, z, particleInstanceName particleScriptName particleSystem 1, 1, 1, 1, myfire1 enhancedFire","title":"Particles"},{"location":"terrain-creation/old-terrn-subsystem/","text":"Old Terrain System (pre 0.4) \u00b6 This subsystem is obsolete since RoR version 0.4.0. It was based upon Ogre engine's TerrainManager component, which was obsoleted, and thus we couldn't rely on it anymore. File type overview \u00b6 .terrn - You define terrain name, associated .cfg name, spawn point position, ambient colour and various object positions. .cfg - You define Terrain Texture, RAW Heightmap file, World Sizes and Height, Tiles the map get divided into, Terrain LOD and additional stuff. .RAW - A greyscale image which is the heightmap of the terrain. It is a RAW 8/16 bit DEM (digital elevation map). Its dimensions MUST BE squared sized and with size (2^n) + 1, in example 1025x1025. As a consequence, the total file size must be 2,101,250 bytes (2x1025x1025). Other elevation sized maps could be: 129x129, 513x513, 2049x2049 .os - Caelum Config .png/./jpg/.dds - Terrain Texture, typically a large bitmap (for example a 1024x1024 BMP) that is projected onto the terrain. This texture must include shading and shadowing (the terrain is not shaded by RoR). The light source (the sun) heading is -60 degree and altitude of 25 degree. .png/./jpg/.dds - A miniature map: a 256x256 image (that can be the reduction of the texture file) used as a map in RoR. The .terrn format \u00b6 Basics \u00b6 The .terrn file is a text file containing the following information, in this precise order: Name of the terrain: it must be the first line of the file! Name of the .cfg file associated to the terrain (must be the second) (optional) If you want water in the terrain, put the character 'w' followed by the water height relative to the lowest point of your terrain. For example: (optional) For Caelum lighted terrains, add a line here with the text \"Caelum\". A Caelum-lighted terrain is a terrain that has 12 extra textures to have the mountain shadows match with the sun position. Sky color: red, green, blue components (between 0 and 1) Spawning positions: a set of two or three X,Y,Z coordinates. The first coordinate is the truck spawn position (when buying a new truck) The second is the initial camera spawn position (optional) The third is the initial character spawn position. (optional) sandstormcubemap Sky/EarlyMorning cube map used on this terrain. Example at 0.36 version in aspen. A set of lines, each line positioning an object or a truck on the terrain. At this stage, you can put comments by starting the line with \"//\". The content of the line is: X, Y, Z, RX, RY, RZ, object_name The values X,Y,Z are the position of the object RX,RY,RZ the rotation of the object The object_name is the name of an .odef file, but without its file extension You can add more optional parameters to add labels to the map: The first extra parameter is a qualifier (village, hotel, observatory, etc.) The second is the place name. If you want to put a truck or load in the map, use the keyword \"truck\" or \"load\" in place of the object_name, and put the truck or load name after (with the extension). The keyword \"end\" NOTE: If you add truckshop, hangar, marina or any building you can buy vehicles, the section 8-2 is required! Examples: A terrn file in its simplest form: Angle angle.cfg 0.93, 0.86, 0.76 509,6,680, 509,6,680 end A more complex terrn file, with water and a few objects (using 8-2 section): North St Helens nhelens.cfg w 33 0.93, 0.86, 0.76 1169.0,35,948.75, 1220,36,980, 1165.5, 35, 942 //a truck 1190, 35, 930, 0, 0, 0, truck wrecker.truck //a load 1130, 35, 910, 0, 0, 0, load acontainer.load //an object 1180, 34.15, 950, 0, 20, 0, truckshop shop Rig-a-Deal 1220, 34.15, 980, 0, 20, 0, truckshop shop Rig-a-Deal-2 1280, 34.15, 960, 0, 20, 0, load-spawner sale spawn_Zone_1 1310, 34.15, 950, 0, 20, 0, load-spawner sale spawn_Zone_2 1390, 34.15, 950, 0, 20, 0, myhangar2 repair Repair_Zone_1 end Author information \u00b6 Append something like this inside your file: //author terrain 4 pricorde //author objects 4 pricorde Do not forget the '//' ! Grass \u00b6 This enables you to add grass to the terrain. The arguments are (all on one line!): Keyword Description Recommended Values grass Must precede other grass-related keywords Grass Range Determines grass visibility range in meters 80 Sway Speed The rate at which the grass sways in simulated wind 0.5 Sway Length Length of sway displacement 0.05 Sway Distribution How much of the wind wave is distributed 10 Density Density of grass distribution. Maximum of 3.5 0.3 MinX/Y MaxX/Y Determine size of grass: Fade Type Adjusts method of transition (via distance): 0 - FADETECH_GROW = Grass will grow out of the ground, looks good with grass that has ground color 1 - FADETECH_ALPHAGROW = Like 0, but with alpha blending 2 - FADETECH_ALPHA = Alpha blends in/out 0 Min-Y Max-Y Minimum/maximum appearance level. 0 for no minimum/maximum. Example: 0, 10 for seagrass under the water level 10 or 10, 0 for grass above the sea level (if the sea level is 10) Material Material file for grass appearance Listed in /data/paged/grass.material Color Map Determines grass color. Grass image must be gray scale! Use none to disable Use terrain texture to match ground color Density Map A gray scale image that determines density. Darker shades refer to less grass, while white refers to most grass. None to disable. For example 7 grass types plus sea grass (water level is 10): // format: grass range, SwaySpeed, SwayLength, SwayDistribution, Density, minx, miny, maxx, maxy, fadetype, minY, maxY, material colormap densitymap grass 200, 0.5, 0.05, 10, 0.1, 0.2, 0.2, 1, 1, 1, 0, 9, seaweed none none grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass1 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass2 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass3 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass4 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass5 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass6 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 3.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass7 aspen.jpg aspen_grass_density.png Trees \u00b6 //trees yawFrom, yawTo, scaleFrom, scaleTo, highDensity, distance1, distance2, meshName colormap densitymap trees 0, 360, 0.1, 0.12, 2, 60, 3000, fir05_30.mesh aspen-test.dds aspen_grass_density2.png trees 0, 360, 1, 3, 1, 60, 3000, tree.mesh aspen-test.dds aspen_grass_density2.png trees 0, 360, 1, 2, 1, 60, 3000, tree2.mesh aspen-test.dds aspen_grass_density2.png trees 0, 360, 0.1, 0.13, 1, 60, 3000, fir06_30.mesh aspen-test.dds aspen_grass_density2.png trees 0, 360, 0.1, 0.13, 1, 60, 3000, fir14_25.mesh aspen-test.dds aspen_grass_density2.png trees 0, 360, 0.1, 0.2, 3, 60, 3000, plant1.mesh aspen-test.dds aspen_grass_density.png trees 0, 360, 0.1, 0.2, 3, 60, 3000, plant2.mesh aspen-test.dds aspen_grass_density2.png arguments: yawFrom-yawTo: that is the range which the game will choose to randomly rotate the trees scaleFrom-scaleTo: scaling range that the game uses randomly. 0=0%, 1=100% highDensity : density factor: 0=0, 1=not much, 2=more, etc distance1: distance to which the game should use the mesh instead of the billboard. This is performance critical, use low values if possible! distance2: distance to which the billboard should be drawn (max sight range) meshName : the mesh to use colorMap : used to colorize the mesh. if your mesh is too dark check the colormap! Can be set to none to disable it. densityMap: texture that determines where and how much trees are used. white = 100%, black = 0% since 0.38.62 it has two more arguments: grid spacing (0=default): negative number: set the detail level of the used grid positive number: use new tree distribution scheme: one tree in the center of a grid cell collision mesh: .mesh that will be used for the collision engine //trees yawFrom, yawTo, scaleFrom, scaleTo, highDensity, distance1, distance2, meshName colormap densitymap gridspacing collmesh trees 0, 360, 0.1, 0.2, 3, 60, 3000, plant1.mesh aspen-test.dds aspen_grass_density.png 0 plant1-col.mesh trees 0, 360, 0.1, 0.2, 3, 60, 3000, plant2.mesh aspen-test.dds aspen_grass_density2.png 0 plant2-col.mesh Races \u00b6 It's no longer possible to add races to your terrain using the terrn file. You'll need a separate script file. More information can be found here: Creating Races . Missions \u00b6 Missions use triggers which can generate events with LUA . For example: 1829.785156, 13.413086, 2222.167969, 0.000000, 0.000000, 0.000000, persontrigger trigger mission_aspen_1_start 1833.785156, 13.413086, 2222.167969, 0.000000, 0.000000, 0.000000, trucktrigger trigger mission_aspen_1_trailer 2197.2, 16.8624, 1946.06, 0, -100.381, 0, planetrigger trigger mission_aspen_airtutorial_trigger1 There are three triggers: persontrigger trucktrigger planetrigger The Format of missions is: (trigger-type) trigger mission_ (missionname) _ (triggername) missionname : a lua file must exists for this mission: /data/mission_ (missionname) .lua triggername : this name can be used inside LUA to differentiate the triggers Procedural Roads \u00b6 begin_procedural_roads //position x,y,z rotation rx,ry,rz, width, border width, border height, type 0,0,0, 0,0,0, 10.0, 0, 0, flat 0,0,0, 0,0,0, 10.0, 0.25, 1.0, both end_procedural_roads valid types: flat left - Only left border right - Only right border both - Both borders bridge bridge_no_pillars monorail (0.35+) monorail2 (0.35+) You can view some examples of various settings . Mpspawn \u00b6 Mpspawn is used for spawning boats and airplanes on multiplayer. The syntax is mpspawn airplane 2192.29 16.3357 1963.89 0 260 0 mpspawn boat 1741.8 5.58322 2291.23 0 68,091 0 The line starts with \"mpspawn airplane\" (for airplanes) or \"mpspawn boat\" (for boats) The first three numbers are the X, Y and Z coordinates of the spawning point. The next three numbers are X rotation, Y rotation and Z rotation. If these lines do not exist in the terrn code, the game will eventually crash or the vehicle will spawn at the standard spawning position Caelum Sky \u00b6 you can select which sky to use by adding a one-liner: caelumconfig some_sky the default is \"ror_default_sky\". the sky must be defined in a .os file. for example to use some_sky create a file \"my_terrain_sky.os\" and put beside your other terrain files and put the following into it: caelum_sky_system some_sky { // J2000 julian_day 2451545.0 time_scale 1 point_starfield { magnitude_scale 2.51189 mag0_pixel_size 16 min_pixel_size 4 max_pixel_size 6 } manage_ambient_light true minimum_ambient_light 0.1 0.1 0.3 manage_scene_fog yes ground_fog_density_multiplier 0.0015 scene_fog_density_multiplier 0.0015 sun { ambient_multiplier 1 0.5 0.5 diffuse_multiplier 3 3 2.7 specular_multiplier 5 5 5 auto_disable_threshold 0.05 auto_disable true } moon { ambient_multiplier 1 0.2 0.2 diffuse_multiplier 1 1 .9 specular_multiplier 1 1 1 auto_disable_threshold 0.05 auto_disable true } // Off by default /* depth_composer { debug_depth_render on haze_enabled no ground_fog_enabled no ground_fog_vertical_decay 0.06 ground_fog_base_level 0 } */ sky_dome { haze_enabled yes sky_gradients_image EarthClearSky2.png atmosphere_depth_image AtmosphereDepth.png } cloud_system { cloud_layer { height 3000 coverage 0.9 } } } Gravity \u00b6 You can change the gravity in your map by adding : gravity -1.622 It will set the gravity of your map to the Moon one. 0 means no gravity (weightlessness). Positive value will repulse(push) you from the ground. Some values : Earth gravity : -9.81 (default value if not precised) Moon gravity : -1.622 Mars gravity : -3.711 Pluto gravity : -0.665 Collision limits \u00b6 if you have lots of objects, you might want to increase the collision buffer size so everything stays contractible. The default is 100000. collision-tris 100000 Caution : use this before loading any objects (in the top of the file) Caution2 : the more you specify here, the more memory will be required to run your map, which can be a reason why it stops working for some users.","title":"Old (0.3x) terrain file format"},{"location":"terrain-creation/old-terrn-subsystem/#old-terrain-system-pre-04","text":"This subsystem is obsolete since RoR version 0.4.0. It was based upon Ogre engine's TerrainManager component, which was obsoleted, and thus we couldn't rely on it anymore.","title":"Old Terrain System (pre 0.4)"},{"location":"terrain-creation/old-terrn-subsystem/#file-type-overview","text":".terrn - You define terrain name, associated .cfg name, spawn point position, ambient colour and various object positions. .cfg - You define Terrain Texture, RAW Heightmap file, World Sizes and Height, Tiles the map get divided into, Terrain LOD and additional stuff. .RAW - A greyscale image which is the heightmap of the terrain. It is a RAW 8/16 bit DEM (digital elevation map). Its dimensions MUST BE squared sized and with size (2^n) + 1, in example 1025x1025. As a consequence, the total file size must be 2,101,250 bytes (2x1025x1025). Other elevation sized maps could be: 129x129, 513x513, 2049x2049 .os - Caelum Config .png/./jpg/.dds - Terrain Texture, typically a large bitmap (for example a 1024x1024 BMP) that is projected onto the terrain. This texture must include shading and shadowing (the terrain is not shaded by RoR). The light source (the sun) heading is -60 degree and altitude of 25 degree. .png/./jpg/.dds - A miniature map: a 256x256 image (that can be the reduction of the texture file) used as a map in RoR.","title":"File type overview"},{"location":"terrain-creation/old-terrn-subsystem/#the-terrn-format","text":"","title":"The .terrn format"},{"location":"terrain-creation/old-terrn-subsystem/#basics","text":"The .terrn file is a text file containing the following information, in this precise order: Name of the terrain: it must be the first line of the file! Name of the .cfg file associated to the terrain (must be the second) (optional) If you want water in the terrain, put the character 'w' followed by the water height relative to the lowest point of your terrain. For example: (optional) For Caelum lighted terrains, add a line here with the text \"Caelum\". A Caelum-lighted terrain is a terrain that has 12 extra textures to have the mountain shadows match with the sun position. Sky color: red, green, blue components (between 0 and 1) Spawning positions: a set of two or three X,Y,Z coordinates. The first coordinate is the truck spawn position (when buying a new truck) The second is the initial camera spawn position (optional) The third is the initial character spawn position. (optional) sandstormcubemap Sky/EarlyMorning cube map used on this terrain. Example at 0.36 version in aspen. A set of lines, each line positioning an object or a truck on the terrain. At this stage, you can put comments by starting the line with \"//\". The content of the line is: X, Y, Z, RX, RY, RZ, object_name The values X,Y,Z are the position of the object RX,RY,RZ the rotation of the object The object_name is the name of an .odef file, but without its file extension You can add more optional parameters to add labels to the map: The first extra parameter is a qualifier (village, hotel, observatory, etc.) The second is the place name. If you want to put a truck or load in the map, use the keyword \"truck\" or \"load\" in place of the object_name, and put the truck or load name after (with the extension). The keyword \"end\" NOTE: If you add truckshop, hangar, marina or any building you can buy vehicles, the section 8-2 is required! Examples: A terrn file in its simplest form: Angle angle.cfg 0.93, 0.86, 0.76 509,6,680, 509,6,680 end A more complex terrn file, with water and a few objects (using 8-2 section): North St Helens nhelens.cfg w 33 0.93, 0.86, 0.76 1169.0,35,948.75, 1220,36,980, 1165.5, 35, 942 //a truck 1190, 35, 930, 0, 0, 0, truck wrecker.truck //a load 1130, 35, 910, 0, 0, 0, load acontainer.load //an object 1180, 34.15, 950, 0, 20, 0, truckshop shop Rig-a-Deal 1220, 34.15, 980, 0, 20, 0, truckshop shop Rig-a-Deal-2 1280, 34.15, 960, 0, 20, 0, load-spawner sale spawn_Zone_1 1310, 34.15, 950, 0, 20, 0, load-spawner sale spawn_Zone_2 1390, 34.15, 950, 0, 20, 0, myhangar2 repair Repair_Zone_1 end","title":"Basics"},{"location":"terrain-creation/old-terrn-subsystem/#author-information","text":"Append something like this inside your file: //author terrain 4 pricorde //author objects 4 pricorde Do not forget the '//' !","title":"Author information"},{"location":"terrain-creation/old-terrn-subsystem/#grass","text":"This enables you to add grass to the terrain. The arguments are (all on one line!): Keyword Description Recommended Values grass Must precede other grass-related keywords Grass Range Determines grass visibility range in meters 80 Sway Speed The rate at which the grass sways in simulated wind 0.5 Sway Length Length of sway displacement 0.05 Sway Distribution How much of the wind wave is distributed 10 Density Density of grass distribution. Maximum of 3.5 0.3 MinX/Y MaxX/Y Determine size of grass: Fade Type Adjusts method of transition (via distance): 0 - FADETECH_GROW = Grass will grow out of the ground, looks good with grass that has ground color 1 - FADETECH_ALPHAGROW = Like 0, but with alpha blending 2 - FADETECH_ALPHA = Alpha blends in/out 0 Min-Y Max-Y Minimum/maximum appearance level. 0 for no minimum/maximum. Example: 0, 10 for seagrass under the water level 10 or 10, 0 for grass above the sea level (if the sea level is 10) Material Material file for grass appearance Listed in /data/paged/grass.material Color Map Determines grass color. Grass image must be gray scale! Use none to disable Use terrain texture to match ground color Density Map A gray scale image that determines density. Darker shades refer to less grass, while white refers to most grass. None to disable. For example 7 grass types plus sea grass (water level is 10): // format: grass range, SwaySpeed, SwayLength, SwayDistribution, Density, minx, miny, maxx, maxy, fadetype, minY, maxY, material colormap densitymap grass 200, 0.5, 0.05, 10, 0.1, 0.2, 0.2, 1, 1, 1, 0, 9, seaweed none none grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass1 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass2 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass3 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass4 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass5 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 0.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass6 aspen.jpg aspen_grass_density.png grass 200, 0.5, 0.05, 10, 3.3, 0.2, 0.2, 1, 1, 1, 10, 0, grass7 aspen.jpg aspen_grass_density.png","title":"Grass"},{"location":"terrain-creation/old-terrn-subsystem/#trees","text":"//trees yawFrom, yawTo, scaleFrom, scaleTo, highDensity, distance1, distance2, meshName colormap densitymap trees 0, 360, 0.1, 0.12, 2, 60, 3000, fir05_30.mesh aspen-test.dds aspen_grass_density2.png trees 0, 360, 1, 3, 1, 60, 3000, tree.mesh aspen-test.dds aspen_grass_density2.png trees 0, 360, 1, 2, 1, 60, 3000, tree2.mesh aspen-test.dds aspen_grass_density2.png trees 0, 360, 0.1, 0.13, 1, 60, 3000, fir06_30.mesh aspen-test.dds aspen_grass_density2.png trees 0, 360, 0.1, 0.13, 1, 60, 3000, fir14_25.mesh aspen-test.dds aspen_grass_density2.png trees 0, 360, 0.1, 0.2, 3, 60, 3000, plant1.mesh aspen-test.dds aspen_grass_density.png trees 0, 360, 0.1, 0.2, 3, 60, 3000, plant2.mesh aspen-test.dds aspen_grass_density2.png arguments: yawFrom-yawTo: that is the range which the game will choose to randomly rotate the trees scaleFrom-scaleTo: scaling range that the game uses randomly. 0=0%, 1=100% highDensity : density factor: 0=0, 1=not much, 2=more, etc distance1: distance to which the game should use the mesh instead of the billboard. This is performance critical, use low values if possible! distance2: distance to which the billboard should be drawn (max sight range) meshName : the mesh to use colorMap : used to colorize the mesh. if your mesh is too dark check the colormap! Can be set to none to disable it. densityMap: texture that determines where and how much trees are used. white = 100%, black = 0% since 0.38.62 it has two more arguments: grid spacing (0=default): negative number: set the detail level of the used grid positive number: use new tree distribution scheme: one tree in the center of a grid cell collision mesh: .mesh that will be used for the collision engine //trees yawFrom, yawTo, scaleFrom, scaleTo, highDensity, distance1, distance2, meshName colormap densitymap gridspacing collmesh trees 0, 360, 0.1, 0.2, 3, 60, 3000, plant1.mesh aspen-test.dds aspen_grass_density.png 0 plant1-col.mesh trees 0, 360, 0.1, 0.2, 3, 60, 3000, plant2.mesh aspen-test.dds aspen_grass_density2.png 0 plant2-col.mesh","title":"Trees"},{"location":"terrain-creation/old-terrn-subsystem/#races","text":"It's no longer possible to add races to your terrain using the terrn file. You'll need a separate script file. More information can be found here: Creating Races .","title":"Races"},{"location":"terrain-creation/old-terrn-subsystem/#missions","text":"Missions use triggers which can generate events with LUA . For example: 1829.785156, 13.413086, 2222.167969, 0.000000, 0.000000, 0.000000, persontrigger trigger mission_aspen_1_start 1833.785156, 13.413086, 2222.167969, 0.000000, 0.000000, 0.000000, trucktrigger trigger mission_aspen_1_trailer 2197.2, 16.8624, 1946.06, 0, -100.381, 0, planetrigger trigger mission_aspen_airtutorial_trigger1 There are three triggers: persontrigger trucktrigger planetrigger The Format of missions is: (trigger-type) trigger mission_ (missionname) _ (triggername) missionname : a lua file must exists for this mission: /data/mission_ (missionname) .lua triggername : this name can be used inside LUA to differentiate the triggers","title":"Missions"},{"location":"terrain-creation/old-terrn-subsystem/#procedural-roads","text":"begin_procedural_roads //position x,y,z rotation rx,ry,rz, width, border width, border height, type 0,0,0, 0,0,0, 10.0, 0, 0, flat 0,0,0, 0,0,0, 10.0, 0.25, 1.0, both end_procedural_roads valid types: flat left - Only left border right - Only right border both - Both borders bridge bridge_no_pillars monorail (0.35+) monorail2 (0.35+) You can view some examples of various settings .","title":"Procedural Roads"},{"location":"terrain-creation/old-terrn-subsystem/#mpspawn","text":"Mpspawn is used for spawning boats and airplanes on multiplayer. The syntax is mpspawn airplane 2192.29 16.3357 1963.89 0 260 0 mpspawn boat 1741.8 5.58322 2291.23 0 68,091 0 The line starts with \"mpspawn airplane\" (for airplanes) or \"mpspawn boat\" (for boats) The first three numbers are the X, Y and Z coordinates of the spawning point. The next three numbers are X rotation, Y rotation and Z rotation. If these lines do not exist in the terrn code, the game will eventually crash or the vehicle will spawn at the standard spawning position","title":"Mpspawn"},{"location":"terrain-creation/old-terrn-subsystem/#caelum-sky","text":"you can select which sky to use by adding a one-liner: caelumconfig some_sky the default is \"ror_default_sky\". the sky must be defined in a .os file. for example to use some_sky create a file \"my_terrain_sky.os\" and put beside your other terrain files and put the following into it: caelum_sky_system some_sky { // J2000 julian_day 2451545.0 time_scale 1 point_starfield { magnitude_scale 2.51189 mag0_pixel_size 16 min_pixel_size 4 max_pixel_size 6 } manage_ambient_light true minimum_ambient_light 0.1 0.1 0.3 manage_scene_fog yes ground_fog_density_multiplier 0.0015 scene_fog_density_multiplier 0.0015 sun { ambient_multiplier 1 0.5 0.5 diffuse_multiplier 3 3 2.7 specular_multiplier 5 5 5 auto_disable_threshold 0.05 auto_disable true } moon { ambient_multiplier 1 0.2 0.2 diffuse_multiplier 1 1 .9 specular_multiplier 1 1 1 auto_disable_threshold 0.05 auto_disable true } // Off by default /* depth_composer { debug_depth_render on haze_enabled no ground_fog_enabled no ground_fog_vertical_decay 0.06 ground_fog_base_level 0 } */ sky_dome { haze_enabled yes sky_gradients_image EarthClearSky2.png atmosphere_depth_image AtmosphereDepth.png } cloud_system { cloud_layer { height 3000 coverage 0.9 } } }","title":"Caelum Sky"},{"location":"terrain-creation/old-terrn-subsystem/#gravity","text":"You can change the gravity in your map by adding : gravity -1.622 It will set the gravity of your map to the Moon one. 0 means no gravity (weightlessness). Positive value will repulse(push) you from the ground. Some values : Earth gravity : -9.81 (default value if not precised) Moon gravity : -1.622 Mars gravity : -3.711 Pluto gravity : -0.665","title":"Gravity"},{"location":"terrain-creation/old-terrn-subsystem/#collision-limits","text":"if you have lots of objects, you might want to increase the collision buffer size so everything stays contractible. The default is 100000. collision-tris 100000 Caution : use this before loading any objects (in the top of the file) Caution2 : the more you specify here, the more memory will be required to run your map, which can be a reason why it stops working for some users.","title":"Collision limits"},{"location":"terrain-creation/race-generator/","text":"Race script generator \u00b6 body, fieldset { min-width: 400px; } @media (prefers-color-scheme: light) { .info { color: #3F3F3F; /*font-size: x-small;*/ } .bigButton { width: 200px; height: 30px; font-weight: bold; background: white; } .smallButton { background: white; } .smallNumberField { width: 50px; background: white; } .shortTextField { width: 150px; background: white; } .longTextField { width: 428px; background: white; } .inputBox { background-color: white; } fieldset { -webkit-border-radius: 10px; -moz-border-radius: 10px; border-radius: 10px; background-color: #E5E5E5; } } @media (prefers-color-scheme: dark) { .info { color: #C1C1C1; /*font-size: x-small;*/ } .bigButton { width: 200px; height: 30px; font-weight: bold; background: #191919; } .smallButton { background: #191919; } .smallNumberField { width: 50px; background: #191919; } .shortTextField { width: 150px; background: #191919; } .longTextField { width: 428px; background: #191919; } .inputBox { background-color: #191919; } fieldset { -webkit-border-radius: 10px; -moz-border-radius: 10px; border-radius: 10px; background-color: #333; } } label { display: inline-table; } .intro { font-style: italic; } .scriptResult { width: 100%; height: 300px; } .checkpointsInputField { width: 100%; height: 300px; #vertical-align: top; } .closeIcon { float: right; cursor: pointer; text-decoration: underline; color: red; } #errorMessageField { margin-left: 20px; } legend { font-weight: bold; } var free_race = 0; var races = new Array(); var free_checkpoint = 0; var checkpointFieldFocussed = false; var myScriptFile = new scriptFile(); var lastAbortMessage = '[noMessage]'; var abortMessageHandlers = new Array(); var free_abortMessageHandler = 0; function scriptFile() { this.errormsg = \"\"; this.errors = 0; this.lapSelections = { 'No laps (the first checkpoint will be the start line and the last checkpoint will be the finish line)': 'races.LAPS_NoLaps', '1 lap (the first checkpoint will be both the start and finish line)': 'races.LAPS_One', '2 laps': '2', '3 laps': '3', '4 laps': '4', '5 laps': '5', '6 laps': '6', '7 laps': '7', '8 laps': '8', '9 laps': '9', 'Never ending race (unlimited amount of laps)': 'races.LAPS_Unlimited', 'other...': '[other]' }; this.scriptSections = { 'main': '', 'general': '', 'RaceStart': '', 'PenaltyEvent': '' } this.generateRace = function (id) { var r; r = this.getRaceData(id); if (r < 0) return; r = this.buildRace(id); if (r < 0) return; return 1; } this.getRaceData = function (id) { // NAME { // get name races[id].name = document.getElementById(\"race_\" + id + \"_raceName\").value; // trim the name races[id].name = races[id].name.replace(/^\\s+|\\s+$/g, ''); // check the name if (races[id].name == \"\") { this.errormsg += fatalError(\"Critical error detected in race (\" + id + \"): No name set, cannot build race (race ignored).\"); ++this.errors; return -1; } } // LAPS { // get the amount of laps if (document.getElementById(\"race_\" + id + \"_laps\").value in this.lapSelections) races[id].laps = this.lapSelections[document.getElementById(\"race_\" + id + \"_laps\").value]; else { this.errormsg += fatalError(\"Critical error detected in race \" + races[id].name + \" (\" + id + \"): Unhandled amount of laps (race ignored).\"); ++this.errors; return -2; } // if 'other...' is selected, then we'll need to get the specified value if (races[id].laps == '[other]') { races[id].laps = parseInt(document.getElementById(\"race_\" + id + \"_lapsOther\").value); if (isNaN(races[id].laps)) { this.errormsg += fatalError(\"Critical error detected in race \" + races[id].name + \" (\" + id + \"): No amount of laps set (race ignored).\"); ++this.errors; return -3; } } } // VERSION races[id].version = document.getElementById(\"race_\" + id + \"_version\").value.replace(/^\\s+|\\s+$/g, ''); // DEFAULT CHECKPOINT OBJECTS { // Get the default checkpoint objects races[id].chpObjects['start'] = document.getElementById(\"race_\" + id + \"_defaultStart\").value.replace(/^\\s+|\\s+$/g, ''); races[id].chpObjects['chp'] = document.getElementById(\"race_\" + id + \"_defaultCheckpoint\").value.replace(/^\\s+|\\s+$/g, ''); races[id].chpObjects['finish'] = document.getElementById(\"race_\" + id + \"_defaultFinish\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty objects if (races[id].chpObjects['start'] == '' || races[id].chpObjects['start'] == '[default]') races[id].chpObjects['start'] = \"chp-start\"; if (races[id].chpObjects['chp'] == '' || races[id].chpObjects['chp'] == '[default]') races[id].chpObjects['chp'] = \"chp-checkpoint\"; if (races[id].chpObjects['finish'] == '' || races[id].chpObjects['finish'] == '[default]') races[id].chpObjects['finish'] = \"chp-start\"; } // CHECKPOINTS { // get checkpoints var free_checkpoint = 0; var chps = document.getElementById(\"race_\" + id + \"_checkpoints\").value; chps = chps.split(/\\r?\\n/); for (var i in chps) { // trim the string var line = chps[i].replace(/^\\s+|\\s+$/g, ''); // Ignore comments and empty lines if (line == \"\" || line[0] == ';' || line[0] == '/') continue; // Split the line on commas var lineParts = line.split(','); // Length must at least be 6 if (lineParts.length < 6) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: not enough parameters)\"; this.errormsg += normalError(\"Syntax error detected in race \" + races[id].name + \" (\" + id + \") at line \" + (parseInt(i) + 1) + \" of the checkpoints field (not enough parameters, line ignored).\"); ++this.errors; continue; } // check if the first 6 parts are numbers var problem = false; for (var k = 0; k < 6; ++k) { if (isNaN(parseFloat(lineParts[k]))) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: parameter\" + (parseInt(k) + 1) + \")\"; this.errormsg += normalError(\"Syntax error detected in race \" + races[id].name + \" (\" + id + \") at line \" + (parseInt(i) + 1) + \" of the checkpoints field (line ignored).\"); ++this.errors; problem = true; break; } } if (problem) continue; // assign the numbers to the checkpoint variable races[id].checkpoints[free_checkpoint] = { 'posx': parseFloat(lineParts[0]).toString(), 'posy': parseFloat(lineParts[1]).toString(), 'posz': parseFloat(lineParts[2]).toString(), 'rotx': parseFloat(lineParts[3]).toString(), 'roty': parseFloat(lineParts[4]).toString(), 'rotz': parseFloat(lineParts[5]).toString(), 'cobj': '[default]' } // Allways add commas for (var k in races[id].checkpoints[free_checkpoint]) { if (k != 'cobj' && k != 'cmsg_handler' && races[id].checkpoints[free_checkpoint][k].search(/\\./) < 0) races[id].checkpoints[free_checkpoint][k] += \".0\"; } // handle the optional object if (lineParts.length > 6) { var tmpArray = lineParts[6].replace(/^\\s+|\\s+$/g, '').split(' '); if (tmpArray.length > 0) races[id].checkpoints[free_checkpoint]['cobj'] = tmpArray[0]; } // Fix empty objects if (races[id].checkpoints[free_checkpoint]['cobj'] == '') { races[id].checkpoints[free_checkpoint]['cobj'] = '[default]'; } ++free_checkpoint; } // Put the checkpointlist in the textarea again chps = chps.join('\\r\\n'); document.getElementById(\"race_\" + id + \"_checkpoints\").value = chps; // We need at least 2 checkpoints if (free_checkpoint < 2) { this.errormsg += fatalError(\"Critical error detected in race \" + races[id].name + \" (\" + id + \"): Not enough checkpoints (2 required, race ignored).\"); ++this.errors; return -4; } // Replace all default objects by the correct objects for (var i in races[id].checkpoints) { if (races[id].checkpoints[i]['cobj'] == '[default]') { if (i == 0) races[id].checkpoints[i]['cobj'] = races[id].chpObjects['start']; else if ((i == (free_checkpoint - 1)) && (races[id].laps == 'races.LAPS_NoLaps')) races[id].checkpoints[i]['cobj'] = races[id].chpObjects['finish']; else races[id].checkpoints[i]['cobj'] = races[id].chpObjects['chp']; } } } // DEFAULT ABORT OBJECTS { // Get the default checkpoint objects races[id].abortObject = document.getElementById(\"race_\" + id + \"_defaultAbort\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty objects if (races[id].abortObject == '' || races[id].abortObject == '[default]') races[id].abortObject = \"trucktrigger\"; } // DEFAULT ABORT MESSAGE { // Get the default abort message var defaultAbortMessage = document.getElementById(\"race_\" + id + \"_abortMessage\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty messages if (defaultAbortMessage == '' || defaultAbortMessage == '[default]') defaultAbortMessage = \"[noMessage]\"; } // ABORT POINTS { // get race abort points var free_raceAbort = 0; var chps = document.getElementById(\"race_\" + id + \"_raceAbort\").value; chps = chps.split(/\\r?\\n/); var message = defaultAbortMessage; var abortMessageHander = -1; for (var k in abortMessageHandlers) { if (abortMessageHandlers[k] == defaultAbortMessage) abortMessageHander = k; } if (abortMessageHander == -1) { abortMessageHandlers[free_abortMessageHandler] = defaultAbortMessage; abortMessageHander = free_abortMessageHandler; ++free_abortMessageHandler; } for (var i in chps) { // trim the string var line = chps[i].replace(/^\\s+|\\s+$/g, ''); // Ignore comments and empty lines if (line == \"\" || line[0] == ';' || line[0] == '/') continue; // check for the message variable if (line.substr(0, 7) == 'MESSAGE') { var msg = line.substr(7); msg = msg.replace(/^\\s+/g, ''); if (msg[0] != '=') { this.errormsg += normalError(\"Syntax error detected in race \" + races[id].name + \" (\" + id + \") at line \" + (parseInt(i) + 1) + \" of the race abort points field (expected '=' after 'MESSAGE', line ignored).\"); ++this.errors; continue; } var msg = msg.substr(1); msg = msg.replace(/^\\s+/g, ''); if (msg == '') msg = '[noMessage]'; else if (msg == '[default]') msg = defaultAbortMessage; abortMessageHander = -1; for (var k in abortMessageHandlers) { if (abortMessageHandlers[k] == msg) { abortMessageHander = k; break; } } if (abortMessageHander == -1) { abortMessageHandlers[free_abortMessageHandler] = msg; abortMessageHander = free_abortMessageHandler; ++free_abortMessageHandler; } continue; } // Split the line on commas var lineParts = line.split(','); // Length must at least be 6 if (lineParts.length < 6) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: not enough parameters)\"; this.errormsg += normalError(\"Syntax error detected in race \" + races[id].name + \" (\" + id + \") at line \" + (parseInt(i) + 1) + \" of the race abort points field (not enough parameters, line ignored).\"); ++this.errors; continue; } // check if the first 6 parts are numbers var problem = false; for (var k = 0; k < 6; ++k) { if (isNaN(parseFloat(lineParts[k]))) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: parameter\" + (parseInt(k) + 1) + \")\"; this.errormsg += normalError(\"Syntax error detected in race \" + races[id].name + \" (\" + id + \") at line \" + (parseInt(i) + 1) + \" of the race abort points field (line ignored).\"); ++this.errors; problem = true; break; } } if (problem) continue; // assign the numbers to the checkpoint variable races[id].raceAbortPoints[free_raceAbort] = { 'posx': parseFloat(lineParts[0]).toString(), 'posy': parseFloat(lineParts[1]).toString(), 'posz': parseFloat(lineParts[2]).toString(), 'rotx': parseFloat(lineParts[3]).toString(), 'roty': parseFloat(lineParts[4]).toString(), 'rotz': parseFloat(lineParts[5]).toString(), 'cobj': '[default]', 'cmsg_handler': abortMessageHander } // Allways add commas for (var k in races[id].raceAbortPoints[free_raceAbort]) { if (k != 'cobj' && k != 'cmsg_handler' && races[id].raceAbortPoints[free_raceAbort][k].search(/\\./) < 0) races[id].raceAbortPoints[free_raceAbort][k] += \".0\"; } // handle the optional object if (lineParts.length > 6) { var tmpArray = lineParts[6].replace(/^\\s+|\\s+$/g, '').split(' '); if (tmpArray.length > 0) races[id].raceAbortPoints[free_raceAbort]['cobj'] = tmpArray[0]; } // Fix empty objects if (races[id].raceAbortPoints[free_raceAbort]['cobj'] == '') { races[id].raceAbortPoints[free_raceAbort]['cobj'] = '[default]'; } ++free_raceAbort; } // Put the checkpointlist in the textarea again chps = chps.join('\\r\\n'); document.getElementById(\"race_\" + id + \"_raceAbort\").value = chps; // Replace all default objects by the correct objects for (var i in races[id].raceAbortPoints) { if (races[id].raceAbortPoints[i]['cobj'] == '[default]') { races[id].raceAbortPoints[i]['cobj'] = races[id].abortObject; } } } // OPTIONS for (var setting in races[id].options) { races[id].options[setting] = document.getElementById('race_' + id + '_' + setting).checked ? 'true' : 'false'; } // PENALTY SECONDS { // Get the penalty seconds races[id].penaltySeconds = parseInt(document.getElementById(\"race_\" + id + \"_penaltySeconds\").value); if (isNaN(races[id].penaltySeconds) || races[id].penaltySeconds < 0) { this.errormsg += normalError(\"Error detected in race \" + races[id].name + \" (\" + id + \"): penalty seconds should be a positive integer number (using 0 seconds).\"); ++this.errors; races[id].penaltySeconds = 0 } } // PENALTY MESSAGE { // Get the penalty message races[id].penaltyEventMessage = document.getElementById(\"race_\" + id + \"_penaltyMessage\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty messages if (races[id].penaltyEventMessage == '' || races[id].penaltyEventMessage == '[default]') races[id].penaltyEventMessage = \"[noMessage]\"; } return 1; } this.buildRace = function (id) { var main = ' // MAIN SECTION ' + id + ' START\\r\\n'; var general = '// GENERAL SECTION ' + id + ' START\\r\\n'; var raceStart = ' // RACESTART SECTION ' + id + ' START\\r\\n'; var penaltyEvent = ' // PENALTYEVENT SECTION ' + id + ' START\\r\\n'; // The race ID will be a global variable var raceID = 'race_' + id + '_' + races[id].name.replace(/[^a-zA-Z0-9]/g, '_') + '_ID'; general += 'int ' + raceID + ';\\r\\n'; // Start adding the race var script = \" {VAR_RACE_ID} = races.addNewEmptyRace();\\r\\n\"; script += \" races.setRaceName({VAR_RACE_ID}, \\\"{VAR_RACE_NAME}\\\");\\r\\n\"; script += \" races.setLaps({VAR_RACE_ID}, {VAR_RACE_LAPS});\\r\\n\"; main += script.replace(/{VAR_RACE_ID}/g, raceID).replace(/{VAR_RACE_NAME}/g, races[id].name).replace(/{VAR_RACE_LAPS}/g, races[id].laps); main += ' array<array<double>> race_' + id + '_coords = {\\r\\n'; for (var i in races[id].checkpoints) { if (i == (races[id].checkpoints.length - 1)) main += ' {' + races[id].checkpoints[i]['posx'] + ', ' + races[id].checkpoints[i]['posy'] + ', ' + races[id].checkpoints[i]['posz'] + ', ' + races[id].checkpoints[i]['rotx'] + ', ' + races[id].checkpoints[i]['roty'] + ', ' + races[id].checkpoints[i]['rotz'] + '}\\r\\n'; else main += ' {' + races[id].checkpoints[i]['posx'] + ', ' + races[id].checkpoints[i]['posy'] + ', ' + races[id].checkpoints[i]['posz'] + ', ' + races[id].checkpoints[i]['rotx'] + ', ' + races[id].checkpoints[i]['roty'] + ', ' + races[id].checkpoints[i]['rotz'] + '},\\r\\n'; } main += ' };\\r\\n'; for (var i in races[id].checkpoints) { main += ' races.addCheckpoint(' + raceID + ', ' + i + ', \\\"' + races[id].checkpoints[i]['cobj'] + '\\\", race_' + id + '_coords[' + i + ']);\\r\\n'; } // set the race version if (races[id].version != '') main += ' races.setVersion(' + raceID + ', \"' + races[id].version + '\");\\r\\n'; // penalty seconds if (races[id].penaltySeconds > 0) main += ' races.setPenaltyTime(' + raceID + ', ' + races[id].penaltySeconds + ');\\r\\n'; // penalty message if (races[id].penaltyEventMessage != '[noMessage]') { penaltyEvent += ' if( raceID == ' + raceID + ' )\\r\\n'; penaltyEvent += ' {\\r\\n'; penaltyEvent += ' races.message(\"' + races[id].penaltyEventMessage + '\", \"lightning.png\");\\r\\n'; penaltyEvent += ' }\\r\\n'; } // race abort points for (var i in races[id].raceAbortPoints) { main += ' races.addCancelPoint(' + raceID + ', \\\"' + races[id].raceAbortPoints[i]['cobj'] + '\\\", vector3(' + races[id].raceAbortPoints[i]['posx'] + 'f, ' + races[id].raceAbortPoints[i]['posy'] + 'f, ' + races[id].raceAbortPoints[i]['posz'] + 'f), vector3(' + races[id].raceAbortPoints[i]['rotx'] + 'f, ' + races[id].raceAbortPoints[i]['roty'] + 'f, ' + races[id].raceAbortPoints[i]['rotz'] + 'f)'; if (abortMessageHandlers[races[id].raceAbortPoints[i]['cmsg_handler']] != '[noMessage]') main += ', on_RaceAbort_event' + races[id].raceAbortPoints[i]['cmsg_handler'] + ');\\r\\n'; else main += ');\\r\\n'; // main += ' races.addCancelPoint('+raceID+', \\\"'+races[id].raceAbortPoints[i]['cobj']+'\\\", vector3('+races[id].raceAbortPoints[i]['posx']+'f, '+races[id].raceAbortPoints[i]['posy']+'f, '+races[id].raceAbortPoints[i]['posz']+'f), vector3('+races[id].raceAbortPoints[i]['rotx']+'f, '+races[id].raceAbortPoints[i]['roty']+'f, '+races[id].raceAbortPoints[i]['rotz']+'f), on_RaceAbort_event'+races[id].raceAbortPoints[i]['cmsg_handler']+');\\r\\n'; } // Tell the races script that the race is completed now main += ' races.finalize(' + raceID + ');\\r\\n'; // set the options raceStart += ' if( raceID == ' + raceID + ' )\\r\\n'; raceStart += ' {\\r\\n'; for (var setting in races[id].options) { raceStart += ' races.' + setting + ' = ' + races[id].options[setting] + ';\\r\\n'; } raceStart += ' }\\r\\n'; main += ' // MAIN SECTION ' + id + ' END\\r\\n'; general += '// GENERAL SECTION ' + id + ' END\\r\\n'; raceStart += ' // RACESTART SECTION ' + id + ' END\\r\\n'; penaltyEvent += ' // PENALTYEVENT SECTION ' + id + ' END\\r\\n'; this.scriptSections['main'] += '\\r\\n' + main + '\\r\\n'; this.scriptSections['general'] += '\\r\\n' + general + '\\r\\n'; this.scriptSections['RaceStart'] += '\\r\\n' + raceStart + '\\r\\n'; this.scriptSections['PenaltyEvent'] += '\\r\\n' + penaltyEvent + '\\r\\n'; return 1; } this.generate = function () { var r; this.scriptSections['main'] = ''; this.scriptSections['general'] = ''; this.scriptSections['RaceStart'] = ''; this.scriptSections['PenaltyEvent'] = ''; abortMessageHandlers.length = 0; abortMessageHandlers = new Array(); free_abortMessageHandler = 0; // build all the races for (var id in races) { if (races[id].used) { r = this.generateRace(id); } } // get the terrain file setting var terrnFile = document.getElementById(\"general_terrnFilename\").value.replace(/^\\s+|\\s+$/g, ''); // DEFAULT ABORT MESSAGE { // Get the default abort message var defaultAbortMessage = document.getElementById(\"race_-1_abortMessage\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty messages if (defaultAbortMessage == '' || defaultAbortMessage == '[default]') defaultAbortMessage = \"[noMessage]\"; } // ABORT POINTS { // get race abort points var free_raceAbort = 0; var abortObject = document.getElementById(\"race_-1_defaultAbort\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty objects if (abortObject == '' || abortObject == '[default]') abortObject = \"trucktrigger\"; var raceAbortPoints = new Array(); var chps = document.getElementById(\"race_-1_raceAbort\").value; chps = chps.split(/\\r?\\n/); var message = defaultAbortMessage; var abortMessageHander = -1; for (var k in abortMessageHandlers) { if (abortMessageHandlers[k] == defaultAbortMessage) abortMessageHander = k; } if (abortMessageHander == -1) { abortMessageHandlers[free_abortMessageHandler] = defaultAbortMessage; abortMessageHander = free_abortMessageHandler; ++free_abortMessageHandler; } for (var i in chps) { // trim the string var line = chps[i].replace(/^\\s+|\\s+$/g, ''); // Ignore comments and empty lines if (line == \"\" || line[0] == ';' || line[0] == '/') continue; // check for the message variable if (line.substr(0, 7) == 'MESSAGE') { var msg = line.substr(7); msg = msg.replace(/^\\s+/g, ''); if (msg[0] != '=') { this.errormsg += normalError(\"Syntax error detected at line \" + (parseInt(i) + 1) + \" of the general race abort points field (expected '=' after 'MESSAGE', line ignored).\"); ++this.errors; continue; } var msg = msg.substr(1); msg = msg.replace(/^\\s+/g, ''); if (msg == '') msg = '[noMessage]'; else if (msg == '[default]') msg = defaultAbortMessage; abortMessageHander = -1; for (var k in abortMessageHandlers) { if (abortMessageHandlers[k] == msg) { abortMessageHander = k; break; } } if (abortMessageHander == -1) { abortMessageHandlers[free_abortMessageHandler] = msg; abortMessageHander = free_abortMessageHandler; ++free_abortMessageHandler; } continue; } // Split the line on commas var lineParts = line.split(','); // Length must at least be 6 if (lineParts.length < 6) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: not enough parameters)\"; this.errormsg += normalError(\"Syntax error detected at line \" + (parseInt(i) + 1) + \" of the general race abort points field (not enough parameters, line ignored).\"); ++this.errors; continue; } // check if the first 6 parts are numbers var problem = false; for (var k = 0; k < 6; ++k) { if (isNaN(parseFloat(lineParts[k]))) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: parameter\" + (parseInt(k) + 1) + \")\"; this.errormsg += normalError(\"Syntax error detected at line \" + (parseInt(i) + 1) + \" of the general race abort points field (line ignored).\"); ++this.errors; problem = true; break; } } if (problem) continue; // assign the numbers to the checkpoint variable raceAbortPoints[free_raceAbort] = { 'posx': parseFloat(lineParts[0]).toString(), 'posy': parseFloat(lineParts[1]).toString(), 'posz': parseFloat(lineParts[2]).toString(), 'rotx': parseFloat(lineParts[3]).toString(), 'roty': parseFloat(lineParts[4]).toString(), 'rotz': parseFloat(lineParts[5]).toString(), 'cobj': '[default]', 'cmsg_handler': abortMessageHander } // Allways add commas for (var k in raceAbortPoints[free_raceAbort]) { if (k != 'cobj' && k != 'cmsg_handler' && raceAbortPoints[free_raceAbort][k].search(/\\./) < 0) raceAbortPoints[free_raceAbort][k] += \".0\"; } // handle the optional object if (lineParts.length > 6) { var tmpArray = lineParts[6].replace(/^\\s+|\\s+$/g, '').split(' '); if (tmpArray.length > 0) raceAbortPoints[free_raceAbort]['cobj'] = tmpArray[0]; } // Fix empty objects if (raceAbortPoints[free_raceAbort]['cobj'] == '') { raceAbortPoints[free_raceAbort]['cobj'] = '[default]'; } ++free_raceAbort; } // Put the checkpointlist in the textarea again chps = chps.join('\\r\\n'); document.getElementById(\"race_-1_raceAbort\").value = chps; // Replace all default objects by the correct objects for (var i in raceAbortPoints) { if (raceAbortPoints[i]['cobj'] == '[default]') { raceAbortPoints[i]['cobj'] = abortObject; } } if (free_raceAbort > 0) { // build the race abort points this.scriptSections['main'] += '\\r\\n'; this.scriptSections['main'] += ' // MAIN SECTION GENERAL START\\r\\n'; for (var i in raceAbortPoints) { this.scriptSections['main'] += ' races.addCancelPoint(-1, \\\"' + raceAbortPoints[i]['cobj'] + '\\\", vector3(' + raceAbortPoints[i]['posx'] + 'f, ' + raceAbortPoints[i]['posy'] + 'f, ' + raceAbortPoints[i]['posz'] + 'f), vector3(' + raceAbortPoints[i]['rotx'] + 'f, ' + raceAbortPoints[i]['roty'] + 'f, ' + raceAbortPoints[i]['rotz'] + 'f)'; if (abortMessageHandlers[raceAbortPoints[i]['cmsg_handler']] != '[noMessage]') this.scriptSections['main'] += ', on_RaceAbort_event' + raceAbortPoints[i]['cmsg_handler'] + ');\\r\\n'; else this.scriptSections['main'] += ');\\r\\n'; } this.scriptSections['main'] += ' // MAIN SECTION GENERAL END\\r\\n'; this.scriptSections['main'] += '\\r\\n'; } } // build abort point functions this.scriptSections['general'] += '\\r\\n// GENERAL SECTION GENERAL START\\r\\n'; for (var i in abortMessageHandlers) { if (abortMessageHandlers[i] == '[noMessage]') continue; this.scriptSections['general'] += '\\r\\n'; this.scriptSections['general'] += 'void on_RaceAbort_event' + i + '(dictionary@ event)\\r\\n'; this.scriptSections['general'] += '{\\r\\n'; this.scriptSections['general'] += ' races.message(\"' + abortMessageHandlers[i] + '\", \"stop.png\");\\r\\n'; this.scriptSections['general'] += '}\\r\\n'; } this.scriptSections['general'] += '\\r\\n// GENERAL SECTION GENERAL END\\r\\n'; var script = \"\"; if (this.scriptSections['main'] == '' && this.scriptSections['general'] == '' && this.scriptSections['RaceStart'] == '') { this.errormsg += fatalError(\"Failed to generate a script file (no races to create).\"); ++this.errors; script = '// Failed to generate the script.'; } else { if (terrnFile != '') script += \"// Filename: \" + terrnFile + \"\\r\\n\"; script += \"// This file was generated using the docs.rigsofrods.org race script generator.\\r\\n\"; script += \"#include \\\"base.as\\\";\\r\\n\"; script += \"#include \\\"races.as\\\";\\r\\n\"; script += \"\\r\\n\"; script += \"racesManager races();\\r\\n\"; script += \"\\r\\n\"; script += this.scriptSections['general'] + \"\\r\\n\"; script += \"\\r\\n\"; // main script += \"void main()\\r\\n\"; script += \"{\\r\\n\"; script += \" races.setCallback('RaceStart', on_RaceStart_event);\\r\\n\"; script += \" races.setCallback('PenaltyEvent', on_PenaltyEvent_event);\\r\\n\"; script += \" races.showCheckPointInfoWhenNotInRace = \" + (document.getElementById('race_-1_showCheckPointInfoWhenNotInRace').checked ? 'true' : 'false') + \";\\r\\n\"; script += this.scriptSections['main'] + \"\\r\\n\"; script += \"}\\r\\n\"; script += \"\\r\\n\"; // on_RaceStart_event script += \"void on_RaceStart_event(dictionary@ event)\\r\\n\"; script += \"{\\r\\n\"; script += \" int raceID;\\r\\n\"; script += \" event.get('raceID', raceID);\\r\\n\"; script += \"\\r\\n\"; script += this.scriptSections['RaceStart'] + \"\\r\\n\"; script += \"}\\r\\n\"; script += \"\\r\\n\"; // on_PenaltyEvent_event script += \"void on_PenaltyEvent_event(dictionary@ event)\\r\\n\"; script += \"{\\r\\n\"; script += \" int raceID;\\r\\n\"; script += \" event.get('raceID', raceID);\\r\\n\"; script += \"\\r\\n\"; script += this.scriptSections['PenaltyEvent'] + \"\\r\\n\"; script += \"}\\r\\n\"; script += \"\\r\\n\"; // eventCallback script += \"void eventCallback(int eventnum, int value)\\r\\n\"; script += \"{\\r\\n\"; script += \" races.eventCallback(eventnum, value);\\r\\n\"; script += \"}\\r\\n\"; script += \"\\r\\n\"; // on_RaceAbort_event //script += \"void on_RaceAbort_event(dictionary@ event)\\r\\n\"; //script += \"{\\r\\n\"; //script += \" int raceID;\\r\\n\"; //script += \" event.get('raceID', raceID);\\r\\n\"; //script += \"\\r\\n\"; //script += this.scriptSections['RaceAbort']+\"\\r\\n\"; //script += \"}\\r\\n\"; //script += \"\\r\\n\"; } document.getElementById(\"scriptResult\").value = script; if (this.errors == 0) { this.errormsg += noError(\"Build successful! (no errors occurred)\"); } document.getElementById(\"errorMessageField\").innerHTML = this.errormsg; this.errormsg = \"\"; if (this.errors > 0) { alert(\"Generated script file with \" + this.errors + \" errors.\"); this.errors = 0; } } } function race(id) { this.id = id; this.used = true; this.name = ''; this.laps = -1; this.version = ''; this.options = { 'obligatedFinish': 'false', 'showTimeDiff': 'true', 'showBestLap': 'true', 'showBestRace': 'true', 'submitScore': 'true', 'silentMode': 'false', //'allowVehicleChanging': 'false', //'abortOnVehicleExit': 'false', //'showCheckPointInfoWhenNotInRace': 'false', 'restartRaceOnStart': 'true' }; this.penaltyEventMessage = ''; this.penaltySeconds = 0; this.chpObjects = { 'start': 'chp-start', 'chp': 'chp-checkpoint', 'finish': 'chp-start' }; this.checkpoints = new Array(); this.abortObject = 'trucktrigger'; this.raceAbortPoints = new Array(); this.raceAbortMessage = '[noMessage]'; this.lastAbortMessage = '[noMessage]'; } // unused function on_raceCount_change(select) { var newRaceCount = parseInt(select.options[select.selectedIndex].value); var form = document.getElementById(\"formTemplate\").innerHTML; var formDiv = document.getElementById(\"formDiv\"); var raceCount = getRaceCount for (var i = 1; i <= newRaceCount - raceCount; ++i) { formDiv.innerHTML += form.replace(/{RACE_NUMBER}/g, (i + raceCount)); } /*for( var i = 1; i <= raceCount-newRaceCount; ++i ) { formDiv.removeChild(document.getElementById( innerHTML += form.replace(\"{RACE_NUMBER}\", (i+raceCount)); } race_{RACE_NUMBER}*/ raceCount = newRaceCount; } function on_addRace_click() { var form = document.getElementById(\"formTemplate\").innerHTML; form = form.replace(/{RACE_NUMBER}/g, free_race); var formDiv = document.getElementById(\"formDiv\"); var newdiv = document.createElement('div'); newdiv.setAttribute('id', 'race_' + free_race + '_containerDiv'); newdiv.innerHTML = form; formDiv.appendChild(newdiv); //formDiv.innerHTML += form.replace(/{RACE_NUMBER}/g, free_race); races[free_race] = new race(free_race); ++free_race; } function on_option_change(name, racenum) { var checkObj = document.getElementById(\"race_\" + racenum + \"_\" + name); var infoObj = document.getElementById(\"race_\" + racenum + \"_\" + name + \"_info\"); if (name == \"obligatedFinish\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: If you drive through the start checkpoint of a race while already in another race, the current race will continue and the other race start line will be ignored.]\" else infoObj.innerHTML = \"[Current setting: If you drive through the start checkpoint of a race while already in another race, the current race will be aborted and the other race will start.]\"; } else if (name == \"showTimeDiff\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: Show + or - [best time minus current time] when you pass a checkpoint.]\" else infoObj.innerHTML = \"[Current setting: Only show the current time when you pass a checkpoint.]\"; } else if (name == \"showBestLap\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: If a race is started or a new best lap is set, the best lap will be shown.]\" else infoObj.innerHTML = \"[Current setting: Best lap times won't be shown to the user.]\"; } else if (name == \"showBestRace\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: If a race is started or a new best race time is set, the best race time will be shown.]\" else infoObj.innerHTML = \"[Current setting: Best race times won't be shown to the user.]\"; } else if (name == \"submitScore\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: If the user has a new best lap time or new best race time, then this time is submitted to the master server.]\" else infoObj.innerHTML = \"[Current setting: Race and lap times won't be sent to the master server.]\"; } else if (name == \"silentMode\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: No info will be shown to the user, except for the timer.]\" else infoObj.innerHTML = \"[Current setting: The user will be informed about running races.]\"; } else if (name == \"showCheckPointInfoWhenNotInRace\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: If the user drives through a checkpoint of a race that isn't running, a message will be shown, saying \\\"this is checkpoint X of race myRaceName\\\".]\" else infoObj.innerHTML = \"[Current setting: If the user drives through a (not start line) checkpoint of a race that isn't running, nothing will happen.]\"; } else if (name == \"restartRaceOnStart\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: The race will be restarted when you pass the start line of the same race.]\" else infoObj.innerHTML = \"[Current setting: The race will continue to run without resetting the time when you pass the start line of the same race.]\"; } } function on_closeIcon_click(racenum) { var formDiv = document.getElementById(\"formDiv\"); var obj = document.getElementById(\"race_\" + racenum + \"_containerDiv\"); formDiv.removeChild(obj); races[racenum].used = false; reUseRaceNumbers(); } function on_checkpointField_focus(obj, defaultText, defaultValue) { checkpointFieldFocussed = true; if (obj.value == defaultText) obj.value = defaultValue; obj.select(); } function on_checkpointField_blur(obj, defaultText, defaultValue) { checkpointFieldFocussed = false; if (obj.value == defaultValue) obj.value = defaultText; } function on_checkpointField_mouseOver(obj, defaultText, defaultValue) { if (checkpointFieldFocussed) return; if (obj.value == defaultText) obj.value = defaultValue; } function on_checkpointField_mouseOut(obj, defaultText, defaultValue) { if (checkpointFieldFocussed) return; if (obj.value == defaultValue) obj.value = defaultText; } function on_fieldAdd_click(racenum, idPrefix, fieldID) { // check the position and rotation var fields = new Array('posx', 'posy', 'posz', 'rotx', 'roty', 'rotz'); var defaults = new Array('pos x', 'pos y', 'pos z', 'rot x', 'rot y', 'rot z'); var texts = new Array('position x', 'position y', 'position z', 'rotation x', 'rotation y', 'rotation z'); var coords = new Array(); for (var i in fields) { var cd = document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + '_' + fields[i]).value; // http://developer.loftdigital.com/blog/trim-a-string-in-javascript cd = cd.replace(/^\\s+|\\s+$/g, '') if (cd == defaults[i]) cd = \"0.0\"; else if (isNaN(parseFloat(document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + '_' + fields[i]).value))) { alert(\"Unable to add object: '\" + texts[i] + \"' is not a number!\"); return; } coords[i] = parseFloat(cd); } // check the checkpoint object var cobj = document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_cobj\").value; // http://developer.loftdigital.com/blog/trim-a-string-in-javascript cobj = cobj.replace(/^\\s+|\\s+$/g, ''); if (cobj == \"\" || cobj == \"object\") { cobj = \"[default]\"; } var line = \"\\r\\n\"; if (idPrefix == 'raceAbort') { // check the race abort message var cmsg = document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_cmsg\").value; // http://developer.loftdigital.com/blog/trim-a-string-in-javascript cmsg = cmsg.replace(/^\\s+|\\s+$/g, ''); if (cmsg == \"\" || cmsg == \"message to show\") { cmsg = \"[default]\"; } var lastCmsg; if (racenum == -1) { lastCmsg = lastAbortMessage; lastAbortMessage = cmsg; } else { lastCmsg = races[racenum].lastAbortMessage races[racenum].lastAbortMessage = cmsg; } if (lastCmsg != cmsg) line += 'MESSAGE = ' + cmsg + '\\r\\n'; if (cmsg == \"[default]\") document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_cmsg\").value = \"message to show\"; } // Add the line to the textarea for (var i in coords) { if (coords[i].toString().search(/\\./) >= 0) line += coords[i] + \", \"; else line += coords[i] + \".0, \"; } line += cobj; document.getElementById(\"race_\" + racenum + \"_\" + fieldID).value += line; // reset all the default values document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_posx\").value = \"pos x\"; document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_posy\").value = \"pos y\"; document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_posz\").value = \"pos z\"; document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_rotx\").value = \"rot x\"; document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_roty\").value = \"rot y\"; document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_rotz\").value = \"rot z\"; if (cobj == \"[default]\") document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_cobj\").value = \"object\"; if (idPrefix == \"chpAdd\") drawPreview(racenum); } function reUseRaceNumbers() { for (var i = free_race - 1; i >= 0 && races[i].used == false; --i) { --free_race; } } function init() { for (var i = 0; i < 200; ++i) { } on_addRace_click(); } function on_generate_click() { myScriptFile.generate(); } function on_laps_change(obj, racenum) { if (obj.options[obj.selectedIndex].value == \"other...\") document.getElementById(\"race_\" + racenum + \"_lapsOther\").style.display = \"inline-table\"; else document.getElementById(\"race_\" + racenum + \"_lapsOther\").style.display = \"none\"; if (obj.options[obj.selectedIndex].value.substr(0, 7) == \"No laps\") document.getElementById(\"race_\" + racenum + \"_defaultFinish\").disabled = false; else document.getElementById(\"race_\" + racenum + \"_defaultFinish\").disabled = true; } function enforceDefault(obj, defaultValue) { if (obj.value.replace(/^\\s+|\\s+$/g, '') == '') obj.value = defaultValue; } function drawPreview(id) { // get the checkpoints into an array var checkpoints = []; { // get checkpoints var free_checkpoint = 0; var chps = document.getElementById(\"race_\" + id + \"_checkpoints\").value; chps = chps.split(/\\r?\\n/); for (var i in chps) { // trim the string var line = chps[i].replace(/^\\s+|\\s+$/g, ''); // Ignore comments and empty lines if (line == \"\" || line[0] == ';' || line[0] == '/') continue; // Split the line on commas var lineParts = line.split(','); // Length must at least be 6 if (lineParts.length < 6) continue; // check if the first 6 parts are numbers var problem = false; for (var k = 0; k < 6; ++k) { if (isNaN(parseFloat(lineParts[k]))) { problem = true; break; } } if (problem) continue; // assign the numbers to the checkpoint variable checkpoints[free_checkpoint] = { 'posx': parseFloat(lineParts[0]).toString(), 'posy': parseFloat(lineParts[1]).toString(), 'posz': parseFloat(lineParts[2]).toString(), 'rotx': parseFloat(lineParts[3]).toString(), 'roty': parseFloat(lineParts[4]).toString(), 'rotz': parseFloat(lineParts[5]).toString(), 'cobj': '[default]' } // Allways add commas /*for( var k in checkpoints[free_checkpoint] ) { if( k != 'cobj' && k != 'cmsg_handler' && checkpoints[free_checkpoint][k].search(/\\./) < 0 ) checkpoints[free_checkpoint][k] += \".0\"; }*/ ++free_checkpoint; } } // Initializations var canvas = document.getElementById(\"race_\" + id + \"_canvas\"); var context = canvas.getContext(\"2d\"); context.clearRect(0, 0, 220, 220); var maxX = 200.00; var maxZ = 200.00; var minX = 99999.00; var minZ = 99999.00; for (var k in checkpoints) { if (Math.ceil(parseFloat(checkpoints[k].posx)) > maxX) { maxX = checkpoints[k].posx; } if (Math.ceil(parseFloat(checkpoints[k].posx)) < minX) { minX = checkpoints[k].posx; } if (Math.ceil(parseFloat(checkpoints[k].posz)) > maxZ) { maxZ = checkpoints[k].posz; } if (Math.ceil(parseFloat(checkpoints[k].posz)) < minZ) { minZ = checkpoints[k].posz; } } // Transform the positions for (var k in checkpoints) { checkpoints[k].posz -= minZ; checkpoints[k].posx -= minX; } maxX -= minX; maxZ -= minZ; // We need at least 1 checkpoint if (checkpoints.length == 0) return; // Check if the race has laps var raceHasLaps = false; if ((document.getElementById(\"race_\" + id + \"_laps\").value in myScriptFile.lapSelections) && (myScriptFile.lapSelections[document.getElementById(\"race_\" + id + \"_laps\").value] != 'races.LAPS_NoLaps') ) { raceHasLaps = true; } // Put some dots whereever a checkpoint is context.fillStyle = \"green\"; context.fillRect((checkpoints[0].posx / maxX * 180 + 10) - 5, (checkpoints[0].posz / maxZ * 180 + 10) - 5, 10, 10); context.fillStyle = \"red\"; context.fillRect((checkpoints[checkpoints.length - 1].posx / maxX * 180 + 10) - 5, (checkpoints[checkpoints.length - 1].posz / maxZ * 180 + 10) - 5, 10, 10); for (var i = 0; i < checkpoints.length; ++i) { context.fillStyle = \"blue\"; context.fillRect((checkpoints[i].posx / maxX * 180 + 10) - 2, (checkpoints[i].posz / maxZ * 180 + 10) - 2, 4, 4); } // connect the dots context.beginPath(); context.moveTo((checkpoints[0].posx / maxX * 180 + 10), (checkpoints[0].posz / maxZ * 180 + 10)); for (var i = 1; i < checkpoints.length; ++i) { context.lineTo((checkpoints[i].posx / maxX * 180 + 10), (checkpoints[i].posz / maxZ * 180 + 10)); } if (raceHasLaps) context.lineTo((checkpoints[0].posx / maxX * 180 + 10), (checkpoints[0].posz / maxZ * 180 + 10)); context.stroke(); context.closePath(); } // utils function fatalError(str) { return '<font color=\"red\">FATAL| ' + str + '</font><br />'; } function normalError(str) { return '<font color=\"orange\">ERROR| ' + str + '</font><br />'; } function noError(str) { return '<font color=\"green\">SUCCESS| ' + str + '</font><br />'; } function printMsg(str) { document.getElementById('errorMessageField').innerHTML += str + '<br />'; } General General Settings Show chp info? [Current setting: If the user drives through a (not start line) checkpoint of a race that isn't running, nothing will happen.] Script filename: [optional, the extension of this file should be .as.] General abort points (advanced) The race abort points defined here, will abort whichever race is running at that moment. General abort points: [Note: Leave the object or message field empty to use the default. You can change the defaults below.] Default abort object: [optional, the object that should be used for race abort points if no object (or [default]) is specified above.] Default abort message: [optional, the message that should be shown when a race is aborted and the [default] message is used above.] Add more races or generate the script [Start here. You can have multiple races on 1 terrain.] [Generate the scripting file when you're finished adding all the races.] Error log Resulting script file Race {RACE_NUMBER} remove this race General race info Race name: Amount of laps: No laps (the first checkpoint will be the start line and the last checkpoint will be the finish line) 1 lap (the first checkpoint will be both the start and finish line) 2 laps 3 laps 4 laps 5 laps 6 laps 7 laps 8 laps 9 laps Never ending race (unlimited amount of laps) other... Race version: [optional] Race options (advanced) Finishing obligatory? [Current setting: If you drive through the start checkpoint of a race while already in another race, the current race will be aborted and the other race will start.] Show time difference? [Current setting: Show + or - [best time minus current time] when passing a checkpoint.] Show best lap time? [Current setting: If a race is started or a new best lap is set, the best lap will be shown.] Show best race time? [Current setting: If a race is started or a new best race time is set, the best race time will be shown.] Submit best time? [Current setting: If the user has a new best lap time or new best race time, then this time is submitted to the master server.] Silent mode? [Current setting: The user will be informed about running races.] Allow race restart? [Current setting: The race will be restarted when you pass the start line of the same race.] Checkpoint locations and checkpoint objects Checkpoint coordinates: [Note: Leave the object field empty to use the default. You can change the defaults below.] Default start object: [optional, the start line object that should be used if it wasn't specified with in the checkpointlist above.] Default chp object: [optional, the checkpoint object that should be used for all checkpoints that do not have an object specified in the checkpointlist above.] Default finish object: [optional, the finish line object that should be used if it wasn't specified with in the checkpointlist above.] Preview: Unsupported browser! Race abort points (advanced) Race abort points: [Note: Leave the object or message field empty to use the default. You can change the defaults below.] Default abort object: [optional, the object that should be used for race abort points if no object (or [default] object) is specified above.] Default abort message: [optional, the message that should be shown when a race is aborted and the [default] message is used above.] Race penalty events (advanced) The settings in this box only apply if a 'race_penalty' box was triggered. You can define 'race_penalty' points in the odef file of your checkpoint. Penalty seconds: [the amount of seconds that should be added to the lap time when the penalty event is triggered.] Message: [optional, the message that should be shown when a penalty event is triggered.] What is this? \u00b6 This is a generator for creating functional races (or timers) for terrains in Rigs of Rods, created by Neorej16 and ported to docs.rigsofrods.org by CuriousMike. Instructions \u00b6 Start by clicking \"Add race\". You can have multiple races on one terrain. General race info \u00b6 Race name \u00b6 The name of your race, shown in the top left corner. Amount of laps \u00b6 The amount of laps your race will have. For point-to-point races, set \"No laps\". Race version \u00b6 The version number of your race. (e.g. authorName-1.0 ). Race options \u00b6 Finishing obligatory? \u00b6 Disabled (Default): If you drive through the start checkpoint of a race while already in another race, the current race will be aborted and the other race will start. Enabled: If you drive through the start checkpoint of a race while already in another race, the current race will continue and the other race start line will be ignored. Show time difference? \u00b6 Enabled (Default): Show + or - [best time minus current time] when passing a checkpoint. Disabled: Only show the current time when you pass a checkpoint. Show best lap time? \u00b6 Enabled (Default): If a race is started or a new best lap is set, the best lap will be shown. Disabled: Best lap times won't be shown to the user. Show best race time? \u00b6 Enabled (Default): If a race is started or a new best race time is set, the best race time will be shown. Disabled: Best lap times won't be shown to the user. Submit best time? \u00b6 Enabled (Default): If the user has a new best lap time or new best race time, then this time is submitted to the master server. Disabled: Race and lap times won't be sent to the master server. Silent mode? \u00b6 Disabled (Default): The user will be informed about running races. Enabled: No info will be shown to the user, except for the timer. Allow race restart? \u00b6 Enabled (Default): The race will be restarted when you pass the start line of the same race. Disabled: The race will continue to run without resetting the time when you pass the start line of the same race. Checkpoint locations and objects \u00b6 This section defines the locations of the checkpoints and what objects to use for the checkpoints. Retrieving checkpoint coordinates \u00b6 To easily get the checkpoint coordinates, do the following: Open RoR and select your terrain While not in a vehicle, walk to where you want your checkpoint to be, then press the H key. Repeat for all checkpoints you want to add. When finished, exit RoR and open the RoR.log file, located at Documents\\My Games\\Rigs of Rods\\logs . Scroll to the end of the file, you should see position lines like the following: 00:58:49: Position: 486.504, 0.000, 512.000, 0.0, 360.0, 0.0 00:58:58: Position: 457.481, 0.000, 500.993, 0.0, 396.3, 0.0 00:59:05: Position: 470.764, 0.000, 464.283, 0.0, 484.1, 0.0 00:59:14: Position: 526.697, 0.000, 482.188, 0.0, 573.8, 0.0 00:59:20: Position: 564.749, 0.000, 465.543, 0.0, 512.7, 0.0 00:59:26: Position: 584.245, 0.000, 496.841, 0.0, 613.8, 0.0 00:59:32: Position: 550.343, 0.000, 511.211, 0.0, 716.8, 0.0 These are your checkpoint's position coordinates. Copy the lines to a new file as you'll need to edit it later. Adding coordinates \u00b6 To add the coordinates you retrieved from the log file, edit the lines to match the format below: 486.504, 0.000, 512.000, 0.0, 360.0, 0.0, [default] 457.481, 0.000, 500.993, 0.0, 396.3, 0.0, [default] 470.764, 0.000, 464.283, 0.0, 484.1, 0.0, [default] 526.697, 0.000, 482.188, 0.0, 573.8, 0.0, [default] 564.749, 0.000, 465.543, 0.0, 512.7, 0.0, [default] 584.245, 0.000, 496.841, 0.0, 613.8, 0.0, [default] 550.343, 0.000, 511.211, 0.0, 716.8, 0.0, [default] Then paste the lines into the \"Checkpoint coordinates\" box. Example: A preview of the checkpoint layout will be shown. Checkpoint objects \u00b6 At the end of each coordinate line is the name of the checkpoint object. This defines the checkpoint visuals. Each line can have a different checkpoint object. However, for simplicity's sake, you can set the default object names in the Default start / checkpoint / finish object sections. These objects will be used if you specify a checkpoint name in the coordinates list as [default] . By default, RoR includes these checkpoint models: The names for these objects are chp-start and chp-checkpoint . You can also use a custom object. Here are a few checkpoints you can use, just extract the contents into your terrain's zip file: F1 Test Track Checkpoint \u00b6 These are the checkpoints from F1 Test Track , updated with fixed normals and new textures. Object names: new-checkpoint-start and new-checkpoint . Download: f1_checkpoint.zip Empty Checkpoint \u00b6 This checkpoint has no visuals. Useful for meshed terrains which have a clearly defined layout (such as tracks) or multiple races which share checkpoint locations. Object name: empty-checkpoint . Download: empty_checkpoint.zip Race abort points \u00b6 Optional, defines points which will abort the current race. Use the same coordinate format as above. Race penalty events \u00b6 Not used by any of the included checkpoints. Defines settings for the race_penalty box. To add a race_penalty box, edit the odef file of your checkpoint. (See begin box section) General settings \u00b6 Show checkpoint info? \u00b6 Disabled (Default): If the user drives through a (not start line) checkpoint of a race that isn't running, nothing will happen. Enabled: If the user drives through a checkpoint of a race that isn't running, a message will be shown, saying \"this is checkpoint X of race myRaceName\". Script filename \u00b6 The file name of your race script with the .as file extension. Example: myTerrain.as General abort points \u00b6 Optional, defines points which will abort any current race. Use the same coordinate format as above. Generating completed script \u00b6 Once you're finally done setting up your race(s), click Generate script file! to generate the finished script. Example completed script of a basic 2 lap race on Simple Test Terrain: // Filename: TestRace.as // This file was generated using the docs.rigsofrods.org race script generator. #include \"base.as\"; #include \"races.as\"; racesManager races(); // GENERAL SECTION 0 START int race_0_Simple_Test_Race_ID; // GENERAL SECTION 0 END // GENERAL SECTION GENERAL START // GENERAL SECTION GENERAL END void main() { races.setCallback('RaceStart', on_RaceStart_event); races.setCallback('PenaltyEvent', on_PenaltyEvent_event); races.showCheckPointInfoWhenNotInRace = true; // MAIN SECTION 0 START race_0_Simple_Test_Race_ID = races.addNewEmptyRace(); races.setRaceName(race_0_Simple_Test_Race_ID, \"Simple Test Race\"); races.setLaps(race_0_Simple_Test_Race_ID, 2); array<array<double>> race_0_coords = { {486.504, 0.0, 512.0, 0.0, 360.0, 0.0}, {457.481, 0.0, 500.993, 0.0, 396.3, 0.0}, {470.764, 0.0, 464.283, 0.0, 484.1, 0.0}, {526.697, 0.0, 482.188, 0.0, 573.8, 0.0}, {564.749, 0.0, 465.543, 0.0, 512.7, 0.0}, {584.245, 0.0, 496.841, 0.0, 613.8, 0.0}, {550.343, 0.0, 511.211, 0.0, 716.8, 0.0} }; races.addCheckpoint(race_0_Simple_Test_Race_ID, 0, \"chp-start\", race_0_coords[0]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 1, \"chp-checkpoint\", race_0_coords[1]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 2, \"chp-checkpoint\", race_0_coords[2]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 3, \"chp-checkpoint\", race_0_coords[3]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 4, \"chp-checkpoint\", race_0_coords[4]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 5, \"chp-checkpoint\", race_0_coords[5]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 6, \"chp-checkpoint\", race_0_coords[6]); races.setVersion(race_0_Simple_Test_Race_ID, \"CuriousMike-1.0\"); races.setPenaltyTime(race_0_Simple_Test_Race_ID, 10); races.finalize(race_0_Simple_Test_Race_ID); // MAIN SECTION 0 END } void on_RaceStart_event(dictionary@ event) { int raceID; event.get('raceID', raceID); // RACESTART SECTION 0 START if( raceID == race_0_Simple_Test_Race_ID ) { races.obligatedFinish = false; races.showTimeDiff = true; races.showBestLap = true; races.showBestRace = true; races.submitScore = true; races.silentMode = false; races.restartRaceOnStart = true; } // RACESTART SECTION 0 END } void on_PenaltyEvent_event(dictionary@ event) { int raceID; event.get('raceID', raceID); // PENALTYEVENT SECTION 0 START // PENALTYEVENT SECTION 0 END } void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); } Adding script to terrain \u00b6 To add your generated script to the terrain, copy the script (CTRL+A to select all) into a text editor such as Notepad or Notepad++. Save the file with the .as file extension: Make sure to set the file type to \"All files\"! Place the file into your terrain's zip, then open the terrain's .terrn2 file. At the end of the terrn2 , add (or edit) the [Scripts] section: [Scripts] TestRace.as= Save your changes and place the edited terrn2 back into the terrain zip if necessary. In-game \u00b6 If everything went well, you should now have your race in RoR! Fine tuning checkpoint locations \u00b6 When testing your race, your checkpoints may not be in the correct location or rotated correctly. To adjust your checkpoint positions, use the in-game object editor . Checkpoints are spawned first, so use CTRL+[ and CTRL+] keys to scroll through each one. Once you're done moving your checkpoints. exit editor mode ( CTRL+Y ) then exit the game. In editor_out.cfg , the checkpoint locations will be at the top of the file: 486.504, 0.000, 512.000, 0.0, 90.0, 0.0, chp-start 457.481, 0.000, 500.993, 0.0, 396.3, 0.0, chp-checkpoint 470.764, 0.000, 464.283, 0.0, 484.1, 0.0, chp-checkpoint 526.697, 0.000, 482.188, 0.0, 573.8, 0.0, chp-checkpoint 577.081, 0.000, 478.170, 0.0, 480.0, 0.0, chp-checkpoint 596.938, 0.000, 494.067, 0.0, 718.4, 0.0, chp-checkpoint 550.343, 0.000, 511.211, 0.0, 90.0, 0.0, chp-checkpoint Edit the lines to match the following format: {486.504, 0.000, 512.000, 0.0, 90.0, 0.0}, {457.481, 0.000, 500.993, 0.0, 396.3, 0.0}, {470.764, 0.000, 464.283, 0.0, 484.1, 0.0}, {526.697, 0.000, 482.188, 0.0, 573.8, 0.0}, {577.081, 0.000, 478.170, 0.0, 480.0, 0.0}, {596.938, 0.000, 494.067, 0.0, 718.4, 0.0}, {550.343, 0.000, 511.211, 0.0, 90.0, 0.0} Paste the lines into your race script file, replacing the existing positions: array<array<double>> race_0_coords = { {486.504, 0.000, 512.000, 0.0, 90.0, 0.0}, {457.481, 0.000, 500.993, 0.0, 396.3, 0.0}, {470.764, 0.000, 464.283, 0.0, 484.1, 0.0}, {526.697, 0.000, 482.188, 0.0, 573.8, 0.0}, {577.081, 0.000, 478.170, 0.0, 480.0, 0.0}, {596.938, 0.000, 494.067, 0.0, 718.4, 0.0}, {550.343, 0.000, 511.211, 0.0, 90.0, 0.0} }; Save the script and try it in-game. Your checkpoints should now be in the correct place. Troubleshooting \u00b6 If your race doesn't appear in-game, check your terrain's .terrn2 file to make sure the [Scripts] section is correct and that your script is in the terrain zip. Otherwise, your script may have a syntax error. Browse to Documents\\My Games\\Rigs of Rods\\logs and open Angelscript.log with Notepad. Script errors will be shown there. Look at the completed example script above for reference. Conclusion \u00b6 Congratulations, you now know the basics of adding races to Rigs of Rods using the race script generator!","title":"Race script generator"},{"location":"terrain-creation/race-generator/#race-script-generator","text":"body, fieldset { min-width: 400px; } @media (prefers-color-scheme: light) { .info { color: #3F3F3F; /*font-size: x-small;*/ } .bigButton { width: 200px; height: 30px; font-weight: bold; background: white; } .smallButton { background: white; } .smallNumberField { width: 50px; background: white; } .shortTextField { width: 150px; background: white; } .longTextField { width: 428px; background: white; } .inputBox { background-color: white; } fieldset { -webkit-border-radius: 10px; -moz-border-radius: 10px; border-radius: 10px; background-color: #E5E5E5; } } @media (prefers-color-scheme: dark) { .info { color: #C1C1C1; /*font-size: x-small;*/ } .bigButton { width: 200px; height: 30px; font-weight: bold; background: #191919; } .smallButton { background: #191919; } .smallNumberField { width: 50px; background: #191919; } .shortTextField { width: 150px; background: #191919; } .longTextField { width: 428px; background: #191919; } .inputBox { background-color: #191919; } fieldset { -webkit-border-radius: 10px; -moz-border-radius: 10px; border-radius: 10px; background-color: #333; } } label { display: inline-table; } .intro { font-style: italic; } .scriptResult { width: 100%; height: 300px; } .checkpointsInputField { width: 100%; height: 300px; #vertical-align: top; } .closeIcon { float: right; cursor: pointer; text-decoration: underline; color: red; } #errorMessageField { margin-left: 20px; } legend { font-weight: bold; } var free_race = 0; var races = new Array(); var free_checkpoint = 0; var checkpointFieldFocussed = false; var myScriptFile = new scriptFile(); var lastAbortMessage = '[noMessage]'; var abortMessageHandlers = new Array(); var free_abortMessageHandler = 0; function scriptFile() { this.errormsg = \"\"; this.errors = 0; this.lapSelections = { 'No laps (the first checkpoint will be the start line and the last checkpoint will be the finish line)': 'races.LAPS_NoLaps', '1 lap (the first checkpoint will be both the start and finish line)': 'races.LAPS_One', '2 laps': '2', '3 laps': '3', '4 laps': '4', '5 laps': '5', '6 laps': '6', '7 laps': '7', '8 laps': '8', '9 laps': '9', 'Never ending race (unlimited amount of laps)': 'races.LAPS_Unlimited', 'other...': '[other]' }; this.scriptSections = { 'main': '', 'general': '', 'RaceStart': '', 'PenaltyEvent': '' } this.generateRace = function (id) { var r; r = this.getRaceData(id); if (r < 0) return; r = this.buildRace(id); if (r < 0) return; return 1; } this.getRaceData = function (id) { // NAME { // get name races[id].name = document.getElementById(\"race_\" + id + \"_raceName\").value; // trim the name races[id].name = races[id].name.replace(/^\\s+|\\s+$/g, ''); // check the name if (races[id].name == \"\") { this.errormsg += fatalError(\"Critical error detected in race (\" + id + \"): No name set, cannot build race (race ignored).\"); ++this.errors; return -1; } } // LAPS { // get the amount of laps if (document.getElementById(\"race_\" + id + \"_laps\").value in this.lapSelections) races[id].laps = this.lapSelections[document.getElementById(\"race_\" + id + \"_laps\").value]; else { this.errormsg += fatalError(\"Critical error detected in race \" + races[id].name + \" (\" + id + \"): Unhandled amount of laps (race ignored).\"); ++this.errors; return -2; } // if 'other...' is selected, then we'll need to get the specified value if (races[id].laps == '[other]') { races[id].laps = parseInt(document.getElementById(\"race_\" + id + \"_lapsOther\").value); if (isNaN(races[id].laps)) { this.errormsg += fatalError(\"Critical error detected in race \" + races[id].name + \" (\" + id + \"): No amount of laps set (race ignored).\"); ++this.errors; return -3; } } } // VERSION races[id].version = document.getElementById(\"race_\" + id + \"_version\").value.replace(/^\\s+|\\s+$/g, ''); // DEFAULT CHECKPOINT OBJECTS { // Get the default checkpoint objects races[id].chpObjects['start'] = document.getElementById(\"race_\" + id + \"_defaultStart\").value.replace(/^\\s+|\\s+$/g, ''); races[id].chpObjects['chp'] = document.getElementById(\"race_\" + id + \"_defaultCheckpoint\").value.replace(/^\\s+|\\s+$/g, ''); races[id].chpObjects['finish'] = document.getElementById(\"race_\" + id + \"_defaultFinish\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty objects if (races[id].chpObjects['start'] == '' || races[id].chpObjects['start'] == '[default]') races[id].chpObjects['start'] = \"chp-start\"; if (races[id].chpObjects['chp'] == '' || races[id].chpObjects['chp'] == '[default]') races[id].chpObjects['chp'] = \"chp-checkpoint\"; if (races[id].chpObjects['finish'] == '' || races[id].chpObjects['finish'] == '[default]') races[id].chpObjects['finish'] = \"chp-start\"; } // CHECKPOINTS { // get checkpoints var free_checkpoint = 0; var chps = document.getElementById(\"race_\" + id + \"_checkpoints\").value; chps = chps.split(/\\r?\\n/); for (var i in chps) { // trim the string var line = chps[i].replace(/^\\s+|\\s+$/g, ''); // Ignore comments and empty lines if (line == \"\" || line[0] == ';' || line[0] == '/') continue; // Split the line on commas var lineParts = line.split(','); // Length must at least be 6 if (lineParts.length < 6) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: not enough parameters)\"; this.errormsg += normalError(\"Syntax error detected in race \" + races[id].name + \" (\" + id + \") at line \" + (parseInt(i) + 1) + \" of the checkpoints field (not enough parameters, line ignored).\"); ++this.errors; continue; } // check if the first 6 parts are numbers var problem = false; for (var k = 0; k < 6; ++k) { if (isNaN(parseFloat(lineParts[k]))) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: parameter\" + (parseInt(k) + 1) + \")\"; this.errormsg += normalError(\"Syntax error detected in race \" + races[id].name + \" (\" + id + \") at line \" + (parseInt(i) + 1) + \" of the checkpoints field (line ignored).\"); ++this.errors; problem = true; break; } } if (problem) continue; // assign the numbers to the checkpoint variable races[id].checkpoints[free_checkpoint] = { 'posx': parseFloat(lineParts[0]).toString(), 'posy': parseFloat(lineParts[1]).toString(), 'posz': parseFloat(lineParts[2]).toString(), 'rotx': parseFloat(lineParts[3]).toString(), 'roty': parseFloat(lineParts[4]).toString(), 'rotz': parseFloat(lineParts[5]).toString(), 'cobj': '[default]' } // Allways add commas for (var k in races[id].checkpoints[free_checkpoint]) { if (k != 'cobj' && k != 'cmsg_handler' && races[id].checkpoints[free_checkpoint][k].search(/\\./) < 0) races[id].checkpoints[free_checkpoint][k] += \".0\"; } // handle the optional object if (lineParts.length > 6) { var tmpArray = lineParts[6].replace(/^\\s+|\\s+$/g, '').split(' '); if (tmpArray.length > 0) races[id].checkpoints[free_checkpoint]['cobj'] = tmpArray[0]; } // Fix empty objects if (races[id].checkpoints[free_checkpoint]['cobj'] == '') { races[id].checkpoints[free_checkpoint]['cobj'] = '[default]'; } ++free_checkpoint; } // Put the checkpointlist in the textarea again chps = chps.join('\\r\\n'); document.getElementById(\"race_\" + id + \"_checkpoints\").value = chps; // We need at least 2 checkpoints if (free_checkpoint < 2) { this.errormsg += fatalError(\"Critical error detected in race \" + races[id].name + \" (\" + id + \"): Not enough checkpoints (2 required, race ignored).\"); ++this.errors; return -4; } // Replace all default objects by the correct objects for (var i in races[id].checkpoints) { if (races[id].checkpoints[i]['cobj'] == '[default]') { if (i == 0) races[id].checkpoints[i]['cobj'] = races[id].chpObjects['start']; else if ((i == (free_checkpoint - 1)) && (races[id].laps == 'races.LAPS_NoLaps')) races[id].checkpoints[i]['cobj'] = races[id].chpObjects['finish']; else races[id].checkpoints[i]['cobj'] = races[id].chpObjects['chp']; } } } // DEFAULT ABORT OBJECTS { // Get the default checkpoint objects races[id].abortObject = document.getElementById(\"race_\" + id + \"_defaultAbort\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty objects if (races[id].abortObject == '' || races[id].abortObject == '[default]') races[id].abortObject = \"trucktrigger\"; } // DEFAULT ABORT MESSAGE { // Get the default abort message var defaultAbortMessage = document.getElementById(\"race_\" + id + \"_abortMessage\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty messages if (defaultAbortMessage == '' || defaultAbortMessage == '[default]') defaultAbortMessage = \"[noMessage]\"; } // ABORT POINTS { // get race abort points var free_raceAbort = 0; var chps = document.getElementById(\"race_\" + id + \"_raceAbort\").value; chps = chps.split(/\\r?\\n/); var message = defaultAbortMessage; var abortMessageHander = -1; for (var k in abortMessageHandlers) { if (abortMessageHandlers[k] == defaultAbortMessage) abortMessageHander = k; } if (abortMessageHander == -1) { abortMessageHandlers[free_abortMessageHandler] = defaultAbortMessage; abortMessageHander = free_abortMessageHandler; ++free_abortMessageHandler; } for (var i in chps) { // trim the string var line = chps[i].replace(/^\\s+|\\s+$/g, ''); // Ignore comments and empty lines if (line == \"\" || line[0] == ';' || line[0] == '/') continue; // check for the message variable if (line.substr(0, 7) == 'MESSAGE') { var msg = line.substr(7); msg = msg.replace(/^\\s+/g, ''); if (msg[0] != '=') { this.errormsg += normalError(\"Syntax error detected in race \" + races[id].name + \" (\" + id + \") at line \" + (parseInt(i) + 1) + \" of the race abort points field (expected '=' after 'MESSAGE', line ignored).\"); ++this.errors; continue; } var msg = msg.substr(1); msg = msg.replace(/^\\s+/g, ''); if (msg == '') msg = '[noMessage]'; else if (msg == '[default]') msg = defaultAbortMessage; abortMessageHander = -1; for (var k in abortMessageHandlers) { if (abortMessageHandlers[k] == msg) { abortMessageHander = k; break; } } if (abortMessageHander == -1) { abortMessageHandlers[free_abortMessageHandler] = msg; abortMessageHander = free_abortMessageHandler; ++free_abortMessageHandler; } continue; } // Split the line on commas var lineParts = line.split(','); // Length must at least be 6 if (lineParts.length < 6) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: not enough parameters)\"; this.errormsg += normalError(\"Syntax error detected in race \" + races[id].name + \" (\" + id + \") at line \" + (parseInt(i) + 1) + \" of the race abort points field (not enough parameters, line ignored).\"); ++this.errors; continue; } // check if the first 6 parts are numbers var problem = false; for (var k = 0; k < 6; ++k) { if (isNaN(parseFloat(lineParts[k]))) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: parameter\" + (parseInt(k) + 1) + \")\"; this.errormsg += normalError(\"Syntax error detected in race \" + races[id].name + \" (\" + id + \") at line \" + (parseInt(i) + 1) + \" of the race abort points field (line ignored).\"); ++this.errors; problem = true; break; } } if (problem) continue; // assign the numbers to the checkpoint variable races[id].raceAbortPoints[free_raceAbort] = { 'posx': parseFloat(lineParts[0]).toString(), 'posy': parseFloat(lineParts[1]).toString(), 'posz': parseFloat(lineParts[2]).toString(), 'rotx': parseFloat(lineParts[3]).toString(), 'roty': parseFloat(lineParts[4]).toString(), 'rotz': parseFloat(lineParts[5]).toString(), 'cobj': '[default]', 'cmsg_handler': abortMessageHander } // Allways add commas for (var k in races[id].raceAbortPoints[free_raceAbort]) { if (k != 'cobj' && k != 'cmsg_handler' && races[id].raceAbortPoints[free_raceAbort][k].search(/\\./) < 0) races[id].raceAbortPoints[free_raceAbort][k] += \".0\"; } // handle the optional object if (lineParts.length > 6) { var tmpArray = lineParts[6].replace(/^\\s+|\\s+$/g, '').split(' '); if (tmpArray.length > 0) races[id].raceAbortPoints[free_raceAbort]['cobj'] = tmpArray[0]; } // Fix empty objects if (races[id].raceAbortPoints[free_raceAbort]['cobj'] == '') { races[id].raceAbortPoints[free_raceAbort]['cobj'] = '[default]'; } ++free_raceAbort; } // Put the checkpointlist in the textarea again chps = chps.join('\\r\\n'); document.getElementById(\"race_\" + id + \"_raceAbort\").value = chps; // Replace all default objects by the correct objects for (var i in races[id].raceAbortPoints) { if (races[id].raceAbortPoints[i]['cobj'] == '[default]') { races[id].raceAbortPoints[i]['cobj'] = races[id].abortObject; } } } // OPTIONS for (var setting in races[id].options) { races[id].options[setting] = document.getElementById('race_' + id + '_' + setting).checked ? 'true' : 'false'; } // PENALTY SECONDS { // Get the penalty seconds races[id].penaltySeconds = parseInt(document.getElementById(\"race_\" + id + \"_penaltySeconds\").value); if (isNaN(races[id].penaltySeconds) || races[id].penaltySeconds < 0) { this.errormsg += normalError(\"Error detected in race \" + races[id].name + \" (\" + id + \"): penalty seconds should be a positive integer number (using 0 seconds).\"); ++this.errors; races[id].penaltySeconds = 0 } } // PENALTY MESSAGE { // Get the penalty message races[id].penaltyEventMessage = document.getElementById(\"race_\" + id + \"_penaltyMessage\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty messages if (races[id].penaltyEventMessage == '' || races[id].penaltyEventMessage == '[default]') races[id].penaltyEventMessage = \"[noMessage]\"; } return 1; } this.buildRace = function (id) { var main = ' // MAIN SECTION ' + id + ' START\\r\\n'; var general = '// GENERAL SECTION ' + id + ' START\\r\\n'; var raceStart = ' // RACESTART SECTION ' + id + ' START\\r\\n'; var penaltyEvent = ' // PENALTYEVENT SECTION ' + id + ' START\\r\\n'; // The race ID will be a global variable var raceID = 'race_' + id + '_' + races[id].name.replace(/[^a-zA-Z0-9]/g, '_') + '_ID'; general += 'int ' + raceID + ';\\r\\n'; // Start adding the race var script = \" {VAR_RACE_ID} = races.addNewEmptyRace();\\r\\n\"; script += \" races.setRaceName({VAR_RACE_ID}, \\\"{VAR_RACE_NAME}\\\");\\r\\n\"; script += \" races.setLaps({VAR_RACE_ID}, {VAR_RACE_LAPS});\\r\\n\"; main += script.replace(/{VAR_RACE_ID}/g, raceID).replace(/{VAR_RACE_NAME}/g, races[id].name).replace(/{VAR_RACE_LAPS}/g, races[id].laps); main += ' array<array<double>> race_' + id + '_coords = {\\r\\n'; for (var i in races[id].checkpoints) { if (i == (races[id].checkpoints.length - 1)) main += ' {' + races[id].checkpoints[i]['posx'] + ', ' + races[id].checkpoints[i]['posy'] + ', ' + races[id].checkpoints[i]['posz'] + ', ' + races[id].checkpoints[i]['rotx'] + ', ' + races[id].checkpoints[i]['roty'] + ', ' + races[id].checkpoints[i]['rotz'] + '}\\r\\n'; else main += ' {' + races[id].checkpoints[i]['posx'] + ', ' + races[id].checkpoints[i]['posy'] + ', ' + races[id].checkpoints[i]['posz'] + ', ' + races[id].checkpoints[i]['rotx'] + ', ' + races[id].checkpoints[i]['roty'] + ', ' + races[id].checkpoints[i]['rotz'] + '},\\r\\n'; } main += ' };\\r\\n'; for (var i in races[id].checkpoints) { main += ' races.addCheckpoint(' + raceID + ', ' + i + ', \\\"' + races[id].checkpoints[i]['cobj'] + '\\\", race_' + id + '_coords[' + i + ']);\\r\\n'; } // set the race version if (races[id].version != '') main += ' races.setVersion(' + raceID + ', \"' + races[id].version + '\");\\r\\n'; // penalty seconds if (races[id].penaltySeconds > 0) main += ' races.setPenaltyTime(' + raceID + ', ' + races[id].penaltySeconds + ');\\r\\n'; // penalty message if (races[id].penaltyEventMessage != '[noMessage]') { penaltyEvent += ' if( raceID == ' + raceID + ' )\\r\\n'; penaltyEvent += ' {\\r\\n'; penaltyEvent += ' races.message(\"' + races[id].penaltyEventMessage + '\", \"lightning.png\");\\r\\n'; penaltyEvent += ' }\\r\\n'; } // race abort points for (var i in races[id].raceAbortPoints) { main += ' races.addCancelPoint(' + raceID + ', \\\"' + races[id].raceAbortPoints[i]['cobj'] + '\\\", vector3(' + races[id].raceAbortPoints[i]['posx'] + 'f, ' + races[id].raceAbortPoints[i]['posy'] + 'f, ' + races[id].raceAbortPoints[i]['posz'] + 'f), vector3(' + races[id].raceAbortPoints[i]['rotx'] + 'f, ' + races[id].raceAbortPoints[i]['roty'] + 'f, ' + races[id].raceAbortPoints[i]['rotz'] + 'f)'; if (abortMessageHandlers[races[id].raceAbortPoints[i]['cmsg_handler']] != '[noMessage]') main += ', on_RaceAbort_event' + races[id].raceAbortPoints[i]['cmsg_handler'] + ');\\r\\n'; else main += ');\\r\\n'; // main += ' races.addCancelPoint('+raceID+', \\\"'+races[id].raceAbortPoints[i]['cobj']+'\\\", vector3('+races[id].raceAbortPoints[i]['posx']+'f, '+races[id].raceAbortPoints[i]['posy']+'f, '+races[id].raceAbortPoints[i]['posz']+'f), vector3('+races[id].raceAbortPoints[i]['rotx']+'f, '+races[id].raceAbortPoints[i]['roty']+'f, '+races[id].raceAbortPoints[i]['rotz']+'f), on_RaceAbort_event'+races[id].raceAbortPoints[i]['cmsg_handler']+');\\r\\n'; } // Tell the races script that the race is completed now main += ' races.finalize(' + raceID + ');\\r\\n'; // set the options raceStart += ' if( raceID == ' + raceID + ' )\\r\\n'; raceStart += ' {\\r\\n'; for (var setting in races[id].options) { raceStart += ' races.' + setting + ' = ' + races[id].options[setting] + ';\\r\\n'; } raceStart += ' }\\r\\n'; main += ' // MAIN SECTION ' + id + ' END\\r\\n'; general += '// GENERAL SECTION ' + id + ' END\\r\\n'; raceStart += ' // RACESTART SECTION ' + id + ' END\\r\\n'; penaltyEvent += ' // PENALTYEVENT SECTION ' + id + ' END\\r\\n'; this.scriptSections['main'] += '\\r\\n' + main + '\\r\\n'; this.scriptSections['general'] += '\\r\\n' + general + '\\r\\n'; this.scriptSections['RaceStart'] += '\\r\\n' + raceStart + '\\r\\n'; this.scriptSections['PenaltyEvent'] += '\\r\\n' + penaltyEvent + '\\r\\n'; return 1; } this.generate = function () { var r; this.scriptSections['main'] = ''; this.scriptSections['general'] = ''; this.scriptSections['RaceStart'] = ''; this.scriptSections['PenaltyEvent'] = ''; abortMessageHandlers.length = 0; abortMessageHandlers = new Array(); free_abortMessageHandler = 0; // build all the races for (var id in races) { if (races[id].used) { r = this.generateRace(id); } } // get the terrain file setting var terrnFile = document.getElementById(\"general_terrnFilename\").value.replace(/^\\s+|\\s+$/g, ''); // DEFAULT ABORT MESSAGE { // Get the default abort message var defaultAbortMessage = document.getElementById(\"race_-1_abortMessage\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty messages if (defaultAbortMessage == '' || defaultAbortMessage == '[default]') defaultAbortMessage = \"[noMessage]\"; } // ABORT POINTS { // get race abort points var free_raceAbort = 0; var abortObject = document.getElementById(\"race_-1_defaultAbort\").value.replace(/^\\s+|\\s+$/g, ''); // check for empty objects if (abortObject == '' || abortObject == '[default]') abortObject = \"trucktrigger\"; var raceAbortPoints = new Array(); var chps = document.getElementById(\"race_-1_raceAbort\").value; chps = chps.split(/\\r?\\n/); var message = defaultAbortMessage; var abortMessageHander = -1; for (var k in abortMessageHandlers) { if (abortMessageHandlers[k] == defaultAbortMessage) abortMessageHander = k; } if (abortMessageHander == -1) { abortMessageHandlers[free_abortMessageHandler] = defaultAbortMessage; abortMessageHander = free_abortMessageHandler; ++free_abortMessageHandler; } for (var i in chps) { // trim the string var line = chps[i].replace(/^\\s+|\\s+$/g, ''); // Ignore comments and empty lines if (line == \"\" || line[0] == ';' || line[0] == '/') continue; // check for the message variable if (line.substr(0, 7) == 'MESSAGE') { var msg = line.substr(7); msg = msg.replace(/^\\s+/g, ''); if (msg[0] != '=') { this.errormsg += normalError(\"Syntax error detected at line \" + (parseInt(i) + 1) + \" of the general race abort points field (expected '=' after 'MESSAGE', line ignored).\"); ++this.errors; continue; } var msg = msg.substr(1); msg = msg.replace(/^\\s+/g, ''); if (msg == '') msg = '[noMessage]'; else if (msg == '[default]') msg = defaultAbortMessage; abortMessageHander = -1; for (var k in abortMessageHandlers) { if (abortMessageHandlers[k] == msg) { abortMessageHander = k; break; } } if (abortMessageHander == -1) { abortMessageHandlers[free_abortMessageHandler] = msg; abortMessageHander = free_abortMessageHandler; ++free_abortMessageHandler; } continue; } // Split the line on commas var lineParts = line.split(','); // Length must at least be 6 if (lineParts.length < 6) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: not enough parameters)\"; this.errormsg += normalError(\"Syntax error detected at line \" + (parseInt(i) + 1) + \" of the general race abort points field (not enough parameters, line ignored).\"); ++this.errors; continue; } // check if the first 6 parts are numbers var problem = false; for (var k = 0; k < 6; ++k) { if (isNaN(parseFloat(lineParts[k]))) { if (chps[i].search(\"IGNORED\") < 0) chps[i] += \" <- IGNORED (syntax error: parameter\" + (parseInt(k) + 1) + \")\"; this.errormsg += normalError(\"Syntax error detected at line \" + (parseInt(i) + 1) + \" of the general race abort points field (line ignored).\"); ++this.errors; problem = true; break; } } if (problem) continue; // assign the numbers to the checkpoint variable raceAbortPoints[free_raceAbort] = { 'posx': parseFloat(lineParts[0]).toString(), 'posy': parseFloat(lineParts[1]).toString(), 'posz': parseFloat(lineParts[2]).toString(), 'rotx': parseFloat(lineParts[3]).toString(), 'roty': parseFloat(lineParts[4]).toString(), 'rotz': parseFloat(lineParts[5]).toString(), 'cobj': '[default]', 'cmsg_handler': abortMessageHander } // Allways add commas for (var k in raceAbortPoints[free_raceAbort]) { if (k != 'cobj' && k != 'cmsg_handler' && raceAbortPoints[free_raceAbort][k].search(/\\./) < 0) raceAbortPoints[free_raceAbort][k] += \".0\"; } // handle the optional object if (lineParts.length > 6) { var tmpArray = lineParts[6].replace(/^\\s+|\\s+$/g, '').split(' '); if (tmpArray.length > 0) raceAbortPoints[free_raceAbort]['cobj'] = tmpArray[0]; } // Fix empty objects if (raceAbortPoints[free_raceAbort]['cobj'] == '') { raceAbortPoints[free_raceAbort]['cobj'] = '[default]'; } ++free_raceAbort; } // Put the checkpointlist in the textarea again chps = chps.join('\\r\\n'); document.getElementById(\"race_-1_raceAbort\").value = chps; // Replace all default objects by the correct objects for (var i in raceAbortPoints) { if (raceAbortPoints[i]['cobj'] == '[default]') { raceAbortPoints[i]['cobj'] = abortObject; } } if (free_raceAbort > 0) { // build the race abort points this.scriptSections['main'] += '\\r\\n'; this.scriptSections['main'] += ' // MAIN SECTION GENERAL START\\r\\n'; for (var i in raceAbortPoints) { this.scriptSections['main'] += ' races.addCancelPoint(-1, \\\"' + raceAbortPoints[i]['cobj'] + '\\\", vector3(' + raceAbortPoints[i]['posx'] + 'f, ' + raceAbortPoints[i]['posy'] + 'f, ' + raceAbortPoints[i]['posz'] + 'f), vector3(' + raceAbortPoints[i]['rotx'] + 'f, ' + raceAbortPoints[i]['roty'] + 'f, ' + raceAbortPoints[i]['rotz'] + 'f)'; if (abortMessageHandlers[raceAbortPoints[i]['cmsg_handler']] != '[noMessage]') this.scriptSections['main'] += ', on_RaceAbort_event' + raceAbortPoints[i]['cmsg_handler'] + ');\\r\\n'; else this.scriptSections['main'] += ');\\r\\n'; } this.scriptSections['main'] += ' // MAIN SECTION GENERAL END\\r\\n'; this.scriptSections['main'] += '\\r\\n'; } } // build abort point functions this.scriptSections['general'] += '\\r\\n// GENERAL SECTION GENERAL START\\r\\n'; for (var i in abortMessageHandlers) { if (abortMessageHandlers[i] == '[noMessage]') continue; this.scriptSections['general'] += '\\r\\n'; this.scriptSections['general'] += 'void on_RaceAbort_event' + i + '(dictionary@ event)\\r\\n'; this.scriptSections['general'] += '{\\r\\n'; this.scriptSections['general'] += ' races.message(\"' + abortMessageHandlers[i] + '\", \"stop.png\");\\r\\n'; this.scriptSections['general'] += '}\\r\\n'; } this.scriptSections['general'] += '\\r\\n// GENERAL SECTION GENERAL END\\r\\n'; var script = \"\"; if (this.scriptSections['main'] == '' && this.scriptSections['general'] == '' && this.scriptSections['RaceStart'] == '') { this.errormsg += fatalError(\"Failed to generate a script file (no races to create).\"); ++this.errors; script = '// Failed to generate the script.'; } else { if (terrnFile != '') script += \"// Filename: \" + terrnFile + \"\\r\\n\"; script += \"// This file was generated using the docs.rigsofrods.org race script generator.\\r\\n\"; script += \"#include \\\"base.as\\\";\\r\\n\"; script += \"#include \\\"races.as\\\";\\r\\n\"; script += \"\\r\\n\"; script += \"racesManager races();\\r\\n\"; script += \"\\r\\n\"; script += this.scriptSections['general'] + \"\\r\\n\"; script += \"\\r\\n\"; // main script += \"void main()\\r\\n\"; script += \"{\\r\\n\"; script += \" races.setCallback('RaceStart', on_RaceStart_event);\\r\\n\"; script += \" races.setCallback('PenaltyEvent', on_PenaltyEvent_event);\\r\\n\"; script += \" races.showCheckPointInfoWhenNotInRace = \" + (document.getElementById('race_-1_showCheckPointInfoWhenNotInRace').checked ? 'true' : 'false') + \";\\r\\n\"; script += this.scriptSections['main'] + \"\\r\\n\"; script += \"}\\r\\n\"; script += \"\\r\\n\"; // on_RaceStart_event script += \"void on_RaceStart_event(dictionary@ event)\\r\\n\"; script += \"{\\r\\n\"; script += \" int raceID;\\r\\n\"; script += \" event.get('raceID', raceID);\\r\\n\"; script += \"\\r\\n\"; script += this.scriptSections['RaceStart'] + \"\\r\\n\"; script += \"}\\r\\n\"; script += \"\\r\\n\"; // on_PenaltyEvent_event script += \"void on_PenaltyEvent_event(dictionary@ event)\\r\\n\"; script += \"{\\r\\n\"; script += \" int raceID;\\r\\n\"; script += \" event.get('raceID', raceID);\\r\\n\"; script += \"\\r\\n\"; script += this.scriptSections['PenaltyEvent'] + \"\\r\\n\"; script += \"}\\r\\n\"; script += \"\\r\\n\"; // eventCallback script += \"void eventCallback(int eventnum, int value)\\r\\n\"; script += \"{\\r\\n\"; script += \" races.eventCallback(eventnum, value);\\r\\n\"; script += \"}\\r\\n\"; script += \"\\r\\n\"; // on_RaceAbort_event //script += \"void on_RaceAbort_event(dictionary@ event)\\r\\n\"; //script += \"{\\r\\n\"; //script += \" int raceID;\\r\\n\"; //script += \" event.get('raceID', raceID);\\r\\n\"; //script += \"\\r\\n\"; //script += this.scriptSections['RaceAbort']+\"\\r\\n\"; //script += \"}\\r\\n\"; //script += \"\\r\\n\"; } document.getElementById(\"scriptResult\").value = script; if (this.errors == 0) { this.errormsg += noError(\"Build successful! (no errors occurred)\"); } document.getElementById(\"errorMessageField\").innerHTML = this.errormsg; this.errormsg = \"\"; if (this.errors > 0) { alert(\"Generated script file with \" + this.errors + \" errors.\"); this.errors = 0; } } } function race(id) { this.id = id; this.used = true; this.name = ''; this.laps = -1; this.version = ''; this.options = { 'obligatedFinish': 'false', 'showTimeDiff': 'true', 'showBestLap': 'true', 'showBestRace': 'true', 'submitScore': 'true', 'silentMode': 'false', //'allowVehicleChanging': 'false', //'abortOnVehicleExit': 'false', //'showCheckPointInfoWhenNotInRace': 'false', 'restartRaceOnStart': 'true' }; this.penaltyEventMessage = ''; this.penaltySeconds = 0; this.chpObjects = { 'start': 'chp-start', 'chp': 'chp-checkpoint', 'finish': 'chp-start' }; this.checkpoints = new Array(); this.abortObject = 'trucktrigger'; this.raceAbortPoints = new Array(); this.raceAbortMessage = '[noMessage]'; this.lastAbortMessage = '[noMessage]'; } // unused function on_raceCount_change(select) { var newRaceCount = parseInt(select.options[select.selectedIndex].value); var form = document.getElementById(\"formTemplate\").innerHTML; var formDiv = document.getElementById(\"formDiv\"); var raceCount = getRaceCount for (var i = 1; i <= newRaceCount - raceCount; ++i) { formDiv.innerHTML += form.replace(/{RACE_NUMBER}/g, (i + raceCount)); } /*for( var i = 1; i <= raceCount-newRaceCount; ++i ) { formDiv.removeChild(document.getElementById( innerHTML += form.replace(\"{RACE_NUMBER}\", (i+raceCount)); } race_{RACE_NUMBER}*/ raceCount = newRaceCount; } function on_addRace_click() { var form = document.getElementById(\"formTemplate\").innerHTML; form = form.replace(/{RACE_NUMBER}/g, free_race); var formDiv = document.getElementById(\"formDiv\"); var newdiv = document.createElement('div'); newdiv.setAttribute('id', 'race_' + free_race + '_containerDiv'); newdiv.innerHTML = form; formDiv.appendChild(newdiv); //formDiv.innerHTML += form.replace(/{RACE_NUMBER}/g, free_race); races[free_race] = new race(free_race); ++free_race; } function on_option_change(name, racenum) { var checkObj = document.getElementById(\"race_\" + racenum + \"_\" + name); var infoObj = document.getElementById(\"race_\" + racenum + \"_\" + name + \"_info\"); if (name == \"obligatedFinish\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: If you drive through the start checkpoint of a race while already in another race, the current race will continue and the other race start line will be ignored.]\" else infoObj.innerHTML = \"[Current setting: If you drive through the start checkpoint of a race while already in another race, the current race will be aborted and the other race will start.]\"; } else if (name == \"showTimeDiff\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: Show + or - [best time minus current time] when you pass a checkpoint.]\" else infoObj.innerHTML = \"[Current setting: Only show the current time when you pass a checkpoint.]\"; } else if (name == \"showBestLap\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: If a race is started or a new best lap is set, the best lap will be shown.]\" else infoObj.innerHTML = \"[Current setting: Best lap times won't be shown to the user.]\"; } else if (name == \"showBestRace\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: If a race is started or a new best race time is set, the best race time will be shown.]\" else infoObj.innerHTML = \"[Current setting: Best race times won't be shown to the user.]\"; } else if (name == \"submitScore\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: If the user has a new best lap time or new best race time, then this time is submitted to the master server.]\" else infoObj.innerHTML = \"[Current setting: Race and lap times won't be sent to the master server.]\"; } else if (name == \"silentMode\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: No info will be shown to the user, except for the timer.]\" else infoObj.innerHTML = \"[Current setting: The user will be informed about running races.]\"; } else if (name == \"showCheckPointInfoWhenNotInRace\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: If the user drives through a checkpoint of a race that isn't running, a message will be shown, saying \\\"this is checkpoint X of race myRaceName\\\".]\" else infoObj.innerHTML = \"[Current setting: If the user drives through a (not start line) checkpoint of a race that isn't running, nothing will happen.]\"; } else if (name == \"restartRaceOnStart\") { if (checkObj.checked) infoObj.innerHTML = \"[Current setting: The race will be restarted when you pass the start line of the same race.]\" else infoObj.innerHTML = \"[Current setting: The race will continue to run without resetting the time when you pass the start line of the same race.]\"; } } function on_closeIcon_click(racenum) { var formDiv = document.getElementById(\"formDiv\"); var obj = document.getElementById(\"race_\" + racenum + \"_containerDiv\"); formDiv.removeChild(obj); races[racenum].used = false; reUseRaceNumbers(); } function on_checkpointField_focus(obj, defaultText, defaultValue) { checkpointFieldFocussed = true; if (obj.value == defaultText) obj.value = defaultValue; obj.select(); } function on_checkpointField_blur(obj, defaultText, defaultValue) { checkpointFieldFocussed = false; if (obj.value == defaultValue) obj.value = defaultText; } function on_checkpointField_mouseOver(obj, defaultText, defaultValue) { if (checkpointFieldFocussed) return; if (obj.value == defaultText) obj.value = defaultValue; } function on_checkpointField_mouseOut(obj, defaultText, defaultValue) { if (checkpointFieldFocussed) return; if (obj.value == defaultValue) obj.value = defaultText; } function on_fieldAdd_click(racenum, idPrefix, fieldID) { // check the position and rotation var fields = new Array('posx', 'posy', 'posz', 'rotx', 'roty', 'rotz'); var defaults = new Array('pos x', 'pos y', 'pos z', 'rot x', 'rot y', 'rot z'); var texts = new Array('position x', 'position y', 'position z', 'rotation x', 'rotation y', 'rotation z'); var coords = new Array(); for (var i in fields) { var cd = document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + '_' + fields[i]).value; // http://developer.loftdigital.com/blog/trim-a-string-in-javascript cd = cd.replace(/^\\s+|\\s+$/g, '') if (cd == defaults[i]) cd = \"0.0\"; else if (isNaN(parseFloat(document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + '_' + fields[i]).value))) { alert(\"Unable to add object: '\" + texts[i] + \"' is not a number!\"); return; } coords[i] = parseFloat(cd); } // check the checkpoint object var cobj = document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_cobj\").value; // http://developer.loftdigital.com/blog/trim-a-string-in-javascript cobj = cobj.replace(/^\\s+|\\s+$/g, ''); if (cobj == \"\" || cobj == \"object\") { cobj = \"[default]\"; } var line = \"\\r\\n\"; if (idPrefix == 'raceAbort') { // check the race abort message var cmsg = document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_cmsg\").value; // http://developer.loftdigital.com/blog/trim-a-string-in-javascript cmsg = cmsg.replace(/^\\s+|\\s+$/g, ''); if (cmsg == \"\" || cmsg == \"message to show\") { cmsg = \"[default]\"; } var lastCmsg; if (racenum == -1) { lastCmsg = lastAbortMessage; lastAbortMessage = cmsg; } else { lastCmsg = races[racenum].lastAbortMessage races[racenum].lastAbortMessage = cmsg; } if (lastCmsg != cmsg) line += 'MESSAGE = ' + cmsg + '\\r\\n'; if (cmsg == \"[default]\") document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_cmsg\").value = \"message to show\"; } // Add the line to the textarea for (var i in coords) { if (coords[i].toString().search(/\\./) >= 0) line += coords[i] + \", \"; else line += coords[i] + \".0, \"; } line += cobj; document.getElementById(\"race_\" + racenum + \"_\" + fieldID).value += line; // reset all the default values document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_posx\").value = \"pos x\"; document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_posy\").value = \"pos y\"; document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_posz\").value = \"pos z\"; document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_rotx\").value = \"rot x\"; document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_roty\").value = \"rot y\"; document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_rotz\").value = \"rot z\"; if (cobj == \"[default]\") document.getElementById(\"race_\" + racenum + \"_\" + idPrefix + \"_cobj\").value = \"object\"; if (idPrefix == \"chpAdd\") drawPreview(racenum); } function reUseRaceNumbers() { for (var i = free_race - 1; i >= 0 && races[i].used == false; --i) { --free_race; } } function init() { for (var i = 0; i < 200; ++i) { } on_addRace_click(); } function on_generate_click() { myScriptFile.generate(); } function on_laps_change(obj, racenum) { if (obj.options[obj.selectedIndex].value == \"other...\") document.getElementById(\"race_\" + racenum + \"_lapsOther\").style.display = \"inline-table\"; else document.getElementById(\"race_\" + racenum + \"_lapsOther\").style.display = \"none\"; if (obj.options[obj.selectedIndex].value.substr(0, 7) == \"No laps\") document.getElementById(\"race_\" + racenum + \"_defaultFinish\").disabled = false; else document.getElementById(\"race_\" + racenum + \"_defaultFinish\").disabled = true; } function enforceDefault(obj, defaultValue) { if (obj.value.replace(/^\\s+|\\s+$/g, '') == '') obj.value = defaultValue; } function drawPreview(id) { // get the checkpoints into an array var checkpoints = []; { // get checkpoints var free_checkpoint = 0; var chps = document.getElementById(\"race_\" + id + \"_checkpoints\").value; chps = chps.split(/\\r?\\n/); for (var i in chps) { // trim the string var line = chps[i].replace(/^\\s+|\\s+$/g, ''); // Ignore comments and empty lines if (line == \"\" || line[0] == ';' || line[0] == '/') continue; // Split the line on commas var lineParts = line.split(','); // Length must at least be 6 if (lineParts.length < 6) continue; // check if the first 6 parts are numbers var problem = false; for (var k = 0; k < 6; ++k) { if (isNaN(parseFloat(lineParts[k]))) { problem = true; break; } } if (problem) continue; // assign the numbers to the checkpoint variable checkpoints[free_checkpoint] = { 'posx': parseFloat(lineParts[0]).toString(), 'posy': parseFloat(lineParts[1]).toString(), 'posz': parseFloat(lineParts[2]).toString(), 'rotx': parseFloat(lineParts[3]).toString(), 'roty': parseFloat(lineParts[4]).toString(), 'rotz': parseFloat(lineParts[5]).toString(), 'cobj': '[default]' } // Allways add commas /*for( var k in checkpoints[free_checkpoint] ) { if( k != 'cobj' && k != 'cmsg_handler' && checkpoints[free_checkpoint][k].search(/\\./) < 0 ) checkpoints[free_checkpoint][k] += \".0\"; }*/ ++free_checkpoint; } } // Initializations var canvas = document.getElementById(\"race_\" + id + \"_canvas\"); var context = canvas.getContext(\"2d\"); context.clearRect(0, 0, 220, 220); var maxX = 200.00; var maxZ = 200.00; var minX = 99999.00; var minZ = 99999.00; for (var k in checkpoints) { if (Math.ceil(parseFloat(checkpoints[k].posx)) > maxX) { maxX = checkpoints[k].posx; } if (Math.ceil(parseFloat(checkpoints[k].posx)) < minX) { minX = checkpoints[k].posx; } if (Math.ceil(parseFloat(checkpoints[k].posz)) > maxZ) { maxZ = checkpoints[k].posz; } if (Math.ceil(parseFloat(checkpoints[k].posz)) < minZ) { minZ = checkpoints[k].posz; } } // Transform the positions for (var k in checkpoints) { checkpoints[k].posz -= minZ; checkpoints[k].posx -= minX; } maxX -= minX; maxZ -= minZ; // We need at least 1 checkpoint if (checkpoints.length == 0) return; // Check if the race has laps var raceHasLaps = false; if ((document.getElementById(\"race_\" + id + \"_laps\").value in myScriptFile.lapSelections) && (myScriptFile.lapSelections[document.getElementById(\"race_\" + id + \"_laps\").value] != 'races.LAPS_NoLaps') ) { raceHasLaps = true; } // Put some dots whereever a checkpoint is context.fillStyle = \"green\"; context.fillRect((checkpoints[0].posx / maxX * 180 + 10) - 5, (checkpoints[0].posz / maxZ * 180 + 10) - 5, 10, 10); context.fillStyle = \"red\"; context.fillRect((checkpoints[checkpoints.length - 1].posx / maxX * 180 + 10) - 5, (checkpoints[checkpoints.length - 1].posz / maxZ * 180 + 10) - 5, 10, 10); for (var i = 0; i < checkpoints.length; ++i) { context.fillStyle = \"blue\"; context.fillRect((checkpoints[i].posx / maxX * 180 + 10) - 2, (checkpoints[i].posz / maxZ * 180 + 10) - 2, 4, 4); } // connect the dots context.beginPath(); context.moveTo((checkpoints[0].posx / maxX * 180 + 10), (checkpoints[0].posz / maxZ * 180 + 10)); for (var i = 1; i < checkpoints.length; ++i) { context.lineTo((checkpoints[i].posx / maxX * 180 + 10), (checkpoints[i].posz / maxZ * 180 + 10)); } if (raceHasLaps) context.lineTo((checkpoints[0].posx / maxX * 180 + 10), (checkpoints[0].posz / maxZ * 180 + 10)); context.stroke(); context.closePath(); } // utils function fatalError(str) { return '<font color=\"red\">FATAL| ' + str + '</font><br />'; } function normalError(str) { return '<font color=\"orange\">ERROR| ' + str + '</font><br />'; } function noError(str) { return '<font color=\"green\">SUCCESS| ' + str + '</font><br />'; } function printMsg(str) { document.getElementById('errorMessageField').innerHTML += str + '<br />'; } General General Settings Show chp info? [Current setting: If the user drives through a (not start line) checkpoint of a race that isn't running, nothing will happen.] Script filename: [optional, the extension of this file should be .as.] General abort points (advanced) The race abort points defined here, will abort whichever race is running at that moment. General abort points: [Note: Leave the object or message field empty to use the default. You can change the defaults below.] Default abort object: [optional, the object that should be used for race abort points if no object (or [default]) is specified above.] Default abort message: [optional, the message that should be shown when a race is aborted and the [default] message is used above.] Add more races or generate the script [Start here. You can have multiple races on 1 terrain.] [Generate the scripting file when you're finished adding all the races.] Error log Resulting script file Race {RACE_NUMBER} remove this race General race info Race name: Amount of laps: No laps (the first checkpoint will be the start line and the last checkpoint will be the finish line) 1 lap (the first checkpoint will be both the start and finish line) 2 laps 3 laps 4 laps 5 laps 6 laps 7 laps 8 laps 9 laps Never ending race (unlimited amount of laps) other... Race version: [optional] Race options (advanced) Finishing obligatory? [Current setting: If you drive through the start checkpoint of a race while already in another race, the current race will be aborted and the other race will start.] Show time difference? [Current setting: Show + or - [best time minus current time] when passing a checkpoint.] Show best lap time? [Current setting: If a race is started or a new best lap is set, the best lap will be shown.] Show best race time? [Current setting: If a race is started or a new best race time is set, the best race time will be shown.] Submit best time? [Current setting: If the user has a new best lap time or new best race time, then this time is submitted to the master server.] Silent mode? [Current setting: The user will be informed about running races.] Allow race restart? [Current setting: The race will be restarted when you pass the start line of the same race.] Checkpoint locations and checkpoint objects Checkpoint coordinates: [Note: Leave the object field empty to use the default. You can change the defaults below.] Default start object: [optional, the start line object that should be used if it wasn't specified with in the checkpointlist above.] Default chp object: [optional, the checkpoint object that should be used for all checkpoints that do not have an object specified in the checkpointlist above.] Default finish object: [optional, the finish line object that should be used if it wasn't specified with in the checkpointlist above.] Preview: Unsupported browser! Race abort points (advanced) Race abort points: [Note: Leave the object or message field empty to use the default. You can change the defaults below.] Default abort object: [optional, the object that should be used for race abort points if no object (or [default] object) is specified above.] Default abort message: [optional, the message that should be shown when a race is aborted and the [default] message is used above.] Race penalty events (advanced) The settings in this box only apply if a 'race_penalty' box was triggered. You can define 'race_penalty' points in the odef file of your checkpoint. Penalty seconds: [the amount of seconds that should be added to the lap time when the penalty event is triggered.] Message: [optional, the message that should be shown when a penalty event is triggered.]","title":"Race script generator"},{"location":"terrain-creation/race-generator/#what-is-this","text":"This is a generator for creating functional races (or timers) for terrains in Rigs of Rods, created by Neorej16 and ported to docs.rigsofrods.org by CuriousMike.","title":"What is this?"},{"location":"terrain-creation/race-generator/#instructions","text":"Start by clicking \"Add race\". You can have multiple races on one terrain.","title":"Instructions"},{"location":"terrain-creation/race-generator/#general-race-info","text":"","title":"General race info"},{"location":"terrain-creation/race-generator/#race-name","text":"The name of your race, shown in the top left corner.","title":"Race name"},{"location":"terrain-creation/race-generator/#amount-of-laps","text":"The amount of laps your race will have. For point-to-point races, set \"No laps\".","title":"Amount of laps"},{"location":"terrain-creation/race-generator/#race-version","text":"The version number of your race. (e.g. authorName-1.0 ).","title":"Race version"},{"location":"terrain-creation/race-generator/#race-options","text":"","title":"Race options"},{"location":"terrain-creation/race-generator/#finishing-obligatory","text":"Disabled (Default): If you drive through the start checkpoint of a race while already in another race, the current race will be aborted and the other race will start. Enabled: If you drive through the start checkpoint of a race while already in another race, the current race will continue and the other race start line will be ignored.","title":"Finishing obligatory?"},{"location":"terrain-creation/race-generator/#show-time-difference","text":"Enabled (Default): Show + or - [best time minus current time] when passing a checkpoint. Disabled: Only show the current time when you pass a checkpoint.","title":"Show time difference?"},{"location":"terrain-creation/race-generator/#show-best-lap-time","text":"Enabled (Default): If a race is started or a new best lap is set, the best lap will be shown. Disabled: Best lap times won't be shown to the user.","title":"Show best lap time?"},{"location":"terrain-creation/race-generator/#show-best-race-time","text":"Enabled (Default): If a race is started or a new best race time is set, the best race time will be shown. Disabled: Best lap times won't be shown to the user.","title":"Show best race time?"},{"location":"terrain-creation/race-generator/#submit-best-time","text":"Enabled (Default): If the user has a new best lap time or new best race time, then this time is submitted to the master server. Disabled: Race and lap times won't be sent to the master server.","title":"Submit best time?"},{"location":"terrain-creation/race-generator/#silent-mode","text":"Disabled (Default): The user will be informed about running races. Enabled: No info will be shown to the user, except for the timer.","title":"Silent mode?"},{"location":"terrain-creation/race-generator/#allow-race-restart","text":"Enabled (Default): The race will be restarted when you pass the start line of the same race. Disabled: The race will continue to run without resetting the time when you pass the start line of the same race.","title":"Allow race restart?"},{"location":"terrain-creation/race-generator/#checkpoint-locations-and-objects","text":"This section defines the locations of the checkpoints and what objects to use for the checkpoints.","title":"Checkpoint locations and objects"},{"location":"terrain-creation/race-generator/#retrieving-checkpoint-coordinates","text":"To easily get the checkpoint coordinates, do the following: Open RoR and select your terrain While not in a vehicle, walk to where you want your checkpoint to be, then press the H key. Repeat for all checkpoints you want to add. When finished, exit RoR and open the RoR.log file, located at Documents\\My Games\\Rigs of Rods\\logs . Scroll to the end of the file, you should see position lines like the following: 00:58:49: Position: 486.504, 0.000, 512.000, 0.0, 360.0, 0.0 00:58:58: Position: 457.481, 0.000, 500.993, 0.0, 396.3, 0.0 00:59:05: Position: 470.764, 0.000, 464.283, 0.0, 484.1, 0.0 00:59:14: Position: 526.697, 0.000, 482.188, 0.0, 573.8, 0.0 00:59:20: Position: 564.749, 0.000, 465.543, 0.0, 512.7, 0.0 00:59:26: Position: 584.245, 0.000, 496.841, 0.0, 613.8, 0.0 00:59:32: Position: 550.343, 0.000, 511.211, 0.0, 716.8, 0.0 These are your checkpoint's position coordinates. Copy the lines to a new file as you'll need to edit it later.","title":"Retrieving checkpoint coordinates"},{"location":"terrain-creation/race-generator/#adding-coordinates","text":"To add the coordinates you retrieved from the log file, edit the lines to match the format below: 486.504, 0.000, 512.000, 0.0, 360.0, 0.0, [default] 457.481, 0.000, 500.993, 0.0, 396.3, 0.0, [default] 470.764, 0.000, 464.283, 0.0, 484.1, 0.0, [default] 526.697, 0.000, 482.188, 0.0, 573.8, 0.0, [default] 564.749, 0.000, 465.543, 0.0, 512.7, 0.0, [default] 584.245, 0.000, 496.841, 0.0, 613.8, 0.0, [default] 550.343, 0.000, 511.211, 0.0, 716.8, 0.0, [default] Then paste the lines into the \"Checkpoint coordinates\" box. Example: A preview of the checkpoint layout will be shown.","title":"Adding coordinates"},{"location":"terrain-creation/race-generator/#checkpoint-objects","text":"At the end of each coordinate line is the name of the checkpoint object. This defines the checkpoint visuals. Each line can have a different checkpoint object. However, for simplicity's sake, you can set the default object names in the Default start / checkpoint / finish object sections. These objects will be used if you specify a checkpoint name in the coordinates list as [default] . By default, RoR includes these checkpoint models: The names for these objects are chp-start and chp-checkpoint . You can also use a custom object. Here are a few checkpoints you can use, just extract the contents into your terrain's zip file:","title":"Checkpoint objects"},{"location":"terrain-creation/race-generator/#f1-test-track-checkpoint","text":"These are the checkpoints from F1 Test Track , updated with fixed normals and new textures. Object names: new-checkpoint-start and new-checkpoint . Download: f1_checkpoint.zip","title":"F1 Test Track Checkpoint"},{"location":"terrain-creation/race-generator/#empty-checkpoint","text":"This checkpoint has no visuals. Useful for meshed terrains which have a clearly defined layout (such as tracks) or multiple races which share checkpoint locations. Object name: empty-checkpoint . Download: empty_checkpoint.zip","title":"Empty Checkpoint"},{"location":"terrain-creation/race-generator/#race-abort-points","text":"Optional, defines points which will abort the current race. Use the same coordinate format as above.","title":"Race abort points"},{"location":"terrain-creation/race-generator/#race-penalty-events","text":"Not used by any of the included checkpoints. Defines settings for the race_penalty box. To add a race_penalty box, edit the odef file of your checkpoint. (See begin box section)","title":"Race penalty events"},{"location":"terrain-creation/race-generator/#general-settings","text":"","title":"General settings"},{"location":"terrain-creation/race-generator/#show-checkpoint-info","text":"Disabled (Default): If the user drives through a (not start line) checkpoint of a race that isn't running, nothing will happen. Enabled: If the user drives through a checkpoint of a race that isn't running, a message will be shown, saying \"this is checkpoint X of race myRaceName\".","title":"Show checkpoint info?"},{"location":"terrain-creation/race-generator/#script-filename","text":"The file name of your race script with the .as file extension. Example: myTerrain.as","title":"Script filename"},{"location":"terrain-creation/race-generator/#general-abort-points","text":"Optional, defines points which will abort any current race. Use the same coordinate format as above.","title":"General abort points"},{"location":"terrain-creation/race-generator/#generating-completed-script","text":"Once you're finally done setting up your race(s), click Generate script file! to generate the finished script. Example completed script of a basic 2 lap race on Simple Test Terrain: // Filename: TestRace.as // This file was generated using the docs.rigsofrods.org race script generator. #include \"base.as\"; #include \"races.as\"; racesManager races(); // GENERAL SECTION 0 START int race_0_Simple_Test_Race_ID; // GENERAL SECTION 0 END // GENERAL SECTION GENERAL START // GENERAL SECTION GENERAL END void main() { races.setCallback('RaceStart', on_RaceStart_event); races.setCallback('PenaltyEvent', on_PenaltyEvent_event); races.showCheckPointInfoWhenNotInRace = true; // MAIN SECTION 0 START race_0_Simple_Test_Race_ID = races.addNewEmptyRace(); races.setRaceName(race_0_Simple_Test_Race_ID, \"Simple Test Race\"); races.setLaps(race_0_Simple_Test_Race_ID, 2); array<array<double>> race_0_coords = { {486.504, 0.0, 512.0, 0.0, 360.0, 0.0}, {457.481, 0.0, 500.993, 0.0, 396.3, 0.0}, {470.764, 0.0, 464.283, 0.0, 484.1, 0.0}, {526.697, 0.0, 482.188, 0.0, 573.8, 0.0}, {564.749, 0.0, 465.543, 0.0, 512.7, 0.0}, {584.245, 0.0, 496.841, 0.0, 613.8, 0.0}, {550.343, 0.0, 511.211, 0.0, 716.8, 0.0} }; races.addCheckpoint(race_0_Simple_Test_Race_ID, 0, \"chp-start\", race_0_coords[0]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 1, \"chp-checkpoint\", race_0_coords[1]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 2, \"chp-checkpoint\", race_0_coords[2]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 3, \"chp-checkpoint\", race_0_coords[3]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 4, \"chp-checkpoint\", race_0_coords[4]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 5, \"chp-checkpoint\", race_0_coords[5]); races.addCheckpoint(race_0_Simple_Test_Race_ID, 6, \"chp-checkpoint\", race_0_coords[6]); races.setVersion(race_0_Simple_Test_Race_ID, \"CuriousMike-1.0\"); races.setPenaltyTime(race_0_Simple_Test_Race_ID, 10); races.finalize(race_0_Simple_Test_Race_ID); // MAIN SECTION 0 END } void on_RaceStart_event(dictionary@ event) { int raceID; event.get('raceID', raceID); // RACESTART SECTION 0 START if( raceID == race_0_Simple_Test_Race_ID ) { races.obligatedFinish = false; races.showTimeDiff = true; races.showBestLap = true; races.showBestRace = true; races.submitScore = true; races.silentMode = false; races.restartRaceOnStart = true; } // RACESTART SECTION 0 END } void on_PenaltyEvent_event(dictionary@ event) { int raceID; event.get('raceID', raceID); // PENALTYEVENT SECTION 0 START // PENALTYEVENT SECTION 0 END } void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); }","title":"Generating completed script"},{"location":"terrain-creation/race-generator/#adding-script-to-terrain","text":"To add your generated script to the terrain, copy the script (CTRL+A to select all) into a text editor such as Notepad or Notepad++. Save the file with the .as file extension: Make sure to set the file type to \"All files\"! Place the file into your terrain's zip, then open the terrain's .terrn2 file. At the end of the terrn2 , add (or edit) the [Scripts] section: [Scripts] TestRace.as= Save your changes and place the edited terrn2 back into the terrain zip if necessary.","title":"Adding script to terrain"},{"location":"terrain-creation/race-generator/#in-game","text":"If everything went well, you should now have your race in RoR!","title":"In-game"},{"location":"terrain-creation/race-generator/#fine-tuning-checkpoint-locations","text":"When testing your race, your checkpoints may not be in the correct location or rotated correctly. To adjust your checkpoint positions, use the in-game object editor . Checkpoints are spawned first, so use CTRL+[ and CTRL+] keys to scroll through each one. Once you're done moving your checkpoints. exit editor mode ( CTRL+Y ) then exit the game. In editor_out.cfg , the checkpoint locations will be at the top of the file: 486.504, 0.000, 512.000, 0.0, 90.0, 0.0, chp-start 457.481, 0.000, 500.993, 0.0, 396.3, 0.0, chp-checkpoint 470.764, 0.000, 464.283, 0.0, 484.1, 0.0, chp-checkpoint 526.697, 0.000, 482.188, 0.0, 573.8, 0.0, chp-checkpoint 577.081, 0.000, 478.170, 0.0, 480.0, 0.0, chp-checkpoint 596.938, 0.000, 494.067, 0.0, 718.4, 0.0, chp-checkpoint 550.343, 0.000, 511.211, 0.0, 90.0, 0.0, chp-checkpoint Edit the lines to match the following format: {486.504, 0.000, 512.000, 0.0, 90.0, 0.0}, {457.481, 0.000, 500.993, 0.0, 396.3, 0.0}, {470.764, 0.000, 464.283, 0.0, 484.1, 0.0}, {526.697, 0.000, 482.188, 0.0, 573.8, 0.0}, {577.081, 0.000, 478.170, 0.0, 480.0, 0.0}, {596.938, 0.000, 494.067, 0.0, 718.4, 0.0}, {550.343, 0.000, 511.211, 0.0, 90.0, 0.0} Paste the lines into your race script file, replacing the existing positions: array<array<double>> race_0_coords = { {486.504, 0.000, 512.000, 0.0, 90.0, 0.0}, {457.481, 0.000, 500.993, 0.0, 396.3, 0.0}, {470.764, 0.000, 464.283, 0.0, 484.1, 0.0}, {526.697, 0.000, 482.188, 0.0, 573.8, 0.0}, {577.081, 0.000, 478.170, 0.0, 480.0, 0.0}, {596.938, 0.000, 494.067, 0.0, 718.4, 0.0}, {550.343, 0.000, 511.211, 0.0, 90.0, 0.0} }; Save the script and try it in-game. Your checkpoints should now be in the correct place.","title":"Fine tuning checkpoint locations"},{"location":"terrain-creation/race-generator/#troubleshooting","text":"If your race doesn't appear in-game, check your terrain's .terrn2 file to make sure the [Scripts] section is correct and that your script is in the terrain zip. Otherwise, your script may have a syntax error. Browse to Documents\\My Games\\Rigs of Rods\\logs and open Angelscript.log with Notepad. Script errors will be shown there. Look at the completed example script above for reference.","title":"Troubleshooting"},{"location":"terrain-creation/race-generator/#conclusion","text":"Congratulations, you now know the basics of adding races to Rigs of Rods using the race script generator!","title":"Conclusion"},{"location":"terrain-creation/raw-heightmaps/","text":"Heightmap RAW files \u00b6 A \"heightmap\", or \"elevation map\", is an image or binary file where every pixel/number represents world height at the given point. RoR supports 8-bit or 16-bit unsigned integer RAW heightmaps. Making heightmaps in Blender \u00b6 Blender is open source, cross platform, and free. You can also use it to generate meshes, truck and load files, someone who uses blender to make trucks is already familiar with the interface and can easily start making terrains. Plus blender can go into great detail with the terrain surface and allow the user to move individual modes at will. Blender can also export a 16bit grayscale image, which is required by RoR. Requirements \u00b6 [ http://www.blender.org/ Blender] with exr support (v2.43+ maybe earlier) [ http://www.imagemagick.org/ ImageMagick] with exr support (v6.3.4+) Setting up the Environment \u00b6 Start up blender , in Linux use the -w switch to have blender use a managed window. Press the (key|a) key to select all objects (all objects turn pink when selected) Press the (key|x) key and a little dialog pops up under the cursor, click Erase Selected Object(s) to erase all the objects. Add a Plane \u00b6 Press the (key|numpad 7) key to look at the xy plane. Press the (key|spacebar) and in the menu that appears select ''Add'' -> ''Mesh'' -> ''Plane'' At this point you have a 2x2 BU (blender units) plane centered at 0,0,0 (see above image). What we want is a 3x3 BU plane centered at 1.5,1.5,0. this isn't needed but it sets up an easy conversion factor of 1BU = 1km. So when you look at the width on an edge a 0.001BU = 1 meter. Scaling and moving the Plane \u00b6 make sure you are in Edit Mode ( ). Press the (key|s) key to scale the plane, and hold down the the (key|ctrl) to snap to the grid. In the lower left hand area of the panel you'll see the scale factor, move the cursor until the scale factor is 1.5000. Holding down the (key|ctrl) key will snap the scale factor to 0.1 units at a time, making 1.5000 easy. Click the left mouse button ((key|lmb)) to make the scale change. Still holding (key|ctrl) click-and-drag the plane using the right mouse button ((key|rmb)) until the lower left hand corner of the plane is at the axis. This is where the red and green lines cross. Left click ((key|lmb)) to move the plane to it's new position. This is how you're plane should look at this point: Making the height Gradient \u00b6 ok, now it gets trickier. Add a Material \u00b6 Open the Material Panel, to do this: ** click on shading ** then the materials button click on the Add New Button to add a new material under the material tab click on Shadeless button Add a Texture \u00b6 Texture Tab \u00b6 Open the Texture Panel click on shading then the texture button click on the Add New button to add a texture. to change the name of the texture click on Tex.001 and type in a new name, in our case height would be appropriate Next, select Blend from the Texture Type \"pulldown\" menu. Colors Tab \u00b6 Go under the color tab and click on the Colorband button. There is a Field labeled A with a value of 0.000 , change the value to 1.000 Select the second color point by clicking on the white vertical band on the right of the colorband. change the color of the second colorpoint to white by making the R value 1.000 Mapping the texture \u00b6 Now go back to the Materials under the Texture Tab make sure there is a check next to the name of the texture you just added. go into the Map Input tab in the lower left of this tab you'll see the mappings, select Z for all of mappings Cricky this is taking a long time to write!! but at least the texture is done now. Making the Camera \u00b6 Go back into Object Mode ( ) Under the View menu select View select View Properties Under 3D Cursor change the x , y , z values to 1.50 , 1.50 , 5.00 . press spacebar and select Add -> Camera hit (key|f9) or click the editing button to and you'll see a camera tab. click the Orthographic button change the value of scale to 3.00 Setting up the rendering \u00b6 press f10 to enter the scene panel below the format tab change SizeX , and SizeY to 1025 under that, there is a menu for the formats, it defaults Jpeg . click on this pulldown and select OpenEXR select the BW button below that Phew!! good news is that at this point everything is basically set up! Save this file so you can use it as a starting point for future terrains. For the lazy that just want to skip to this point here is a blender file saved at this point. Media:terntemplate.blend Test Render \u00b6 since everything is set up at this point lets do a test render. simply press f12 if a window pops up with some stats int he top with a gray image in the middle everything is working as it should. Making Terrain \u00b6 Make sure you're in Object Mode ( ) Right click on the plane you've created to select it Switch to Edit Mode ( ) Press the w key and select Subdivide Multi from the menu The value entered in this box determined how many subdivisions each side is cut up into. 5 is good for demo purposes. you should now have a plane that looks like this: rotate you're view by holding down the middle mouse button ( mmb ) and moving the mouse. move the view to a point where you can easily distinguish all 3 axis. Alternatively, you can rotate the view using the keypad numbers numpad 4 , numpad 8 , numpad 3 , and numpad 2 Right click on a vertex (these are the pink dots) to select it. Then click-and-drag the blue array pointing, this is you're z axis and by doing this you move the selected nodes along that one axis. You should end up with a picture similar to this: You now have a (Very) basic hill. Generating the heightmap \u00b6 Render the scene \u00b6 Press f12 to bring up the render window: Now press f3 to bring up the save dialog, save this to a file with the extension of .exr . I saved it to mymap.exr for this tutorial. Instead of saving the image as .exr save it as .jpeg Convert to raw format \u00b6 Note: this process can vary depending on the platform. open a command line and navigate to where the saved .exr file is saved. execute the following: convert mymap.exr -depth 16 -size 1025x1025 -endian LSB gray:mymap.raw Setup the .tern and .cfg as described in Terrain Formats . whola! the resulting file is a usable heightmap for RoR. This is the resulting image for the heightmap, your's should look somewhat similar: You don't have to do this if you saved the image as a .jpeg you can import this in L3DT as a heightmap and export it as .raw Refer to the L3DT tutorial for details on how to size and export Where to go from here \u00b6 Well there are all kinds of guides on making terrains, some tools for it too. These are the resources I used to make this tutorial. Creating a Heightmap from a Plane Mountains Out Of Molehills Making Landscapes with heightmaps InnerWorld terrain generator In particular if you want to learn more general blender I highly suggest reading the Blender 3D: Noob to Pro book on wikibook. Troubleshooting \u00b6 Heightmap isn't the proper size Make sure the X and Y size of the render is 1025x1025 .","title":"RAW Heightmaps"},{"location":"terrain-creation/raw-heightmaps/#heightmap-raw-files","text":"A \"heightmap\", or \"elevation map\", is an image or binary file where every pixel/number represents world height at the given point. RoR supports 8-bit or 16-bit unsigned integer RAW heightmaps.","title":"Heightmap RAW files"},{"location":"terrain-creation/raw-heightmaps/#making-heightmaps-in-blender","text":"Blender is open source, cross platform, and free. You can also use it to generate meshes, truck and load files, someone who uses blender to make trucks is already familiar with the interface and can easily start making terrains. Plus blender can go into great detail with the terrain surface and allow the user to move individual modes at will. Blender can also export a 16bit grayscale image, which is required by RoR.","title":"Making heightmaps in Blender"},{"location":"terrain-creation/raw-heightmaps/#requirements","text":"[ http://www.blender.org/ Blender] with exr support (v2.43+ maybe earlier) [ http://www.imagemagick.org/ ImageMagick] with exr support (v6.3.4+)","title":"Requirements"},{"location":"terrain-creation/raw-heightmaps/#setting-up-the-environment","text":"Start up blender , in Linux use the -w switch to have blender use a managed window. Press the (key|a) key to select all objects (all objects turn pink when selected) Press the (key|x) key and a little dialog pops up under the cursor, click Erase Selected Object(s) to erase all the objects.","title":"Setting up the Environment"},{"location":"terrain-creation/raw-heightmaps/#add-a-plane","text":"Press the (key|numpad 7) key to look at the xy plane. Press the (key|spacebar) and in the menu that appears select ''Add'' -> ''Mesh'' -> ''Plane'' At this point you have a 2x2 BU (blender units) plane centered at 0,0,0 (see above image). What we want is a 3x3 BU plane centered at 1.5,1.5,0. this isn't needed but it sets up an easy conversion factor of 1BU = 1km. So when you look at the width on an edge a 0.001BU = 1 meter.","title":"Add a Plane"},{"location":"terrain-creation/raw-heightmaps/#scaling-and-moving-the-plane","text":"make sure you are in Edit Mode ( ). Press the (key|s) key to scale the plane, and hold down the the (key|ctrl) to snap to the grid. In the lower left hand area of the panel you'll see the scale factor, move the cursor until the scale factor is 1.5000. Holding down the (key|ctrl) key will snap the scale factor to 0.1 units at a time, making 1.5000 easy. Click the left mouse button ((key|lmb)) to make the scale change. Still holding (key|ctrl) click-and-drag the plane using the right mouse button ((key|rmb)) until the lower left hand corner of the plane is at the axis. This is where the red and green lines cross. Left click ((key|lmb)) to move the plane to it's new position. This is how you're plane should look at this point:","title":"Scaling and moving the Plane"},{"location":"terrain-creation/raw-heightmaps/#making-the-height-gradient","text":"ok, now it gets trickier.","title":"Making the height Gradient"},{"location":"terrain-creation/raw-heightmaps/#add-a-material","text":"Open the Material Panel, to do this: ** click on shading ** then the materials button click on the Add New Button to add a new material under the material tab click on Shadeless button","title":"Add a Material"},{"location":"terrain-creation/raw-heightmaps/#add-a-texture","text":"","title":"Add a Texture"},{"location":"terrain-creation/raw-heightmaps/#texture-tab","text":"Open the Texture Panel click on shading then the texture button click on the Add New button to add a texture. to change the name of the texture click on Tex.001 and type in a new name, in our case height would be appropriate Next, select Blend from the Texture Type \"pulldown\" menu.","title":"Texture Tab"},{"location":"terrain-creation/raw-heightmaps/#colors-tab","text":"Go under the color tab and click on the Colorband button. There is a Field labeled A with a value of 0.000 , change the value to 1.000 Select the second color point by clicking on the white vertical band on the right of the colorband. change the color of the second colorpoint to white by making the R value 1.000","title":"Colors Tab"},{"location":"terrain-creation/raw-heightmaps/#mapping-the-texture","text":"Now go back to the Materials under the Texture Tab make sure there is a check next to the name of the texture you just added. go into the Map Input tab in the lower left of this tab you'll see the mappings, select Z for all of mappings Cricky this is taking a long time to write!! but at least the texture is done now.","title":"Mapping the texture"},{"location":"terrain-creation/raw-heightmaps/#making-the-camera","text":"Go back into Object Mode ( ) Under the View menu select View select View Properties Under 3D Cursor change the x , y , z values to 1.50 , 1.50 , 5.00 . press spacebar and select Add -> Camera hit (key|f9) or click the editing button to and you'll see a camera tab. click the Orthographic button change the value of scale to 3.00","title":"Making the Camera"},{"location":"terrain-creation/raw-heightmaps/#setting-up-the-rendering","text":"press f10 to enter the scene panel below the format tab change SizeX , and SizeY to 1025 under that, there is a menu for the formats, it defaults Jpeg . click on this pulldown and select OpenEXR select the BW button below that Phew!! good news is that at this point everything is basically set up! Save this file so you can use it as a starting point for future terrains. For the lazy that just want to skip to this point here is a blender file saved at this point. Media:terntemplate.blend","title":"Setting up the rendering"},{"location":"terrain-creation/raw-heightmaps/#test-render","text":"since everything is set up at this point lets do a test render. simply press f12 if a window pops up with some stats int he top with a gray image in the middle everything is working as it should.","title":"Test Render"},{"location":"terrain-creation/raw-heightmaps/#making-terrain","text":"Make sure you're in Object Mode ( ) Right click on the plane you've created to select it Switch to Edit Mode ( ) Press the w key and select Subdivide Multi from the menu The value entered in this box determined how many subdivisions each side is cut up into. 5 is good for demo purposes. you should now have a plane that looks like this: rotate you're view by holding down the middle mouse button ( mmb ) and moving the mouse. move the view to a point where you can easily distinguish all 3 axis. Alternatively, you can rotate the view using the keypad numbers numpad 4 , numpad 8 , numpad 3 , and numpad 2 Right click on a vertex (these are the pink dots) to select it. Then click-and-drag the blue array pointing, this is you're z axis and by doing this you move the selected nodes along that one axis. You should end up with a picture similar to this: You now have a (Very) basic hill.","title":"Making Terrain"},{"location":"terrain-creation/raw-heightmaps/#generating-the-heightmap","text":"","title":"Generating the heightmap"},{"location":"terrain-creation/raw-heightmaps/#render-the-scene","text":"Press f12 to bring up the render window: Now press f3 to bring up the save dialog, save this to a file with the extension of .exr . I saved it to mymap.exr for this tutorial. Instead of saving the image as .exr save it as .jpeg","title":"Render the scene"},{"location":"terrain-creation/raw-heightmaps/#convert-to-raw-format","text":"Note: this process can vary depending on the platform. open a command line and navigate to where the saved .exr file is saved. execute the following: convert mymap.exr -depth 16 -size 1025x1025 -endian LSB gray:mymap.raw Setup the .tern and .cfg as described in Terrain Formats . whola! the resulting file is a usable heightmap for RoR. This is the resulting image for the heightmap, your's should look somewhat similar: You don't have to do this if you saved the image as a .jpeg you can import this in L3DT as a heightmap and export it as .raw Refer to the L3DT tutorial for details on how to size and export","title":"Convert to raw format"},{"location":"terrain-creation/raw-heightmaps/#where-to-go-from-here","text":"Well there are all kinds of guides on making terrains, some tools for it too. These are the resources I used to make this tutorial. Creating a Heightmap from a Plane Mountains Out Of Molehills Making Landscapes with heightmaps InnerWorld terrain generator In particular if you want to learn more general blender I highly suggest reading the Blender 3D: Noob to Pro book on wikibook.","title":"Where to go from here"},{"location":"terrain-creation/raw-heightmaps/#troubleshooting","text":"Heightmap isn't the proper size Make sure the X and Y size of the render is 1025x1025 .","title":"Troubleshooting"},{"location":"terrain-creation/scripting/","text":"Terrain Scripting \u00b6 Warning This page is currently NOT up-to-date with the latest version of Rigs of Rods. Script examples should still work, but links, directory locations and settings may not be accurate with the current version. Event box \u00b6 this simple example will create an oil depot that reacts on trucks that drive into it. Prerequisites \u00b6 move nhelens.zip to the \"My Documents/Rigs of Rods/terrains\" folder and unpack all its files to a new directory \"nhelens\" remove the old nhelens.zip to prevent collisions Enable \"Debug Collision Meshes\" in your RoR configurator ('Settings'>'Debug'>'Debug Collision Meshes') to be able to see the debug visualization for events get an oil-well mesh and a fitting .odef file: http://forumold.rigsofrods.com/index.php?topic=28551.msg355869#msg355869 Defining the event box \u00b6 Specified using following keywords: boxcoords : Size and position of the box, relatively to the position of the object. virtual : specifies that this box is an event box event [event_name] [event_type]: event_name : the name of the box that the script will get when being notified. event_type : valid eventTypes that trigger this: avatar, truck, airplane, delete. Example: beginbox boxcoords 0.0, 20.0, 0.0, 5.0, -4.5, -0.5 virtual event trigger truck endbox Programming the AngelScript file \u00b6 create a file named .terrn.as, so in our case the file should be called \"a1da0UID-nhelens.terrn.as\" when the terrain we use is called \"a1da0UID-nhelens.terrn\" // Always include the base.as file! #include \"base.as\" string calledLast=\"\"; void main() { // spawn an oil-well game.spawnObject(\"oil-well\", \"my-oil-well-1\", vector3(1119.44f, 33.933f, 924.982f), vector3(0, 0, 0), \"myCallBack\", false); } void myCallBack(int trigger_type, string inst, string box, int nodeid) { if(calledLast == inst) return; // already triggered, discard // we log a message to the logfile log(inst + \" event triggered\"); // We show a message ingame game.flashMessage(inst + \" event triggered\", 3, -1); calledLast = inst; } Test-Run \u00b6 you should see something like this: {: width=\"40%\"} {: width=\"40%\"} note: We're only interested in the pink boxes here, as they represent event boxes. Light pink boxes do not call back an AngelScript function, while dark pink boxes do call back an AngelScript function when triggered (~when you drive into them). if you do not see an oil loader, check the AngelScript.log file for errors. With no errors the log could read like this: ScriptEngine initialized ScriptEngine (SE) initializing ... Type registrations done. If you see no error above everything should be working ScriptEngine running saving script bytecode to file c:\\users\\jeroen\\docume~1\\rigs of rods 0.38\\cache\\script_a1da0UID-nhelens.terrn.asc Executing main() The script finished successfully. ``` ### Result What happens if you drive a truck into the pink event box: [eventbox-oilrig]: /images/scripting-odef-eventbox-oilrig.jpg {: width=\"40%\"} ![eventbox-oilrig] look at your AngelScript.log (on Windows, it's located under MyDocuments\\Rigs of Rods 0.4\\logs): 02:55:05: SE| my-oil-well-1 event triggered ### Whats next you could: - check if the correct oil tanker trailer is in the spawn box - direct the user to the oil unloading station after \"loading the oil\" (sleeping) for some time - increase the node weight of a certain node inside of the tanker trailer to simulate the loaded oil. ### Advanced Examples for example this script will create two oil rigs and will redirect the user to collect and drop oil between them: #include \"base.as\" float timer = 0; int timerSet = 0; int state = 0; vector3 pos_oil1(1099, 33.933, 924.982); vector3 pos_oil2(1030, 33.4509, 1125.37); void main() { // spawn some oil-wells game.spawnObject(\"oil-well\", \"my-oil-well-1\", pos_oil1, vector3(0, 0, 0), \"callBackOilWellOne\", false); game.spawnObject(\"oil-well\", \"my-oil-well-2\", pos_oil2, vector3(0, 0, 0), \"callBackOilWellTwo\", false); } void frameStep(float dt) { // count down the timer if(timer > 0) timer -= dt; } void callBackOilWellOne(int trigger_type, string inst, string box, int nodeid) { //if(trigger_type != 1) return; // we only want to trigger on events where the full truck is in the event box (doesn't work at the moment) if(state != 0) return; // only process this if state is valid if(timerSet == 0) { // set timer timerSet = 1; timer = 5; game.flashMessage(\"Loading oil ...\", timer, -1); return; } if(timerSet == 1 && timer < 0) { // timer ran out, do something game.setDirectionArrow(\"unload oil\", pos_oil2); state = 1; timerSet=0; } } void callBackOilWellTwo(int trigger_type, string inst, string box, int nodeid) { //if(trigger_type != 1) return; // we only want to trigger on events where the full truck is in the event box (doesn't work at the moment) if(state != 1) return; // only process this if state is valid if(timerSet == 0) { // set timer timerSet = 1; timer = 5; game.flashMessage(\"Unloading oil ...\", timer, -1); return; } if(timerSet == 1 && timer < 0) { // timer ran out, do something game.setDirectionArrow(\"load some new oil\", pos_oil1); state = 0; timerSet=0; } } ``` In this tutorial, we will add a race to our terrain. How do races work? \u00b6 In Rigs of Rods, races are added using a script file. The race that we will create in this tutorial will exist out of multiple checkpoints. The objective of the race is to get from the first till the last checkpoint as fast as possible. We will discuss 2 methods to add a race to your terrain: Using a race script generator (fast method); Manually creating the script (advanced method). Adding a race (fast method) \u00b6 You can find a race script generator here . The checkpoints can be added by specifying the position (x,y,z), rotation (x,y,z) and an object for every checkpoint. This is similar to the old .terrn file syntax, but be aware: do NOT add the checkpoint objects to the terrain using the old .terrn file . The objects will already be spawned by the script. A checkpoint object is like every other object, but has beside a visible mesh also a virtual event box. The checkpoint will be marked as passed as soon as you drive through the virtual event box. If you wish, you can also use the default objects, which are available by default in every Rigs of Rods installation. To use these, use objectname \"chp-start\" for the start and finish line and \"chp-checkpoint\" for the normal checkpoints. The race script generator will use these objects if you don't specify other objects. After generating your race, you'll need to copy the script and put it in a new file in your terrain archive. The name of this file should be terrainFileName.terrn.as . For example, for North Saint Helens, this would become: a1da0UID-nhelens.terrn.as because the terrain file name of North Saint Helens is a1da0UID-nhelens.terrn , and we just need to add .as to that. Adding a race (advanced method) \u00b6 The easiest way to explain this method is by looking at some examples. North Saint Helens \u00b6 This example script is usable to add a race to the North Saint Helens terrain (a1da0UID-nhelens.terrn). Every line that starts with '//' is information that explains the line(s) beneath it. File: a1da0UID-nhelens.terrn.as // The following line is required in every script, in order to ensure that // the spawnpoints keep working. It includes the script inside the file \"base.as\" here. #include \"base.as\" // We want to add a race, so we will need the race script. #include \"races.as\" // We need to initialize the race script. racesManager races(); // Here we start the main function. // A function called 'main' will get called as soon as the terrain has completed loading. // So inside this function is a perfect spot to tell the game about our races. void main() { // We change an option of the races script // Because of the scattered nature of this race, we want to make sure that // the user finds his way to the start line of the race. // So, by setting this option to 'true', we make sure that when the user // passes a checkpoint when not in a race, the user will still get a // message informing the user about the race. races.showCheckPointInfoWhenNotInRace = true; // For the game to recognize the race, it needs to know where the checkpoints are, // so we define them in an Array. // Every line with numbers defines a checkpoint. // The numbers on a line are from left to right: position X, Y, Z, rotation X, Y, Z // (with position in meters and rotation in degrees) // So they're coordinates to uniquely define the location and rotation of an // object in a three dimensional space. array<array<double>> coordinates = { // { pos X , pos Y , pos Z , rot X , rot Y , rot Z } {1145.762451, 43.409168, 1874.828247, 0.000000, -20.000000, 0.000000}, {1223.362061, 66.093338, 2128.568359, 0.000000, 30.000000, 0.000000}, {1493.947388, 90.977753, 2490.836426, 0.000000, 55.000000, 0.000000}, {1854.234497, 141.551270, 2732.894287, 0.000000, 65.000000, 0.000000}, {2157.161865, 130.438171, 2720.815430, 0.000000, 90.000000, 0.000000}, {2422.710693, 110.228294, 2523.404785, 0.000000, 140.000000, 0.000000}, {2607.359619, 107.782913, 2203.569824, 0.000000, 165.000000, 0.000000}, {2534.100342, 107.596176, 1938.718140, 0.000000, 205.000000, 0.000000}, {2269.411377, 134.870911, 1729.099121, 0.000000, 265.000000, 0.000000}, {1974.688110, 104.931290, 1732.083618, 0.000000, 245.000000, 0.000000}, {1865.982056, 101.138504, 1618.693237, 0.000000, 245.000000, 0.000000}, {1706.379395, 148.594437, 1533.436157, 0.000000, 255.000000, 0.000000}, {1470.152100, 120.901085, 1504.998291, 0.000000, 310.000000, 0.000000}, // Note: No comma after the last checkpoint. {1238.410767, 47.336208, 1735.698242, 0.000000, 325.000000, 0.000000} }; // Now we add the race with name 'Rigbreaker'. // The last parameter is number of laps. // * This race has 1 lap. // * You can use 'races.LAPS_NoLaps' to have no laps // (~the race start point is not the same checkpoint as the race finish point). // * You can also use 'races.LAPS_Unlimited' to have a never ending race (~unlimited amount of laps) races.addRace(\"Rigbreaker\", coordinates, 1); } // end of the main function // The default RoR event callback // This procedure will get called by Rigs of Rods on certain occasions, // decided by the race script. void eventCallback(int eventnum, int value) { // It's not obligated to add this, but it's a good habit. races.eventCallback(eventnum, value); } // end of the script. Island \u00b6 This example script is usable to add a race to the Island terrain (496aUID-island.terrn). File: 496aUID-island.terrn.as #include \"base.as\" #include \"races.as\" racesManager races(); // The default RoR main function void main() { array<array<double>> coordinates = { {791.551, 87.6567, 1558.25, 0.0, 35.3333, 0.0}, {970.905, 119.2 , 1421.01, 0.0, -93.6470, 0.0}, {1350.28, 157.644, 1375.19, 0.0, -44.4060, 0.0}, {1506.18, 180.185, 1309.12, 0.0, 29.4644, 0.0}, {1306.9 , 209.358, 1250.37, 0.0, 70.3679, 0.0}, {940.346, 236.788, 926.603, 0.0, 16.9539, 0.0} }; races.addRace(\"To The Top\", coordinates, races.LAPS_NoLaps); } // The default RoR event callback void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); } Bajarama \u00b6 This example script shows a race with an unlimited amount of laps (a never ending race). It is usable with the Bajarama terrain (8c07UID-bajarama.terrn). File: 8c07UID-bajarama.terrn.as #include \"base.as\" #include \"races.as\" racesManager races(); void main() { array<array<double>> coords1 = { {179.088196, 1.351834, 203.319107, -0.000006, 75.500044, -0.849956}, {56.070511, 1.247547, 119.811401, 0.000001, 109.500097, 1.700087}, {88.742783, 2.674362, 332.812042, 0.000071, 127.500016, -7.299959}, {157.537796, 1.121414, 478.227203, 0.595164, -29.497634, -0.456070}, {202.784286, 1.830205, 240.792023, 0.446688, -87.490632, -2.408985}, {326.742004, 1.115725, 436.851685, 0.000000, 0.000003, -0.200001}, {360.338379, 1.100020, 102.170441, 0.000033, -140.500010, -0.700087}, {482.216766, 1.089854, 430.449249, 0.000000, 0.000000, -0.500001}, {478.902618, 1.325789, 90.371094, 0.000000, -0.000014, 0.000000}, {92.562027, 1.122820, 86.679283, 0.000002, -91.000017, 0.000002}, {264.193359, 1.481601, 121.791405, 0.000000, -179.999991, -0.700000} }; // race name coordinates #laps checkpoint object startline object int raceID = races.addRace(\"Bajarama\", coords1, races.LAPS_Unlimited, \"new-checkpoint\", \"new-checkpoint-start\"); } // The default RoR event callback void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); } Flat Map (v10.1) \u00b6 This example script illustrates how to add multiple races to one terrain and is usable for the Flat Map terrain (f4afUID-flat_map_full32xa.terrn). File: f4afUID-flat_map_full32xa.terrn.as #include \"base.as\" #include \"races.as\" racesManager races(); void main() { // We add 4 races to the map // RACE 1: Dirt drag race - right side array`<array<double>`> coords1 = { {2293.272705, 0.0, 2035.251465, 0.0, 0.0, 0.0}, {2293.272705, 0.0, 1484.145752, 0.0, 0.0, 0.0} }; // race name coordinates #laps int raceID = races.addRace(\"Dirt DragRace - Right Side\", coords1, races.LAPS_NoLaps); // race 1 added and working // RACE 2: Dirt drag race - left side array`<array<double>`> coords2 = { {2268.944580, 0.0, 2035.251465, 0.0, 0.0, 0.0}, {2268.944580, 0.0, 1484.145752, 0.0, 0.0, 0.0} }; // race name coordinates #laps int raceID = races.addRace(\"Dirt DragRace - Left Side\", coords2, races.LAPS_NoLaps); // race 2 added and working // RACE 3: Runway drag race - left side array`<array<double>`> coords3 = { {2327.494141, 1.0, 1388.388794, 0.0, 0.0, 0.0}, {2327.494141, 1.0, 932.558044 , 0.0, 0.0, 0.0} }; // race name coordinates #laps int raceID = races.addRace(\"Runway DragRace - Left Side\", coords3, races.LAPS_NoLaps); // race 3 added and working // RACE 4: Runway drag race - right side array`<array<double>`> coords4 = { {2343.309814, 1.0, 1388.388794, 0.0, 0.0, 0.0}, {2343.309814, 1.0, 932.558044 , 0.0, 0.0, 0.0} }; // race name coordinates #laps int raceID = races.addRace(\"Runway DragRace - Right Side\", coords4, races.LAPS_NoLaps); // race 4 added and working } // The default RoR event callback void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); } F1 Test Track \u00b6 This example script illustrates how to use custom checkpoint objects and multiple races on one terrain. The script can be used with the F1 Test Track terrain (2af11UID-f1_testtrack.terrn). File: 2af11UID-f1_testtrack.terrn.as #include \"base.as\" #include \"races.as\" racesManager races(); // The default RoR main function void main() { // We add 5 races to the map // RACE 1 array<array<double>> coords1 = { { 882.132996, 0.120613, 1324.317139, 0.0, 90.0, 0.0}, { 658.905884, 0.076029, 1324.323730, 0.0, 90.0, 0.0}, { 575.903259, 0.062041, 1231.623169, 0.0, 0.0, 0.0}, { 565.184814, 0.063519, 1037.515503, 0.0, 22.0, 0.0}, { 313.121979, 0.079952, 822.904663, 0.0, 5.0, 0.0}, { 385.599213, 0.071390, 722.493469, 0.0, -90.0, 0.0}, { 770.934998, 0.012638, 761.321411, 0.0, -90.5, 0.0}, {1055.889404, 0.078151, 664.507324, 0.0, -89.0, 0.0}, {1388.452026, 0.030632, 663.976257, 0.0, 92.0, 0.0}, {1457.364014, 0.041678, 783.509460, 0.0, 168.0, 0.0}, {1493.774048, 0.104160, 1309.505859, 0.0, 18.5, 0.0}, {1348.787964, 0.099335, 1324.566406, 0.0, 90.0, 0.0}, { 909.298462, 0.044833, 1324.610596, 0.0, 88.5, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object int raceID = races.addRace(\"Grand Prix long\", coords1, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); // race 1 added and working // RACE 2 array<array<double>> coords2 = { {1176.429688, 0.063195, 1254.195313, -0.0, 90.0, 0.0}, { 693.874573, 0.090642, 1251.470825, -0.0, 90.0, 0.0}, { 693.383728, 0.071324, 1182.933594, -0.0, -90.0, 0.0}, { 844.552612, 0.095163, 1168.225586, -0.0, -90.0, 0.0}, { 941.776978, 0.052285, 1183.067139, -0.0, -90.0, 0.0}, {1079.778198, 0.096842, 1183.057373, -0.0, -90.0, 0.0}, {1177.627563, 0.067999, 1125.772461, -0.0, -40.0, 0.0}, {1282.897095, 0.938393, 1045.571899, 0.0, -90.0, 0.0}, {1395.055054, 0.107390, 1148.677734, -0.0, 0.0, 0.0}, {1290.430908, 0.098327, 1254.477905, 0.0, 90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object raceID = races.addRace(\"Grand Prix short\", coords2, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); // race 2 added and working // RACE 3 array<array<double>> coords3 = { {1117.230103, 0.067576, 700.704956, 0.0, -90.0, 0.0}, {1136.480469, 0.072812, 1030.468628, 0.0, 90.0, 0.0}, {1101.686768, 0.032589, 701.005127, 0.0, -90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object raceID = races.addRace(\"oval race\", coords3, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); // race 3 added and working // RACE 4 array<array<double>> coords4 = { {1187.875977, 0.0, 1220.567383, 0.0, 90.0, 0.0}, { 784.379578, 0.0, 1221.171143, 0.0, -90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object race version raceID = races.addRace(\"drag race\", coords4, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); // race 4 added and working // RACE 5 double[][] coords5 = { // x z y 3d rot rot 3d rot { 807.868, 5.09987, 1114.47, 0.0, -90.0, 0.0}, { 724.386, 0.0994606, 1084.16, 0.0, 0.0, 0.0}, { 718.647, 0.0998037, 1038.22, 0.0, 45.0, 0.0}, { 696.235, 0.0989883, 992.215, 0.0, -25.0, 0.0}, { 754.302, 0.098882, 999.441, 0.0, 0.0, 0.0}, { 763.464, 0.0987995, 1049.56, 0.0, 45.0, 0.0}, { 831.675, 5.01375, 1058.26, 0.0, 90.0, 0.0}, { 919.557, 0.0995347, 1083.47, 0.0, 0.0, 0.0}, { 884.884, 0.0987005, 1121.12, 0.0, -90.0, 0.0} }; // race name coordinates #laps (no checkpoint objects are specified here, so the default RoR ones will be used) raceID = races.addRace(\"mud race\", coords5, 3); // race 5 added and working } // The default RoR event callback void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); } F1 Test Track (with penalty events) \u00b6 We can also penalty events if the player hits a specific part of the checkpoint. For this race, we've edited the 2af11UID-new-checkpoint.odef file from f1track_improved.zip to have penalty event boxes: 2af11UID-new-checkpoint.mesh 1, 1, 1 beginbox boxcoords -7.5, 6.95, -4.0, 5.2, -0.5, 0.5 virtual event checkpoint truck endbox beginbox boxcoords -8.6, -7.65, 0.0, 0.55, -0.65, 0.0 virtual event race_penalty truck endbox beginbox boxcoords 8.05, 7.1, 0.0, 0.55, -0.65, 0.0 virtual event race_penalty truck endbox end So the checkpoint looks like this (in debug mode): [image to be added here] As you can see, there are 2 small event boxes that will trigger the penalty event. The penalty event will, when triggered, add an amount of seconds to the lap time. How many seconds can be configured using the races.setPenaltyTime(int raceID, int seconds) method or you can just change it using the PenaltyEvent callback function. We'll also need this PenaltyEvent callback function when we want to show a message if a penalty event was triggered. For this we'll need to: Define the callback function ('on_penaltyEvent' in the script below) Tell the races script about this callback function ('races.setCallback(\"PenaltyEvent\", on_penaltyEvent);') This is all done in the following script. Pay attention to every difference with the script above. #include \"base.as\" #include \"races.as\" racesManager races(); // The default RoR main function void main() { // the penalty event shows no message by default, so we'll have to show a message ourself. races.setCallback(\"PenaltyEvent\", on_penaltyEvent); // We add 5 races to the map // RACE 1 array <array<double> > coords1 = { { 882.132996, 0.120613, 1324.317139, 0.0, 90.0, 0.0}, { 658.905884, 0.076029, 1324.323730, 0.0, 90.0, 0.0}, { 575.903259, 0.062041, 1231.623169, 0.0, 0.0, 0.0}, { 565.184814, 0.063519, 1037.515503, 0.0, 22.0, 0.0}, { 313.121979, 0.079952, 822.904663, 0.0, 5.0, 0.0}, { 385.599213, 0.071390, 722.493469, 0.0, -90.0, 0.0}, { 770.934998, 0.012638, 761.321411, 0.0, -90.5, 0.0}, {1055.889404, 0.078151, 664.507324, 0.0, -89.0, 0.0}, {1388.452026, 0.030632, 663.976257, 0.0, 92.0, 0.0}, {1457.364014, 0.041678, 783.509460, 0.0, 168.0, 0.0}, {1493.774048, 0.104160, 1309.505859, 0.0, 18.5, 0.0}, {1348.787964, 0.099335, 1324.566406, 0.0, 90.0, 0.0}, { 909.298462, 0.044833, 1324.610596, 0.0, 88.5, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object int raceID = races.addRace(\"Grand Prix long\", coords1, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); races.setPenaltyTime(raceID, 10); // <- this sets the default penalty time (in seconds) for this race when a race_penalty event occurs. // race 1 added and working // RACE 2 array<array<double> > coords2 = { {1176.429688, 0.063195, 1254.195313, -0.0, 90.0, 0.0}, { 693.874573, 0.090642, 1251.470825, -0.0, 90.0, 0.0}, { 693.383728, 0.071324, 1182.933594, -0.0, -90.0, 0.0}, { 844.552612, 0.095163, 1168.225586, -0.0, -90.0, 0.0}, { 941.776978, 0.052285, 1183.067139, -0.0, -90.0, 0.0}, {1079.778198, 0.096842, 1183.057373, -0.0, -90.0, 0.0}, {1177.627563, 0.067999, 1125.772461, -0.0, -40.0, 0.0}, {1282.897095, 0.938393, 1045.571899, 0.0, -90.0, 0.0}, {1395.055054, 0.107390, 1148.677734, -0.0, 0.0, 0.0}, {1290.430908, 0.098327, 1254.477905, 0.0, 90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object raceID = races.addRace(\"Grand Prix short\", coords2, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); races.setPenaltyTime(raceID, 10); // <- this sets the default penalty time (in seconds) for this race when a race_penalty event occurs. // race 2 added and working // RACE 3 array<array<double> > coords3 = { {1117.230103, 0.067576, 700.704956, 0.0, -90.0, 0.0}, {1136.480469, 0.072812, 1030.468628, 0.0, 90.0, 0.0}, {1101.686768, 0.032589, 701.005127, 0.0, -90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object raceID = races.addRace(\"oval race\", coords3, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); races.setPenaltyTime(raceID, 10); // <- this sets the default penalty time (in seconds) for this race when a race_penalty event occurs. // race 3 added and working // RACE 4 array<array<double> > coords4 = { {1187.875977, 0.0, 1220.567383, 0.0, 90.0, 0.0}, { 784.379578, 0.0, 1221.171143, 0.0, -90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object race version raceID = races.addRace(\"drag race\", coords4, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); races.setPenaltyTime(raceID, 10); // <- this sets the default penalty time (in seconds) for this race when a race_penalty event occurs. // race 4 added and working // RACE 5 double[][] coords5 = { // x z y 3d rot rot 3d rot { 807.868, 5.09987, 1114.47, 0.0, -90.0, 0.0}, { 724.386, 0.0994606, 1084.16, 0.0, 0.0, 0.0}, { 718.647, 0.0998037, 1038.22, 0.0, 45.0, 0.0}, { 696.235, 0.0989883, 992.215, 0.0, -25.0, 0.0}, { 754.302, 0.098882, 999.441, 0.0, 0.0, 0.0}, { 763.464, 0.0987995, 1049.56, 0.0, 45.0, 0.0}, { 831.675, 5.01375, 1058.26, 0.0, 90.0, 0.0}, { 919.557, 0.0995347, 1083.47, 0.0, 0.0, 0.0}, { 884.884, 0.0987005, 1121.12, 0.0, -90.0, 0.0} }; // race name coordinates #laps (no checkpoint objects are specified here, so the default RoR ones will be used) raceID = races.addRace(\"mud race\", coords5, 3); // race 5 added and working } // The default RoR event callback void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); } void on_penaltyEvent(dictionary@ info) { // this method gets called every time a race_penalty event occurs. // We can also change the penalty time here: info.set(\"penaltyTime\", 10); // But the penalty time was already set to 10 seconds, because we had set it to 10 in the main() function. // So now we've set it twice to 10 seconds, which is quite pointless... // Just show a message to inform the user about the penalty races.message(\"PENALTY\", \"lightning.png\"); } Notes: We've only used the 'race_penalty' event here, but you can also use the 'race_abort' event, which will abort the race when the event box is triggered. Another way to add penalty seconds is using the races.addPenaltySeconds(int seconds) method. You can also register callback functions for other events: http://docs.rigsofrods.com/angelscript/classraces_manager.html#917f58383f551128acac292effdb3ce2 More Advanced Functionality \u00b6 Documentation and questions \u00b6 See reference manual . Studying the script files of other terrains may also greatly help you. In case of questions/suggestions/complains, get in touch in the forums . Example: Extending RacesManager \u00b6 Here's an example where we inherit from the racesManager class and add functionality. (In this case, we limit the allowed vehicles, so the race won't start if certain vehicles aren't used). You can test this script by adding it to the North Saint Helens terrain. #include \"base.as\"; #include \"races.as\"; racesManagerWithVehicleLimit races(); void main() { // Add the race like usual array < array<double> > coords1 = { {1140.259644, 34.136135, 920.070313, 0.0, 0.0, 0.0}, {1140.259644, 34.136135, 950.070313, 0.0, 0.0, 0.0} }; int raceID_testRace = races.addRace(\"testRace\", coords1, races.LAPS_NoLaps); // Add some vehicles (when you don't add any vehicles, then all vehicles will be allowed) races.addVehicle(raceID_testRace, \"Bus RVI agora S\"); races.addVehicle(raceID_testRace, \"Bus RVI agora L\"); } // Other stuff (No race specific stuff under this line) class racesManagerWithVehicleLimit : racesManager { dictionary vehicleData; double lastMessageTime; racesManagerWithVehicleLimit() { super(); lastMessageTime = 0.0; } // extend this method void startRace(int raceID) /*override*/ { bool allow = true; // Do we have vehicle data for this race? array <string> @ vehicles = null; if(vehicleData.get(\"race_\"+raceID, @vehicles)) { // Get the name of the current truck string truckName = \"avatar\"; BeamClass@ truck = game.getCurrentTruck(); if(truck !is null) truckName = truck.getTruckName(); if(vehicles.find(truckName) <0) allow = false; } if(allow) racesManager::startRace(raceID); else { // Avoid message spam (in exceptional cases) if((game.getTime()-this.lastMessageTime)> 5.0) { this.lastMessageTime = game.getTime(); this.message(\"Race \"+this.raceList[raceID].raceName+\" can only be started with one of the following vehicles:\", \"information.png\"); this.message(arrayToString(vehicles), \"information.png\"); } } } void addVehicle(int raceID, string vehicleName) { array <string> @ vehicles = null; if(!vehicleData.get(\"race_\"+raceID, @vehicles)) { array <string> vehicles2 = {}; @vehicles = @vehicles2; vehicleData.set(\"race_\"+raceID, @vehicles); } vehicles.insertLast(vehicleName); } } string arrayToString(array<string>@ arr) { string result = \"\"; if(arr !is null) for(uint i=0; i<arr.length(); ++i) { result += arr[i]; if(i!=arr.length()-1) result += \", \"; } return result; } Troubleshooting \u00b6 If your race doesn't work, feel free to post your terrain file in this forum, and we may have a look at it. http://rigsofrods.org/forum-19.html Further, you may find some help in this archive: http://rigsofrods.org/old-forum/forums/167-Scripting/page-0001.html","title":"Scripting"},{"location":"terrain-creation/scripting/#terrain-scripting","text":"Warning This page is currently NOT up-to-date with the latest version of Rigs of Rods. Script examples should still work, but links, directory locations and settings may not be accurate with the current version.","title":"Terrain Scripting"},{"location":"terrain-creation/scripting/#event-box","text":"this simple example will create an oil depot that reacts on trucks that drive into it.","title":"Event box"},{"location":"terrain-creation/scripting/#prerequisites","text":"move nhelens.zip to the \"My Documents/Rigs of Rods/terrains\" folder and unpack all its files to a new directory \"nhelens\" remove the old nhelens.zip to prevent collisions Enable \"Debug Collision Meshes\" in your RoR configurator ('Settings'>'Debug'>'Debug Collision Meshes') to be able to see the debug visualization for events get an oil-well mesh and a fitting .odef file: http://forumold.rigsofrods.com/index.php?topic=28551.msg355869#msg355869","title":"Prerequisites"},{"location":"terrain-creation/scripting/#defining-the-event-box","text":"Specified using following keywords: boxcoords : Size and position of the box, relatively to the position of the object. virtual : specifies that this box is an event box event [event_name] [event_type]: event_name : the name of the box that the script will get when being notified. event_type : valid eventTypes that trigger this: avatar, truck, airplane, delete. Example: beginbox boxcoords 0.0, 20.0, 0.0, 5.0, -4.5, -0.5 virtual event trigger truck endbox","title":"Defining the event box"},{"location":"terrain-creation/scripting/#programming-the-angelscript-file","text":"create a file named .terrn.as, so in our case the file should be called \"a1da0UID-nhelens.terrn.as\" when the terrain we use is called \"a1da0UID-nhelens.terrn\" // Always include the base.as file! #include \"base.as\" string calledLast=\"\"; void main() { // spawn an oil-well game.spawnObject(\"oil-well\", \"my-oil-well-1\", vector3(1119.44f, 33.933f, 924.982f), vector3(0, 0, 0), \"myCallBack\", false); } void myCallBack(int trigger_type, string inst, string box, int nodeid) { if(calledLast == inst) return; // already triggered, discard // we log a message to the logfile log(inst + \" event triggered\"); // We show a message ingame game.flashMessage(inst + \" event triggered\", 3, -1); calledLast = inst; }","title":"Programming the AngelScript file"},{"location":"terrain-creation/scripting/#test-run","text":"you should see something like this: {: width=\"40%\"} {: width=\"40%\"} note: We're only interested in the pink boxes here, as they represent event boxes. Light pink boxes do not call back an AngelScript function, while dark pink boxes do call back an AngelScript function when triggered (~when you drive into them). if you do not see an oil loader, check the AngelScript.log file for errors. With no errors the log could read like this: ScriptEngine initialized ScriptEngine (SE) initializing ... Type registrations done. If you see no error above everything should be working ScriptEngine running saving script bytecode to file c:\\users\\jeroen\\docume~1\\rigs of rods 0.38\\cache\\script_a1da0UID-nhelens.terrn.asc Executing main() The script finished successfully. ``` ### Result What happens if you drive a truck into the pink event box: [eventbox-oilrig]: /images/scripting-odef-eventbox-oilrig.jpg {: width=\"40%\"} ![eventbox-oilrig] look at your AngelScript.log (on Windows, it's located under MyDocuments\\Rigs of Rods 0.4\\logs): 02:55:05: SE| my-oil-well-1 event triggered ### Whats next you could: - check if the correct oil tanker trailer is in the spawn box - direct the user to the oil unloading station after \"loading the oil\" (sleeping) for some time - increase the node weight of a certain node inside of the tanker trailer to simulate the loaded oil. ### Advanced Examples for example this script will create two oil rigs and will redirect the user to collect and drop oil between them: #include \"base.as\" float timer = 0; int timerSet = 0; int state = 0; vector3 pos_oil1(1099, 33.933, 924.982); vector3 pos_oil2(1030, 33.4509, 1125.37); void main() { // spawn some oil-wells game.spawnObject(\"oil-well\", \"my-oil-well-1\", pos_oil1, vector3(0, 0, 0), \"callBackOilWellOne\", false); game.spawnObject(\"oil-well\", \"my-oil-well-2\", pos_oil2, vector3(0, 0, 0), \"callBackOilWellTwo\", false); } void frameStep(float dt) { // count down the timer if(timer > 0) timer -= dt; } void callBackOilWellOne(int trigger_type, string inst, string box, int nodeid) { //if(trigger_type != 1) return; // we only want to trigger on events where the full truck is in the event box (doesn't work at the moment) if(state != 0) return; // only process this if state is valid if(timerSet == 0) { // set timer timerSet = 1; timer = 5; game.flashMessage(\"Loading oil ...\", timer, -1); return; } if(timerSet == 1 && timer < 0) { // timer ran out, do something game.setDirectionArrow(\"unload oil\", pos_oil2); state = 1; timerSet=0; } } void callBackOilWellTwo(int trigger_type, string inst, string box, int nodeid) { //if(trigger_type != 1) return; // we only want to trigger on events where the full truck is in the event box (doesn't work at the moment) if(state != 1) return; // only process this if state is valid if(timerSet == 0) { // set timer timerSet = 1; timer = 5; game.flashMessage(\"Unloading oil ...\", timer, -1); return; } if(timerSet == 1 && timer < 0) { // timer ran out, do something game.setDirectionArrow(\"load some new oil\", pos_oil1); state = 0; timerSet=0; } } ``` In this tutorial, we will add a race to our terrain.","title":"Test-Run"},{"location":"terrain-creation/scripting/#how-do-races-work","text":"In Rigs of Rods, races are added using a script file. The race that we will create in this tutorial will exist out of multiple checkpoints. The objective of the race is to get from the first till the last checkpoint as fast as possible. We will discuss 2 methods to add a race to your terrain: Using a race script generator (fast method); Manually creating the script (advanced method).","title":"How do races work?"},{"location":"terrain-creation/scripting/#adding-a-race-fast-method","text":"You can find a race script generator here . The checkpoints can be added by specifying the position (x,y,z), rotation (x,y,z) and an object for every checkpoint. This is similar to the old .terrn file syntax, but be aware: do NOT add the checkpoint objects to the terrain using the old .terrn file . The objects will already be spawned by the script. A checkpoint object is like every other object, but has beside a visible mesh also a virtual event box. The checkpoint will be marked as passed as soon as you drive through the virtual event box. If you wish, you can also use the default objects, which are available by default in every Rigs of Rods installation. To use these, use objectname \"chp-start\" for the start and finish line and \"chp-checkpoint\" for the normal checkpoints. The race script generator will use these objects if you don't specify other objects. After generating your race, you'll need to copy the script and put it in a new file in your terrain archive. The name of this file should be terrainFileName.terrn.as . For example, for North Saint Helens, this would become: a1da0UID-nhelens.terrn.as because the terrain file name of North Saint Helens is a1da0UID-nhelens.terrn , and we just need to add .as to that.","title":"Adding a race (fast method)"},{"location":"terrain-creation/scripting/#adding-a-race-advanced-method","text":"The easiest way to explain this method is by looking at some examples.","title":"Adding a race (advanced method)"},{"location":"terrain-creation/scripting/#north-saint-helens","text":"This example script is usable to add a race to the North Saint Helens terrain (a1da0UID-nhelens.terrn). Every line that starts with '//' is information that explains the line(s) beneath it. File: a1da0UID-nhelens.terrn.as // The following line is required in every script, in order to ensure that // the spawnpoints keep working. It includes the script inside the file \"base.as\" here. #include \"base.as\" // We want to add a race, so we will need the race script. #include \"races.as\" // We need to initialize the race script. racesManager races(); // Here we start the main function. // A function called 'main' will get called as soon as the terrain has completed loading. // So inside this function is a perfect spot to tell the game about our races. void main() { // We change an option of the races script // Because of the scattered nature of this race, we want to make sure that // the user finds his way to the start line of the race. // So, by setting this option to 'true', we make sure that when the user // passes a checkpoint when not in a race, the user will still get a // message informing the user about the race. races.showCheckPointInfoWhenNotInRace = true; // For the game to recognize the race, it needs to know where the checkpoints are, // so we define them in an Array. // Every line with numbers defines a checkpoint. // The numbers on a line are from left to right: position X, Y, Z, rotation X, Y, Z // (with position in meters and rotation in degrees) // So they're coordinates to uniquely define the location and rotation of an // object in a three dimensional space. array<array<double>> coordinates = { // { pos X , pos Y , pos Z , rot X , rot Y , rot Z } {1145.762451, 43.409168, 1874.828247, 0.000000, -20.000000, 0.000000}, {1223.362061, 66.093338, 2128.568359, 0.000000, 30.000000, 0.000000}, {1493.947388, 90.977753, 2490.836426, 0.000000, 55.000000, 0.000000}, {1854.234497, 141.551270, 2732.894287, 0.000000, 65.000000, 0.000000}, {2157.161865, 130.438171, 2720.815430, 0.000000, 90.000000, 0.000000}, {2422.710693, 110.228294, 2523.404785, 0.000000, 140.000000, 0.000000}, {2607.359619, 107.782913, 2203.569824, 0.000000, 165.000000, 0.000000}, {2534.100342, 107.596176, 1938.718140, 0.000000, 205.000000, 0.000000}, {2269.411377, 134.870911, 1729.099121, 0.000000, 265.000000, 0.000000}, {1974.688110, 104.931290, 1732.083618, 0.000000, 245.000000, 0.000000}, {1865.982056, 101.138504, 1618.693237, 0.000000, 245.000000, 0.000000}, {1706.379395, 148.594437, 1533.436157, 0.000000, 255.000000, 0.000000}, {1470.152100, 120.901085, 1504.998291, 0.000000, 310.000000, 0.000000}, // Note: No comma after the last checkpoint. {1238.410767, 47.336208, 1735.698242, 0.000000, 325.000000, 0.000000} }; // Now we add the race with name 'Rigbreaker'. // The last parameter is number of laps. // * This race has 1 lap. // * You can use 'races.LAPS_NoLaps' to have no laps // (~the race start point is not the same checkpoint as the race finish point). // * You can also use 'races.LAPS_Unlimited' to have a never ending race (~unlimited amount of laps) races.addRace(\"Rigbreaker\", coordinates, 1); } // end of the main function // The default RoR event callback // This procedure will get called by Rigs of Rods on certain occasions, // decided by the race script. void eventCallback(int eventnum, int value) { // It's not obligated to add this, but it's a good habit. races.eventCallback(eventnum, value); } // end of the script.","title":"North Saint Helens"},{"location":"terrain-creation/scripting/#island","text":"This example script is usable to add a race to the Island terrain (496aUID-island.terrn). File: 496aUID-island.terrn.as #include \"base.as\" #include \"races.as\" racesManager races(); // The default RoR main function void main() { array<array<double>> coordinates = { {791.551, 87.6567, 1558.25, 0.0, 35.3333, 0.0}, {970.905, 119.2 , 1421.01, 0.0, -93.6470, 0.0}, {1350.28, 157.644, 1375.19, 0.0, -44.4060, 0.0}, {1506.18, 180.185, 1309.12, 0.0, 29.4644, 0.0}, {1306.9 , 209.358, 1250.37, 0.0, 70.3679, 0.0}, {940.346, 236.788, 926.603, 0.0, 16.9539, 0.0} }; races.addRace(\"To The Top\", coordinates, races.LAPS_NoLaps); } // The default RoR event callback void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); }","title":"Island"},{"location":"terrain-creation/scripting/#bajarama","text":"This example script shows a race with an unlimited amount of laps (a never ending race). It is usable with the Bajarama terrain (8c07UID-bajarama.terrn). File: 8c07UID-bajarama.terrn.as #include \"base.as\" #include \"races.as\" racesManager races(); void main() { array<array<double>> coords1 = { {179.088196, 1.351834, 203.319107, -0.000006, 75.500044, -0.849956}, {56.070511, 1.247547, 119.811401, 0.000001, 109.500097, 1.700087}, {88.742783, 2.674362, 332.812042, 0.000071, 127.500016, -7.299959}, {157.537796, 1.121414, 478.227203, 0.595164, -29.497634, -0.456070}, {202.784286, 1.830205, 240.792023, 0.446688, -87.490632, -2.408985}, {326.742004, 1.115725, 436.851685, 0.000000, 0.000003, -0.200001}, {360.338379, 1.100020, 102.170441, 0.000033, -140.500010, -0.700087}, {482.216766, 1.089854, 430.449249, 0.000000, 0.000000, -0.500001}, {478.902618, 1.325789, 90.371094, 0.000000, -0.000014, 0.000000}, {92.562027, 1.122820, 86.679283, 0.000002, -91.000017, 0.000002}, {264.193359, 1.481601, 121.791405, 0.000000, -179.999991, -0.700000} }; // race name coordinates #laps checkpoint object startline object int raceID = races.addRace(\"Bajarama\", coords1, races.LAPS_Unlimited, \"new-checkpoint\", \"new-checkpoint-start\"); } // The default RoR event callback void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); }","title":"Bajarama"},{"location":"terrain-creation/scripting/#flat-map-v101","text":"This example script illustrates how to add multiple races to one terrain and is usable for the Flat Map terrain (f4afUID-flat_map_full32xa.terrn). File: f4afUID-flat_map_full32xa.terrn.as #include \"base.as\" #include \"races.as\" racesManager races(); void main() { // We add 4 races to the map // RACE 1: Dirt drag race - right side array`<array<double>`> coords1 = { {2293.272705, 0.0, 2035.251465, 0.0, 0.0, 0.0}, {2293.272705, 0.0, 1484.145752, 0.0, 0.0, 0.0} }; // race name coordinates #laps int raceID = races.addRace(\"Dirt DragRace - Right Side\", coords1, races.LAPS_NoLaps); // race 1 added and working // RACE 2: Dirt drag race - left side array`<array<double>`> coords2 = { {2268.944580, 0.0, 2035.251465, 0.0, 0.0, 0.0}, {2268.944580, 0.0, 1484.145752, 0.0, 0.0, 0.0} }; // race name coordinates #laps int raceID = races.addRace(\"Dirt DragRace - Left Side\", coords2, races.LAPS_NoLaps); // race 2 added and working // RACE 3: Runway drag race - left side array`<array<double>`> coords3 = { {2327.494141, 1.0, 1388.388794, 0.0, 0.0, 0.0}, {2327.494141, 1.0, 932.558044 , 0.0, 0.0, 0.0} }; // race name coordinates #laps int raceID = races.addRace(\"Runway DragRace - Left Side\", coords3, races.LAPS_NoLaps); // race 3 added and working // RACE 4: Runway drag race - right side array`<array<double>`> coords4 = { {2343.309814, 1.0, 1388.388794, 0.0, 0.0, 0.0}, {2343.309814, 1.0, 932.558044 , 0.0, 0.0, 0.0} }; // race name coordinates #laps int raceID = races.addRace(\"Runway DragRace - Right Side\", coords4, races.LAPS_NoLaps); // race 4 added and working } // The default RoR event callback void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); }","title":"Flat Map (v10.1)"},{"location":"terrain-creation/scripting/#f1-test-track","text":"This example script illustrates how to use custom checkpoint objects and multiple races on one terrain. The script can be used with the F1 Test Track terrain (2af11UID-f1_testtrack.terrn). File: 2af11UID-f1_testtrack.terrn.as #include \"base.as\" #include \"races.as\" racesManager races(); // The default RoR main function void main() { // We add 5 races to the map // RACE 1 array<array<double>> coords1 = { { 882.132996, 0.120613, 1324.317139, 0.0, 90.0, 0.0}, { 658.905884, 0.076029, 1324.323730, 0.0, 90.0, 0.0}, { 575.903259, 0.062041, 1231.623169, 0.0, 0.0, 0.0}, { 565.184814, 0.063519, 1037.515503, 0.0, 22.0, 0.0}, { 313.121979, 0.079952, 822.904663, 0.0, 5.0, 0.0}, { 385.599213, 0.071390, 722.493469, 0.0, -90.0, 0.0}, { 770.934998, 0.012638, 761.321411, 0.0, -90.5, 0.0}, {1055.889404, 0.078151, 664.507324, 0.0, -89.0, 0.0}, {1388.452026, 0.030632, 663.976257, 0.0, 92.0, 0.0}, {1457.364014, 0.041678, 783.509460, 0.0, 168.0, 0.0}, {1493.774048, 0.104160, 1309.505859, 0.0, 18.5, 0.0}, {1348.787964, 0.099335, 1324.566406, 0.0, 90.0, 0.0}, { 909.298462, 0.044833, 1324.610596, 0.0, 88.5, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object int raceID = races.addRace(\"Grand Prix long\", coords1, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); // race 1 added and working // RACE 2 array<array<double>> coords2 = { {1176.429688, 0.063195, 1254.195313, -0.0, 90.0, 0.0}, { 693.874573, 0.090642, 1251.470825, -0.0, 90.0, 0.0}, { 693.383728, 0.071324, 1182.933594, -0.0, -90.0, 0.0}, { 844.552612, 0.095163, 1168.225586, -0.0, -90.0, 0.0}, { 941.776978, 0.052285, 1183.067139, -0.0, -90.0, 0.0}, {1079.778198, 0.096842, 1183.057373, -0.0, -90.0, 0.0}, {1177.627563, 0.067999, 1125.772461, -0.0, -40.0, 0.0}, {1282.897095, 0.938393, 1045.571899, 0.0, -90.0, 0.0}, {1395.055054, 0.107390, 1148.677734, -0.0, 0.0, 0.0}, {1290.430908, 0.098327, 1254.477905, 0.0, 90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object raceID = races.addRace(\"Grand Prix short\", coords2, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); // race 2 added and working // RACE 3 array<array<double>> coords3 = { {1117.230103, 0.067576, 700.704956, 0.0, -90.0, 0.0}, {1136.480469, 0.072812, 1030.468628, 0.0, 90.0, 0.0}, {1101.686768, 0.032589, 701.005127, 0.0, -90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object raceID = races.addRace(\"oval race\", coords3, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); // race 3 added and working // RACE 4 array<array<double>> coords4 = { {1187.875977, 0.0, 1220.567383, 0.0, 90.0, 0.0}, { 784.379578, 0.0, 1221.171143, 0.0, -90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object race version raceID = races.addRace(\"drag race\", coords4, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); // race 4 added and working // RACE 5 double[][] coords5 = { // x z y 3d rot rot 3d rot { 807.868, 5.09987, 1114.47, 0.0, -90.0, 0.0}, { 724.386, 0.0994606, 1084.16, 0.0, 0.0, 0.0}, { 718.647, 0.0998037, 1038.22, 0.0, 45.0, 0.0}, { 696.235, 0.0989883, 992.215, 0.0, -25.0, 0.0}, { 754.302, 0.098882, 999.441, 0.0, 0.0, 0.0}, { 763.464, 0.0987995, 1049.56, 0.0, 45.0, 0.0}, { 831.675, 5.01375, 1058.26, 0.0, 90.0, 0.0}, { 919.557, 0.0995347, 1083.47, 0.0, 0.0, 0.0}, { 884.884, 0.0987005, 1121.12, 0.0, -90.0, 0.0} }; // race name coordinates #laps (no checkpoint objects are specified here, so the default RoR ones will be used) raceID = races.addRace(\"mud race\", coords5, 3); // race 5 added and working } // The default RoR event callback void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); }","title":"F1 Test Track"},{"location":"terrain-creation/scripting/#f1-test-track-with-penalty-events","text":"We can also penalty events if the player hits a specific part of the checkpoint. For this race, we've edited the 2af11UID-new-checkpoint.odef file from f1track_improved.zip to have penalty event boxes: 2af11UID-new-checkpoint.mesh 1, 1, 1 beginbox boxcoords -7.5, 6.95, -4.0, 5.2, -0.5, 0.5 virtual event checkpoint truck endbox beginbox boxcoords -8.6, -7.65, 0.0, 0.55, -0.65, 0.0 virtual event race_penalty truck endbox beginbox boxcoords 8.05, 7.1, 0.0, 0.55, -0.65, 0.0 virtual event race_penalty truck endbox end So the checkpoint looks like this (in debug mode): [image to be added here] As you can see, there are 2 small event boxes that will trigger the penalty event. The penalty event will, when triggered, add an amount of seconds to the lap time. How many seconds can be configured using the races.setPenaltyTime(int raceID, int seconds) method or you can just change it using the PenaltyEvent callback function. We'll also need this PenaltyEvent callback function when we want to show a message if a penalty event was triggered. For this we'll need to: Define the callback function ('on_penaltyEvent' in the script below) Tell the races script about this callback function ('races.setCallback(\"PenaltyEvent\", on_penaltyEvent);') This is all done in the following script. Pay attention to every difference with the script above. #include \"base.as\" #include \"races.as\" racesManager races(); // The default RoR main function void main() { // the penalty event shows no message by default, so we'll have to show a message ourself. races.setCallback(\"PenaltyEvent\", on_penaltyEvent); // We add 5 races to the map // RACE 1 array <array<double> > coords1 = { { 882.132996, 0.120613, 1324.317139, 0.0, 90.0, 0.0}, { 658.905884, 0.076029, 1324.323730, 0.0, 90.0, 0.0}, { 575.903259, 0.062041, 1231.623169, 0.0, 0.0, 0.0}, { 565.184814, 0.063519, 1037.515503, 0.0, 22.0, 0.0}, { 313.121979, 0.079952, 822.904663, 0.0, 5.0, 0.0}, { 385.599213, 0.071390, 722.493469, 0.0, -90.0, 0.0}, { 770.934998, 0.012638, 761.321411, 0.0, -90.5, 0.0}, {1055.889404, 0.078151, 664.507324, 0.0, -89.0, 0.0}, {1388.452026, 0.030632, 663.976257, 0.0, 92.0, 0.0}, {1457.364014, 0.041678, 783.509460, 0.0, 168.0, 0.0}, {1493.774048, 0.104160, 1309.505859, 0.0, 18.5, 0.0}, {1348.787964, 0.099335, 1324.566406, 0.0, 90.0, 0.0}, { 909.298462, 0.044833, 1324.610596, 0.0, 88.5, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object int raceID = races.addRace(\"Grand Prix long\", coords1, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); races.setPenaltyTime(raceID, 10); // <- this sets the default penalty time (in seconds) for this race when a race_penalty event occurs. // race 1 added and working // RACE 2 array<array<double> > coords2 = { {1176.429688, 0.063195, 1254.195313, -0.0, 90.0, 0.0}, { 693.874573, 0.090642, 1251.470825, -0.0, 90.0, 0.0}, { 693.383728, 0.071324, 1182.933594, -0.0, -90.0, 0.0}, { 844.552612, 0.095163, 1168.225586, -0.0, -90.0, 0.0}, { 941.776978, 0.052285, 1183.067139, -0.0, -90.0, 0.0}, {1079.778198, 0.096842, 1183.057373, -0.0, -90.0, 0.0}, {1177.627563, 0.067999, 1125.772461, -0.0, -40.0, 0.0}, {1282.897095, 0.938393, 1045.571899, 0.0, -90.0, 0.0}, {1395.055054, 0.107390, 1148.677734, -0.0, 0.0, 0.0}, {1290.430908, 0.098327, 1254.477905, 0.0, 90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object raceID = races.addRace(\"Grand Prix short\", coords2, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); races.setPenaltyTime(raceID, 10); // <- this sets the default penalty time (in seconds) for this race when a race_penalty event occurs. // race 2 added and working // RACE 3 array<array<double> > coords3 = { {1117.230103, 0.067576, 700.704956, 0.0, -90.0, 0.0}, {1136.480469, 0.072812, 1030.468628, 0.0, 90.0, 0.0}, {1101.686768, 0.032589, 701.005127, 0.0, -90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object raceID = races.addRace(\"oval race\", coords3, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); races.setPenaltyTime(raceID, 10); // <- this sets the default penalty time (in seconds) for this race when a race_penalty event occurs. // race 3 added and working // RACE 4 array<array<double> > coords4 = { {1187.875977, 0.0, 1220.567383, 0.0, 90.0, 0.0}, { 784.379578, 0.0, 1221.171143, 0.0, -90.0, 0.0} }; // race name coordinates #laps checkpoint object startline object finishline object race version raceID = races.addRace(\"drag race\", coords4, races.LAPS_NoLaps, \"new-checkpoint\", \"new-checkpoint-start\", \"new-checkpoint-start\"); races.setPenaltyTime(raceID, 10); // <- this sets the default penalty time (in seconds) for this race when a race_penalty event occurs. // race 4 added and working // RACE 5 double[][] coords5 = { // x z y 3d rot rot 3d rot { 807.868, 5.09987, 1114.47, 0.0, -90.0, 0.0}, { 724.386, 0.0994606, 1084.16, 0.0, 0.0, 0.0}, { 718.647, 0.0998037, 1038.22, 0.0, 45.0, 0.0}, { 696.235, 0.0989883, 992.215, 0.0, -25.0, 0.0}, { 754.302, 0.098882, 999.441, 0.0, 0.0, 0.0}, { 763.464, 0.0987995, 1049.56, 0.0, 45.0, 0.0}, { 831.675, 5.01375, 1058.26, 0.0, 90.0, 0.0}, { 919.557, 0.0995347, 1083.47, 0.0, 0.0, 0.0}, { 884.884, 0.0987005, 1121.12, 0.0, -90.0, 0.0} }; // race name coordinates #laps (no checkpoint objects are specified here, so the default RoR ones will be used) raceID = races.addRace(\"mud race\", coords5, 3); // race 5 added and working } // The default RoR event callback void eventCallback(int eventnum, int value) { races.eventCallback(eventnum, value); } void on_penaltyEvent(dictionary@ info) { // this method gets called every time a race_penalty event occurs. // We can also change the penalty time here: info.set(\"penaltyTime\", 10); // But the penalty time was already set to 10 seconds, because we had set it to 10 in the main() function. // So now we've set it twice to 10 seconds, which is quite pointless... // Just show a message to inform the user about the penalty races.message(\"PENALTY\", \"lightning.png\"); } Notes: We've only used the 'race_penalty' event here, but you can also use the 'race_abort' event, which will abort the race when the event box is triggered. Another way to add penalty seconds is using the races.addPenaltySeconds(int seconds) method. You can also register callback functions for other events: http://docs.rigsofrods.com/angelscript/classraces_manager.html#917f58383f551128acac292effdb3ce2","title":"F1 Test Track (with penalty events)"},{"location":"terrain-creation/scripting/#more-advanced-functionality","text":"","title":"More Advanced Functionality"},{"location":"terrain-creation/scripting/#documentation-and-questions","text":"See reference manual . Studying the script files of other terrains may also greatly help you. In case of questions/suggestions/complains, get in touch in the forums .","title":"Documentation and questions"},{"location":"terrain-creation/scripting/#example-extending-racesmanager","text":"Here's an example where we inherit from the racesManager class and add functionality. (In this case, we limit the allowed vehicles, so the race won't start if certain vehicles aren't used). You can test this script by adding it to the North Saint Helens terrain. #include \"base.as\"; #include \"races.as\"; racesManagerWithVehicleLimit races(); void main() { // Add the race like usual array < array<double> > coords1 = { {1140.259644, 34.136135, 920.070313, 0.0, 0.0, 0.0}, {1140.259644, 34.136135, 950.070313, 0.0, 0.0, 0.0} }; int raceID_testRace = races.addRace(\"testRace\", coords1, races.LAPS_NoLaps); // Add some vehicles (when you don't add any vehicles, then all vehicles will be allowed) races.addVehicle(raceID_testRace, \"Bus RVI agora S\"); races.addVehicle(raceID_testRace, \"Bus RVI agora L\"); } // Other stuff (No race specific stuff under this line) class racesManagerWithVehicleLimit : racesManager { dictionary vehicleData; double lastMessageTime; racesManagerWithVehicleLimit() { super(); lastMessageTime = 0.0; } // extend this method void startRace(int raceID) /*override*/ { bool allow = true; // Do we have vehicle data for this race? array <string> @ vehicles = null; if(vehicleData.get(\"race_\"+raceID, @vehicles)) { // Get the name of the current truck string truckName = \"avatar\"; BeamClass@ truck = game.getCurrentTruck(); if(truck !is null) truckName = truck.getTruckName(); if(vehicles.find(truckName) <0) allow = false; } if(allow) racesManager::startRace(raceID); else { // Avoid message spam (in exceptional cases) if((game.getTime()-this.lastMessageTime)> 5.0) { this.lastMessageTime = game.getTime(); this.message(\"Race \"+this.raceList[raceID].raceName+\" can only be started with one of the following vehicles:\", \"information.png\"); this.message(arrayToString(vehicles), \"information.png\"); } } } void addVehicle(int raceID, string vehicleName) { array <string> @ vehicles = null; if(!vehicleData.get(\"race_\"+raceID, @vehicles)) { array <string> vehicles2 = {}; @vehicles = @vehicles2; vehicleData.set(\"race_\"+raceID, @vehicles); } vehicles.insertLast(vehicleName); } } string arrayToString(array<string>@ arr) { string result = \"\"; if(arr !is null) for(uint i=0; i<arr.length(); ++i) { result += arr[i]; if(i!=arr.length()-1) result += \", \"; } return result; }","title":"Example: Extending RacesManager"},{"location":"terrain-creation/scripting/#troubleshooting","text":"If your race doesn't work, feel free to post your terrain file in this forum, and we may have a look at it. http://rigsofrods.org/forum-19.html Further, you may find some help in this archive: http://rigsofrods.org/old-forum/forums/167-Scripting/page-0001.html","title":"Troubleshooting"},{"location":"terrain-creation/shadows/","text":"Shadows \u00b6 As of version 0.4.5.0, Rigs of Rods uses the PSSM (Parallel-split Shadow Maps) shadows technique. Shadow textures are split into 3 different textures with different resolutions and sizes. The closest one to the camera is the smallest and has the biggest resolution. The second and the thirds are sometimes equal in resolution but not in size. Shadow details progressively degrade as soon as you get into the 2 nd and 3 rd split. How to make your models receive shadows \u00b6 Objects \u00b6 On the 1 st line of the material file, put this line of code: import * from \"managed_mats.material\" If you want to go simple, you can do it this way: material material_name_here: RoR/Managed_Mats/Base { set_texture_alias diffuse_tex texture_name_here.dds } Do not forget to add the : RoR/Managed_Mats/Base after the material's name. Or for more control over the material file, you can do it this way: material material_name_here: RoR/Managed_Mats/Base { technique BaseTechnique { pass BaseRender { //Ambient, diffuse, emissive stuff here texture_unit Diffuse_Map { texture texture_name_here.dds } } } } Notice here that in addition to the : RoR/Managed_Mats/Base , the technique has a defined name BaseTechnique , the pass has a defined name BaseRender , and the texture has a defined name Diffuse_Map . As soon as you put all these three, you will get working shadows with a detailed material file. You can still add as many techniques/passes as you want but do not use the same names again, you can simply not name them. Vehicles \u00b6 For vehicles, you can simply use the managedmaterials section of the truck file, which will give you shadows instantly without any problems. If you want to use a material file instead, use the same technique as explained above. Misc \u00b6 Other than the RoR/Managed_Mats/Base inheritance, you can use all these for each type of texture/model used. RoR/Managed_Mats/Base RoR/Managed_Mats/BaseNoShadows RoR/Managed_Mats/BaseSpecular RoR/Managed_Mats/Vegetation RoR/Managed_Mats/Transparent You can take a look at Rigs of Rods/resources/managed_materials/managed_mats.material for more understanding of how it all works.","title":"Shadows"},{"location":"terrain-creation/shadows/#shadows","text":"As of version 0.4.5.0, Rigs of Rods uses the PSSM (Parallel-split Shadow Maps) shadows technique. Shadow textures are split into 3 different textures with different resolutions and sizes. The closest one to the camera is the smallest and has the biggest resolution. The second and the thirds are sometimes equal in resolution but not in size. Shadow details progressively degrade as soon as you get into the 2 nd and 3 rd split.","title":"Shadows"},{"location":"terrain-creation/shadows/#how-to-make-your-models-receive-shadows","text":"","title":"How to make your models receive shadows"},{"location":"terrain-creation/shadows/#objects","text":"On the 1 st line of the material file, put this line of code: import * from \"managed_mats.material\" If you want to go simple, you can do it this way: material material_name_here: RoR/Managed_Mats/Base { set_texture_alias diffuse_tex texture_name_here.dds } Do not forget to add the : RoR/Managed_Mats/Base after the material's name. Or for more control over the material file, you can do it this way: material material_name_here: RoR/Managed_Mats/Base { technique BaseTechnique { pass BaseRender { //Ambient, diffuse, emissive stuff here texture_unit Diffuse_Map { texture texture_name_here.dds } } } } Notice here that in addition to the : RoR/Managed_Mats/Base , the technique has a defined name BaseTechnique , the pass has a defined name BaseRender , and the texture has a defined name Diffuse_Map . As soon as you put all these three, you will get working shadows with a detailed material file. You can still add as many techniques/passes as you want but do not use the same names again, you can simply not name them.","title":"Objects"},{"location":"terrain-creation/shadows/#vehicles","text":"For vehicles, you can simply use the managedmaterials section of the truck file, which will give you shadows instantly without any problems. If you want to use a material file instead, use the same technique as explained above.","title":"Vehicles"},{"location":"terrain-creation/shadows/#misc","text":"Other than the RoR/Managed_Mats/Base inheritance, you can use all these for each type of texture/model used. RoR/Managed_Mats/Base RoR/Managed_Mats/BaseNoShadows RoR/Managed_Mats/BaseSpecular RoR/Managed_Mats/Vegetation RoR/Managed_Mats/Transparent You can take a look at Rigs of Rods/resources/managed_materials/managed_mats.material for more understanding of how it all works.","title":"Misc"},{"location":"terrain-creation/terrain-conversion-terrn2/","text":"Converting terrain to terrn2 format \u00b6 Basic (Single-layer) 0.3x terrain to 0.4 conversion \u00b6 As of 0.4.0, The terrain format changed into what's now called .terrn2 , This page will teach you how to easily convert a basic terrain to 0.4. Programs needed: Any text editor (I recommend Notepad++ as I will use one of its features) GIMP (Version 2.8.x is used in this tutorial) DDS texture plugin for GIMP This page will not explain how to install it. What defines a \"Single-layer\" terrain? \u00b6 In the old .terrn format's .cfg file, you will find a line at the top in this format: WorldTexture=texture.dds This is the texture image for this single-layer. A majority of 0.3x terrains only use this layer for their terrain texture. Terrains that have more than one texture layer use Alpha Splatting which is not covered in this tutorial. Getting the template \u00b6 I have made and uploaded a template terrain here with the right file structure which will be used throughout this tutorial. Download the raw heightmap version, as 0.3x terrains use .raw heightmaps. Choosing your terrain to convert \u00b6 Lots of terrains have already been converted, you can find them here , don't waste your time converting a terrain that has already been converted! In this tutorial I will be converting the Cliffdrop terrain. Getting started \u00b6 Once you've downloaded the template terrain, extract it into a folder using any zipping program (Windows can extract files by default, but I use 7-Zip . It should look like this: Extract the 0.3x terrain zip into that same folder. Now it should look like this: Rename the template_04 files to match your terrain's file name Delete the template_04.raw file first as you will get duplicate errors otherwise! : Transfering terrain information to 0.4 terrain files \u00b6 Now that you've got both the new 0.4 files and the old terrain files in the zip, I will start out by transfering the information from the .terrn file to the .terrn2 file. If you're using Notepad++, you can open both files and have them side-by-side for easy editing: .terrn -> .terrn2 \u00b6 [General] #Name of your terrain, defined at the top of the .terrn file. Name = Cliff Drop Crash Test Map #File name of the heightmap configuration (0.3x's .cfg) GeometryConfig = Cliffdrop.otc #If your map doesn't have water, keep this value at the default (0) and delete the WaterLine=1.0 line. Water=0 #Replace 1.0 with the value from your .terrn #WaterLine=1.0 #Terrain/water color, best to leave it at the default. AmbientColor = 0.93, 0.86, 0.76 #The position RoRBot spawns at when the terrain is loaded. Since 0.4 only has one position and 0.3x has three, copy *only* #one of the positions. If one of them spawns in the wrong place ingame, try another one. #1364.25, 121.028, 1272.22, 0, -86.6805, 0662842 #The numbers do not have to be seperated by commas. StartPosition = 1364.25 121.028 1272.22 #Where the map will be located in the terrain selector menu. leave it as the default. More about ID's here: #https://archives.rigsofrods.org/wiki/index.php/Truck_Categories CategoryID = 129 #Version of the terrain. If no version number is listed by the author, leave it as the default. Version = 1 #Unique ID of the terrain. If none is listed in the .terrn, generate one at #https://guidgenerator.com GUID = 9b202f78-ba1c-4d58-9996-61066fa5d9fc #Extras #If your map has a groundmodel, define the landuse file in this format: #TractionMap = landuse.cfg #If your map has a custom Caelum sky file, define it in this format: #CaelumConfigFile = #If your map uses a custom Sandstorm sky file (ex. Aspen Grove), define it here. Otherwise, leave it as the default. SandStormCubeMap = tracks/skyboxcol #Authors of the terrain. If the .terrn file doesn't list who made the map, just put \"unknown\". You may list yourself for converting the terrain. [Authors] terrain = Box5Diesel converting = Michael10055 #Filename for the object file. [Objects] Cliffdrop.tobj= #If your map has a race script define it here in this format: #All 0.3x races use .terrn.as as the extension, include the .terrn also: [Scripts] #template_04.terrn.as= .cfg -> .otc \u00b6 ;Heightmap values ;size (horizontal/vertical) Heightmap.0.0.raw.size=1025 ;bytes per pixel (1 = 8bit, 2=16bit) Heightmap.0.0.raw.bpp=2 ;If the terrain heightmap needs to be flipped (eg. Terragen exports raw upside down) Heightmap.0.0.flipX=1 ;Terrain size values ;size WorldSizeX=3000 WorldSizeZ=3000 ;Terrain max height WorldSizeY=300 ;To disable game caching when working on a terrain. disableCaching=1 ;Filename to define the textures. PageFileFormat=Cliffdrop-page-0-0.otc ;If the .cfg has this defined, set it here. Otherwise, leave it as the default MaxPixelError=3 ;Advanced 0.4 texture values, best to leave them as the defaults. LightmapEnabled=0 SpecularMappingEnabled=1 NormalMappingEnabled=0 .cfg -> *.-page-0-0.otc \u00b6 Cliffdrop.raw = Heightmap filename 1 = Amount of layers worldSize = X/Z value in the .otc [Has to be the same] Cliffdrop.dds = texture name Cliffdrop.raw 1 ; worldSize, diffusespecular, normalheight, blendmap, blendmapmode, alpha 3000 , Cliffdrop.dds , Cliffdrop.dds .terrn -> .tobj \u00b6 ;After the configuration lines in the .terrn (usually after line 4) Copy all the lines after it except \"end\". 1385.381592, 300.027374, 736.709045, 0.000000, 0.000000, 0.000000, truckshop 1388.14, 300.974, 716.53, 0, 0, 0, truck wrecker.truck We're done with the text editor now. Removing the terrain shininess \u00b6 If you tried the terrain in-game right now, you'd see there is a large white space over the terrain where the sun is. I will use GIMP with the dds texture plugin to fix this. I recommend backing up your original texture image first. Open your texture in GIMP (in this case, Cliffdrop.jpg) \u00b6 Go to Layer > Mask > Add Layer Mask... \u00b6 Select Black (full transparency) and click 'Add' \u00b6 It should now look like this: \u00b6 Go to File > Export As... \u00b6 Set the file format to .dds \u00b6 Set the compression type to 'BC3 / DXT5' and click 'OK' \u00b6 You can now close GIMP. Trying the terrain in-game \u00b6 Now go ahead and zip all the files and place them in your Documents/Rigs of Rods 0.4/packs folder. When you load the terrain in Rigs of Rods, You should have a working 0.4-ported terrain! Download the finished terrain here. \u00b6 Removing the alpha mask \u00b6 If you want to edit an existing terrain texture or don't have the original image anymore, you can follow these steps to remove the alpha mask: Install paint.net if you don't already have it. Since paint.net does not have this functionality by default, you also need to install dpy's Plugin Pack . To install the plugins, open the zip file and drag the .dll files inside the dpyplugins8.1 folder into paint.net's Effects folder, usually located in C:\\Program Files\\paint.net\\Effects : Click Continue when it asks for administrator permission. Now open your .dds file in paint.net and navigate to Effects -> Color -> Alpha_to_255 . That's it! You can now edit the image and re-apply the alpha mask using the above steps once you're done.","title":"Converting old terrain to terrn2 format"},{"location":"terrain-creation/terrain-conversion-terrn2/#converting-terrain-to-terrn2-format","text":"","title":"Converting terrain to terrn2 format"},{"location":"terrain-creation/terrain-conversion-terrn2/#basic-single-layer-03x-terrain-to-04-conversion","text":"As of 0.4.0, The terrain format changed into what's now called .terrn2 , This page will teach you how to easily convert a basic terrain to 0.4. Programs needed: Any text editor (I recommend Notepad++ as I will use one of its features) GIMP (Version 2.8.x is used in this tutorial) DDS texture plugin for GIMP This page will not explain how to install it.","title":"Basic (Single-layer) 0.3x terrain to 0.4 conversion"},{"location":"terrain-creation/terrain-conversion-terrn2/#what-defines-a-single-layer-terrain","text":"In the old .terrn format's .cfg file, you will find a line at the top in this format: WorldTexture=texture.dds This is the texture image for this single-layer. A majority of 0.3x terrains only use this layer for their terrain texture. Terrains that have more than one texture layer use Alpha Splatting which is not covered in this tutorial.","title":"What defines a \"Single-layer\" terrain?"},{"location":"terrain-creation/terrain-conversion-terrn2/#getting-the-template","text":"I have made and uploaded a template terrain here with the right file structure which will be used throughout this tutorial. Download the raw heightmap version, as 0.3x terrains use .raw heightmaps.","title":"Getting the template"},{"location":"terrain-creation/terrain-conversion-terrn2/#choosing-your-terrain-to-convert","text":"Lots of terrains have already been converted, you can find them here , don't waste your time converting a terrain that has already been converted! In this tutorial I will be converting the Cliffdrop terrain.","title":"Choosing your terrain to convert"},{"location":"terrain-creation/terrain-conversion-terrn2/#getting-started","text":"Once you've downloaded the template terrain, extract it into a folder using any zipping program (Windows can extract files by default, but I use 7-Zip . It should look like this: Extract the 0.3x terrain zip into that same folder. Now it should look like this: Rename the template_04 files to match your terrain's file name Delete the template_04.raw file first as you will get duplicate errors otherwise! :","title":"Getting started"},{"location":"terrain-creation/terrain-conversion-terrn2/#transfering-terrain-information-to-04-terrain-files","text":"Now that you've got both the new 0.4 files and the old terrain files in the zip, I will start out by transfering the information from the .terrn file to the .terrn2 file. If you're using Notepad++, you can open both files and have them side-by-side for easy editing:","title":"Transfering terrain information to 0.4 terrain files"},{"location":"terrain-creation/terrain-conversion-terrn2/#terrn-terrn2","text":"[General] #Name of your terrain, defined at the top of the .terrn file. Name = Cliff Drop Crash Test Map #File name of the heightmap configuration (0.3x's .cfg) GeometryConfig = Cliffdrop.otc #If your map doesn't have water, keep this value at the default (0) and delete the WaterLine=1.0 line. Water=0 #Replace 1.0 with the value from your .terrn #WaterLine=1.0 #Terrain/water color, best to leave it at the default. AmbientColor = 0.93, 0.86, 0.76 #The position RoRBot spawns at when the terrain is loaded. Since 0.4 only has one position and 0.3x has three, copy *only* #one of the positions. If one of them spawns in the wrong place ingame, try another one. #1364.25, 121.028, 1272.22, 0, -86.6805, 0662842 #The numbers do not have to be seperated by commas. StartPosition = 1364.25 121.028 1272.22 #Where the map will be located in the terrain selector menu. leave it as the default. More about ID's here: #https://archives.rigsofrods.org/wiki/index.php/Truck_Categories CategoryID = 129 #Version of the terrain. If no version number is listed by the author, leave it as the default. Version = 1 #Unique ID of the terrain. If none is listed in the .terrn, generate one at #https://guidgenerator.com GUID = 9b202f78-ba1c-4d58-9996-61066fa5d9fc #Extras #If your map has a groundmodel, define the landuse file in this format: #TractionMap = landuse.cfg #If your map has a custom Caelum sky file, define it in this format: #CaelumConfigFile = #If your map uses a custom Sandstorm sky file (ex. Aspen Grove), define it here. Otherwise, leave it as the default. SandStormCubeMap = tracks/skyboxcol #Authors of the terrain. If the .terrn file doesn't list who made the map, just put \"unknown\". You may list yourself for converting the terrain. [Authors] terrain = Box5Diesel converting = Michael10055 #Filename for the object file. [Objects] Cliffdrop.tobj= #If your map has a race script define it here in this format: #All 0.3x races use .terrn.as as the extension, include the .terrn also: [Scripts] #template_04.terrn.as=","title":".terrn -&gt; .terrn2"},{"location":"terrain-creation/terrain-conversion-terrn2/#cfg-otc","text":";Heightmap values ;size (horizontal/vertical) Heightmap.0.0.raw.size=1025 ;bytes per pixel (1 = 8bit, 2=16bit) Heightmap.0.0.raw.bpp=2 ;If the terrain heightmap needs to be flipped (eg. Terragen exports raw upside down) Heightmap.0.0.flipX=1 ;Terrain size values ;size WorldSizeX=3000 WorldSizeZ=3000 ;Terrain max height WorldSizeY=300 ;To disable game caching when working on a terrain. disableCaching=1 ;Filename to define the textures. PageFileFormat=Cliffdrop-page-0-0.otc ;If the .cfg has this defined, set it here. Otherwise, leave it as the default MaxPixelError=3 ;Advanced 0.4 texture values, best to leave them as the defaults. LightmapEnabled=0 SpecularMappingEnabled=1 NormalMappingEnabled=0","title":".cfg -&gt; .otc"},{"location":"terrain-creation/terrain-conversion-terrn2/#cfg-page-0-0otc","text":"Cliffdrop.raw = Heightmap filename 1 = Amount of layers worldSize = X/Z value in the .otc [Has to be the same] Cliffdrop.dds = texture name Cliffdrop.raw 1 ; worldSize, diffusespecular, normalheight, blendmap, blendmapmode, alpha 3000 , Cliffdrop.dds , Cliffdrop.dds","title":".cfg -&gt; *.-page-0-0.otc"},{"location":"terrain-creation/terrain-conversion-terrn2/#terrn-tobj","text":";After the configuration lines in the .terrn (usually after line 4) Copy all the lines after it except \"end\". 1385.381592, 300.027374, 736.709045, 0.000000, 0.000000, 0.000000, truckshop 1388.14, 300.974, 716.53, 0, 0, 0, truck wrecker.truck We're done with the text editor now.","title":".terrn -&gt; .tobj"},{"location":"terrain-creation/terrain-conversion-terrn2/#removing-the-terrain-shininess","text":"If you tried the terrain in-game right now, you'd see there is a large white space over the terrain where the sun is. I will use GIMP with the dds texture plugin to fix this. I recommend backing up your original texture image first.","title":"Removing the terrain shininess"},{"location":"terrain-creation/terrain-conversion-terrn2/#open-your-texture-in-gimp-in-this-case-cliffdropjpg","text":"","title":"Open your texture in GIMP (in this case, Cliffdrop.jpg)"},{"location":"terrain-creation/terrain-conversion-terrn2/#go-to-layer-mask-add-layer-mask","text":"","title":"Go to Layer &gt; Mask &gt; Add Layer Mask..."},{"location":"terrain-creation/terrain-conversion-terrn2/#select-black-full-transparency-and-click-add","text":"","title":"Select Black (full transparency) and click 'Add'"},{"location":"terrain-creation/terrain-conversion-terrn2/#it-should-now-look-like-this","text":"","title":"It should now look like this:"},{"location":"terrain-creation/terrain-conversion-terrn2/#go-to-file-export-as","text":"","title":"Go to File &gt; Export As..."},{"location":"terrain-creation/terrain-conversion-terrn2/#set-the-file-format-to-dds","text":"","title":"Set the file format to .dds"},{"location":"terrain-creation/terrain-conversion-terrn2/#set-the-compression-type-to-bc3-dxt5-and-click-ok","text":"You can now close GIMP.","title":"Set the compression type to 'BC3 / DXT5' and click 'OK'"},{"location":"terrain-creation/terrain-conversion-terrn2/#trying-the-terrain-in-game","text":"Now go ahead and zip all the files and place them in your Documents/Rigs of Rods 0.4/packs folder. When you load the terrain in Rigs of Rods, You should have a working 0.4-ported terrain!","title":"Trying the terrain in-game"},{"location":"terrain-creation/terrain-conversion-terrn2/#download-the-finished-terrain-here","text":"","title":"Download the finished terrain here."},{"location":"terrain-creation/terrain-conversion-terrn2/#removing-the-alpha-mask","text":"If you want to edit an existing terrain texture or don't have the original image anymore, you can follow these steps to remove the alpha mask: Install paint.net if you don't already have it. Since paint.net does not have this functionality by default, you also need to install dpy's Plugin Pack . To install the plugins, open the zip file and drag the .dll files inside the dpyplugins8.1 folder into paint.net's Effects folder, usually located in C:\\Program Files\\paint.net\\Effects : Click Continue when it asks for administrator permission. Now open your .dds file in paint.net and navigate to Effects -> Color -> Alpha_to_255 . That's it! You can now edit the image and re-apply the alpha mask using the above steps once you're done.","title":"Removing the alpha mask"},{"location":"terrain-creation/terrn2-subsystem/","text":"Terrain subsystem (Terrn2) \u00b6 This is a technical reference of terrain system in Rigs of Rods. It provides commented examples of various files needed to compose a terrn2 terrain. If you're new to terrain creation, read intro to terrain creation first. Terrain 2 (.terrn2) file format \u00b6 ## ============================================================================== ## *.terrn2 file = Entry point for RoR 0.4 map # ## File is organized into sections denoted by [SectionName] lines. ## Sections consist of \"key = value\" pairs. ## Comments start with hash '#' character. ## Boolean values can be 1, true, yes | 0, false, no ## ## ============================================================================== ## (Required) General section, provides basic info. [ General ] ## (String) Name of the map, displayed in menu. Name = YourMap ## (FileName) File with terrain geometry info. GeometryConfig = YourMap.otc ## (Boolean) Use water in the terrain? Water = 1 ## (Real) Height of water surface. WaterLine = 6 ## (Real) Height of the black ground plane WaterBottomLine = -150 ## (RGB, float notation) Color of the ambient light. AmbientColor = 1 ,1,1 ## (FileName) Config file for the Caelum system (sky/weather/sun). CaelumConfigFile = YourMap.os ## (FileName) Config file for the Hydrax (water rendering) HydraxConfigFile = YourMap.hdx ## (XYZ position) Starting position of player. StartPosition = 256 , 10 , 256 ## (String) Name of the cubemap (sky) to use. ## You can use \"tracks/skyboxcol\" which comes with RoR. SandStormCubeMap = tracks/skyboxcol ## (Real) Gravity power. Earth gravity is \"-9.81\". Gravity = -9.81 ## (Integer) Category ID. Valid numbers for v0.4.0.7: ## 129 = Addon Terrains ## 5000 = Official Terrains CategoryID = 129 ## (Integer) Terrain version Version = 1 ## (GUID string) Required. Use generator link below. GUID = YourID ## (Filename) Link to 'landuse' file. TractionMap = YourMap-landuse.cfg ## (Optional) Authors, shown in menu. [ Authors ] ## (\"String = String\" pairs) Contributed work = Name terrain = Yourname trees & grass = Yourname textures = Yourname objects = Yourname ## (Optional) Items placed on terrain. [ Objects ] ## Names of TerrainObject files, ending with \"=\". YourMapobj.tobj = YourMapMoreobj.tobj = ## Executable scripts asociated with the map. [ Scripts ] ## Names of AngelScript files, ending with \"=\". SomeScripts.as = MoreScripts.as = Generate GUID for your map: http://www.guidgenerator.com/ Ogre Terrain Config (.otc) \u00b6 ## ============================================================================== ## Ogre Terrain Config (.otc) file ## Defines heightmap, texture layers and shader options # ## Format is INI without sections, `Key=Value` pairs, NO SPACES AROUND `=`! ## Boolean values can be: 1, true, yes | 0, false, no ## ============================================================================== ## (Integer, default 0) The number of terrain pages in X direction ## 0 means that you only have one page PagesX = 0 ## (Integer, default 0) The number of terrain pages in Z (logical Y) direction ## 0 means that you only have one page PagesZ = 0 ## (Integer, default 1025) How large is a page of tiles (in vertices)? Must be (2^n)+1 PageSize = 1025 ## The pagefile format ## Default: {MAP_NAME}-page-{X}-{Z}.otc PageFileFormat = YourMap- { X } - { Z } .otc ## Heightmap.X.Y ## The heightmap options, specified per-page Heightmap.0.0.raw.size = 1025 Heightmap.0.0.raw.bpp = 2 Heightmap.0.0.flipX = 1 Heightmap.0.0.flipY = 1 ## (Boolean) Flat terrain? If true, no heightmap will be loaded. Flat = false ## (Integer, default 1024) The world size of the terrain, in meters ## This setting is independent on heightmap resolution; ## for example using large heightmap with small world will yield in high-detail geometry. WorldSizeX = 1024 WorldSizeZ = 1024 ## (Integer, default 50) The factor with what the heightmap values get multiplied with WorldSizeY = 100 ## (Integer, default 1024) Sets the default size of blend maps for a new terrain. ## This is the resolution of each blending layer for a new terrain. LayerBlendMapSize = 1024 ## disableCaching=1 will always enforce regeneration of the terrain, ## useful if you want to change the terrain config (.otc) and test it. ## Does not cache the objects on it. disableCaching = 1 ## ============= ## optimizations ## ============= ## (Integer, default 33) ## Minimum batch size (along one edge) in vertices; must be 2^n+1. ## The terrain will be divided into tiles, ## and this is the minimum size of one tile in vertices (at any LOD). minBatchSize = 33 ## (Integer, default 65) ## Maximum batch size (along one edge) in vertices; must be 2^n+1 and <= 65. ## The terrain will be divided into hierarchical tiles, ## and this is the maximum size of one tile in vertices (at any LOD). maxBatchSize = 65 ## (Boolean, default false) ## Whether to support a light map over the terrain in the shader, if it's present. LightmapEnabled = false ## (Boolean, default false) Whether to support normal mapping per layer in the shader. NormalMappingEnabled = false ## (Boolean, default false) Whether to support specular mapping per layer in the shader. ## IMPORTANT: Keep this enabled, otherwise the specular map in the texture files ## won't be respected and your terrain will be ridiculously shiny. SpecularMappingEnabled = true ## (Boolean, default false) Whether to support parallax mapping per layer in the shader. ParallaxMappingEnabled = false ## (Boolean, default false) ## Whether to support a global colour map over the terrain in the shader, if it's present. GlobalColourMapEnabled = false ## (Boolean, default false) Whether to use depth shadows. ReceiveDynamicShadowsDepth = false ## (Integer, default 1024) Sets the default size of composite maps for a new terrain. CompositeMapSize = 1024 ## (Integer, default 4000) Set the distance at which to start using a composite map if present. CompositeMapDistance = 4000 ## (Integer, default 30) the default size of 'skirts' used to hide terrain cracks. SkirtSize = 30 ## (Integer, default 1024) Sets the default size of lightmaps for a new terrain. LightMapSize = 1024 ## (Boolean, default false) Whether the terrain will be able to cast shadows. CastsDynamicShadows = false ## (Integer, default 5) ## Set the maximum screen pixel error that should be allowed when rendering MaxPixelError = 3 ## (Boolean, default false) dump the blend maps to files named blendmap_layer_X.png DebugBlendMaps = false Ogre Terrain Page Config (.otc) \u00b6 The terrain consists of pages. Number of pages is defined by PagesX and PagesZ (described above). There must be at least 1 page. For each page, there must be an .otc file. File name format is set by PageFileFormat (described above). If there's just one page, it'll be named like \"MapName-page-0-0.otc\" The page-config file specifies a heightmap to use for the page and terrain texture layers. Format overview \u00b6 Line1: Heightmap (file name) . For example: my_heightmap.png Line2: Number of layers (integral number in range 1-6) The OgreTerrain component has a limit of 6 layers (5 blendmaps) Line3 and further: Layer definitions (see below) Layer definitions \u00b6 Lines starting with semicolon ''' ' ; ' ''' are comments Layer definition line has these values, separated by ''' ' , ' ''' comma : size (real number 1-2048) The target size of the texture on the terrain diffusespecular (file name) The filename of the texture with the following format: RGB=Diffuse Color, A=Specular map normalheight (file name) The filename of the texture with the following format: RGB=Normal map, A=Heightmap for parallax mapping blendmap (file name) Blendmap texture file name blendmapmode (One capital letter: R / G / B / A) Which color channel of the blendmap use for blending this layer. opacity (Real number 0-1) Setting to 0 makes layer invisible. Layer at position #0 is a ground layer - it covers the entire page and thus needs no blendmap . It only accepts first 3 arguments: [size] [diffusespecular] [normalheight] Layers #1 - #5 only cover areas which have a corresponding color in the blendmap . For explanation of used images, see Images & color channels Example \u00b6 31 -heightmap.png 6 ; Params: [ worldSize ] , [ diffusespecular ] , [ normalheight ] , [ blendmap ] , [ blendmapmode ] , [ alpha ] ; The ground layer: 3 .3 , 31 -gravel_diffusespecular.dds , 31 -gravel_normalheight.dds ; Other layers: 6 , 31 -rock_diffusespecular.dds , 31 -rock_normalheight.dds , 31 -surfaces2.png, B, 0 .9 5 , 31 -sand_diffusespecular.dds , 31 -sand_normalheight.dds , 31 -surfaces2.png, G, 0 .9 4 , 31 -grass_diffusespecular.dds , 31 -grass_normalheight.dds , 31 -surfaces1.png, G, 0 .8 3 , 31 -asphalt_diffusespecular.dds, 31 -asphalt_normalheight.dds, 31 -surfaces1.png, R, 0 .95 1024 , 31 -shadow_diffusespecular.dds , 31 -shadow_normalheight.dds , 31 -shadow.png , R, 0 .8 Terrain Objects (.tobj) \u00b6 Defines object placement on terrain. More info: Static objects","title":"Terrn2 file format"},{"location":"terrain-creation/terrn2-subsystem/#terrain-subsystem-terrn2","text":"This is a technical reference of terrain system in Rigs of Rods. It provides commented examples of various files needed to compose a terrn2 terrain. If you're new to terrain creation, read intro to terrain creation first.","title":"Terrain subsystem (Terrn2)"},{"location":"terrain-creation/terrn2-subsystem/#terrain-2-terrn2-file-format","text":"## ============================================================================== ## *.terrn2 file = Entry point for RoR 0.4 map # ## File is organized into sections denoted by [SectionName] lines. ## Sections consist of \"key = value\" pairs. ## Comments start with hash '#' character. ## Boolean values can be 1, true, yes | 0, false, no ## ## ============================================================================== ## (Required) General section, provides basic info. [ General ] ## (String) Name of the map, displayed in menu. Name = YourMap ## (FileName) File with terrain geometry info. GeometryConfig = YourMap.otc ## (Boolean) Use water in the terrain? Water = 1 ## (Real) Height of water surface. WaterLine = 6 ## (Real) Height of the black ground plane WaterBottomLine = -150 ## (RGB, float notation) Color of the ambient light. AmbientColor = 1 ,1,1 ## (FileName) Config file for the Caelum system (sky/weather/sun). CaelumConfigFile = YourMap.os ## (FileName) Config file for the Hydrax (water rendering) HydraxConfigFile = YourMap.hdx ## (XYZ position) Starting position of player. StartPosition = 256 , 10 , 256 ## (String) Name of the cubemap (sky) to use. ## You can use \"tracks/skyboxcol\" which comes with RoR. SandStormCubeMap = tracks/skyboxcol ## (Real) Gravity power. Earth gravity is \"-9.81\". Gravity = -9.81 ## (Integer) Category ID. Valid numbers for v0.4.0.7: ## 129 = Addon Terrains ## 5000 = Official Terrains CategoryID = 129 ## (Integer) Terrain version Version = 1 ## (GUID string) Required. Use generator link below. GUID = YourID ## (Filename) Link to 'landuse' file. TractionMap = YourMap-landuse.cfg ## (Optional) Authors, shown in menu. [ Authors ] ## (\"String = String\" pairs) Contributed work = Name terrain = Yourname trees & grass = Yourname textures = Yourname objects = Yourname ## (Optional) Items placed on terrain. [ Objects ] ## Names of TerrainObject files, ending with \"=\". YourMapobj.tobj = YourMapMoreobj.tobj = ## Executable scripts asociated with the map. [ Scripts ] ## Names of AngelScript files, ending with \"=\". SomeScripts.as = MoreScripts.as = Generate GUID for your map: http://www.guidgenerator.com/","title":"Terrain 2 (.terrn2) file format"},{"location":"terrain-creation/terrn2-subsystem/#ogre-terrain-config-otc","text":"## ============================================================================== ## Ogre Terrain Config (.otc) file ## Defines heightmap, texture layers and shader options # ## Format is INI without sections, `Key=Value` pairs, NO SPACES AROUND `=`! ## Boolean values can be: 1, true, yes | 0, false, no ## ============================================================================== ## (Integer, default 0) The number of terrain pages in X direction ## 0 means that you only have one page PagesX = 0 ## (Integer, default 0) The number of terrain pages in Z (logical Y) direction ## 0 means that you only have one page PagesZ = 0 ## (Integer, default 1025) How large is a page of tiles (in vertices)? Must be (2^n)+1 PageSize = 1025 ## The pagefile format ## Default: {MAP_NAME}-page-{X}-{Z}.otc PageFileFormat = YourMap- { X } - { Z } .otc ## Heightmap.X.Y ## The heightmap options, specified per-page Heightmap.0.0.raw.size = 1025 Heightmap.0.0.raw.bpp = 2 Heightmap.0.0.flipX = 1 Heightmap.0.0.flipY = 1 ## (Boolean) Flat terrain? If true, no heightmap will be loaded. Flat = false ## (Integer, default 1024) The world size of the terrain, in meters ## This setting is independent on heightmap resolution; ## for example using large heightmap with small world will yield in high-detail geometry. WorldSizeX = 1024 WorldSizeZ = 1024 ## (Integer, default 50) The factor with what the heightmap values get multiplied with WorldSizeY = 100 ## (Integer, default 1024) Sets the default size of blend maps for a new terrain. ## This is the resolution of each blending layer for a new terrain. LayerBlendMapSize = 1024 ## disableCaching=1 will always enforce regeneration of the terrain, ## useful if you want to change the terrain config (.otc) and test it. ## Does not cache the objects on it. disableCaching = 1 ## ============= ## optimizations ## ============= ## (Integer, default 33) ## Minimum batch size (along one edge) in vertices; must be 2^n+1. ## The terrain will be divided into tiles, ## and this is the minimum size of one tile in vertices (at any LOD). minBatchSize = 33 ## (Integer, default 65) ## Maximum batch size (along one edge) in vertices; must be 2^n+1 and <= 65. ## The terrain will be divided into hierarchical tiles, ## and this is the maximum size of one tile in vertices (at any LOD). maxBatchSize = 65 ## (Boolean, default false) ## Whether to support a light map over the terrain in the shader, if it's present. LightmapEnabled = false ## (Boolean, default false) Whether to support normal mapping per layer in the shader. NormalMappingEnabled = false ## (Boolean, default false) Whether to support specular mapping per layer in the shader. ## IMPORTANT: Keep this enabled, otherwise the specular map in the texture files ## won't be respected and your terrain will be ridiculously shiny. SpecularMappingEnabled = true ## (Boolean, default false) Whether to support parallax mapping per layer in the shader. ParallaxMappingEnabled = false ## (Boolean, default false) ## Whether to support a global colour map over the terrain in the shader, if it's present. GlobalColourMapEnabled = false ## (Boolean, default false) Whether to use depth shadows. ReceiveDynamicShadowsDepth = false ## (Integer, default 1024) Sets the default size of composite maps for a new terrain. CompositeMapSize = 1024 ## (Integer, default 4000) Set the distance at which to start using a composite map if present. CompositeMapDistance = 4000 ## (Integer, default 30) the default size of 'skirts' used to hide terrain cracks. SkirtSize = 30 ## (Integer, default 1024) Sets the default size of lightmaps for a new terrain. LightMapSize = 1024 ## (Boolean, default false) Whether the terrain will be able to cast shadows. CastsDynamicShadows = false ## (Integer, default 5) ## Set the maximum screen pixel error that should be allowed when rendering MaxPixelError = 3 ## (Boolean, default false) dump the blend maps to files named blendmap_layer_X.png DebugBlendMaps = false","title":"Ogre Terrain Config (.otc)"},{"location":"terrain-creation/terrn2-subsystem/#ogre-terrain-page-config-otc","text":"The terrain consists of pages. Number of pages is defined by PagesX and PagesZ (described above). There must be at least 1 page. For each page, there must be an .otc file. File name format is set by PageFileFormat (described above). If there's just one page, it'll be named like \"MapName-page-0-0.otc\" The page-config file specifies a heightmap to use for the page and terrain texture layers.","title":"Ogre Terrain Page Config (.otc)"},{"location":"terrain-creation/terrn2-subsystem/#format-overview","text":"Line1: Heightmap (file name) . For example: my_heightmap.png Line2: Number of layers (integral number in range 1-6) The OgreTerrain component has a limit of 6 layers (5 blendmaps) Line3 and further: Layer definitions (see below)","title":"Format overview"},{"location":"terrain-creation/terrn2-subsystem/#layer-definitions","text":"Lines starting with semicolon ''' ' ; ' ''' are comments Layer definition line has these values, separated by ''' ' , ' ''' comma : size (real number 1-2048) The target size of the texture on the terrain diffusespecular (file name) The filename of the texture with the following format: RGB=Diffuse Color, A=Specular map normalheight (file name) The filename of the texture with the following format: RGB=Normal map, A=Heightmap for parallax mapping blendmap (file name) Blendmap texture file name blendmapmode (One capital letter: R / G / B / A) Which color channel of the blendmap use for blending this layer. opacity (Real number 0-1) Setting to 0 makes layer invisible. Layer at position #0 is a ground layer - it covers the entire page and thus needs no blendmap . It only accepts first 3 arguments: [size] [diffusespecular] [normalheight] Layers #1 - #5 only cover areas which have a corresponding color in the blendmap . For explanation of used images, see Images & color channels","title":"Layer definitions"},{"location":"terrain-creation/terrn2-subsystem/#example","text":"31 -heightmap.png 6 ; Params: [ worldSize ] , [ diffusespecular ] , [ normalheight ] , [ blendmap ] , [ blendmapmode ] , [ alpha ] ; The ground layer: 3 .3 , 31 -gravel_diffusespecular.dds , 31 -gravel_normalheight.dds ; Other layers: 6 , 31 -rock_diffusespecular.dds , 31 -rock_normalheight.dds , 31 -surfaces2.png, B, 0 .9 5 , 31 -sand_diffusespecular.dds , 31 -sand_normalheight.dds , 31 -surfaces2.png, G, 0 .9 4 , 31 -grass_diffusespecular.dds , 31 -grass_normalheight.dds , 31 -surfaces1.png, G, 0 .8 3 , 31 -asphalt_diffusespecular.dds, 31 -asphalt_normalheight.dds, 31 -surfaces1.png, R, 0 .95 1024 , 31 -shadow_diffusespecular.dds , 31 -shadow_normalheight.dds , 31 -shadow.png , R, 0 .8","title":"Example"},{"location":"terrain-creation/terrn2-subsystem/#terrain-objects-tobj","text":"Defines object placement on terrain. More info: Static objects","title":"Terrain Objects (.tobj)"},{"location":"tools-tutorials/addons/","text":"Installing Addons \u00b6 What are addons? \u00b6 In the Repository and Archives , you will find a category for addon parts . These are ready-to-install modifications for existing vehicles. Some are designed for specific vehicles (e.g. bumpers/exhausts) while others can fit on any vehicle (e.g. wheels/tires). This page serves as a general guide on the basics of installing various types of parts. The only requirement is a plain text editor, such as Notepad. ( Notepad++ is preferred) As always, read thoroughly and do not skip any steps. Most questions we get are simply caused by people not reading. ReadMe files \u00b6 Inside most addon zips, you'll find a ReadMe text file. These contain info you need to know in order to install the part correctly, such as managedmaterials lines. However, not all ReadMe files are the same. Some will provide a detailed step-by-step tutorial, while others may just give the bare minimum managedmaterials lines, or may not include a ReadMe at all. Vehicle body parts \u00b6 Most parts on the Repository are designed to fit specific vehicles. This includes but not limited to bumpers, exhausts, extra lights, etc. In this example we will be installing the Heavy Bumper for the Chevy K3500 . Setting up \u00b6 To begin, download & extract the part zip (in our case, CHeavyBumper.zip ) into a new folder. The folder should contain the mesh, dds textures, PDN paintkit, and a readme text file: Next, browse to Documents\\My Games\\Rigs of Rods\\mods and open ChevyK3500.zip : Find the .truck file you want to edit. For this example I'll be editing the Standard cab Single rear wheels (lift) version ( 1990K3500_STD_LIFT.truck ) Once you've figured out which truck you want the bumper on, drag the .truck file from the zip and into the folder containing the part you downloaded earlier: The truck file \u00b6 You will need to open two files, the truck file ( 1990K3500_STD_LIFT.truck ) and the readme file ( ReadMe.txt ). The readme file contains the lines you need to copy into the truck file. Managedmaterials \u00b6 Before we begin, some notes: Some parts may include a .material file inside the zip. If this is the case then you don't need to specify anything in managedmaterials , just move the .material file into the vehicle's zip along with the other files. If you are unable to find the material name (ReadMe doesn't specify it), download OgreMeshy and open the .mesh file. You should see a similar line in red: Can't assign material 'ICD_AEZ_Forged' to SubEntity of 'MeshEntity' because this Material does not exist in group 'InternalMeshGroup'. Have you forgotten to define it in a .material script? In the above example, ICD_AEZ_Forged would be the material name you set in managedmaterials . With that said, in the truck file, scroll down until you find the managedmaterials section. It will look like this: managedmaterials set_managedmaterials_options 1 BK3500 mesh_standard K3500-Tex.png K3500_S.png K3500_Frame mesh_standard Chassis_Bake.png Chassis_Bake_S.png Grille_Cheyenne mesh_standard Grille_Cheyenne.png Grille_Cheyenne_S.png K3500_SteeringWheel mesh_standard K3500_SteeringWheel.png - K3500_Badge mesh_standard K3500_Badge.png K3500_Badge.png K3500_Badge1 mesh_standard K3500_Badge_GMC.png K3500_Badge_GMC.png Mirror_3 mesh_standard Mirror_3.png Mirror_3.png Engine_Bay mesh_standard Engine_Bay.png Engine_Bay_S.png Engine_454 mesh_standard Engine_454.png Engine_454_S.png Grille_WT mesh_standard Grille_WT.png Grille_WT_S.png K3500_Exhaust mesh_standard Exhaust-Tex.png Exhaust_S.png Kodiak_Interior mesh_standard Kodiak_Interior.png Kodiak_Windows mesh_transparent Kodiak_Windows.png Kodiak_Windows_s.png Kodiak_Mirrors mesh_standard Mirrors-Tex.png Mirrors-Tex.png TOYOOC mesh_standard Toyo-OC.png K3500_Wheel mesh_standard K3500_Wheel.png K3500_Wheel_S.png BFGA mesh_standard BFGA.png Black.png DWindow mesh_standard Dwindow.png Dwindow_S.png For this bumper, you have the choice between clean or rusted, as shown in the readme: Black -------------------------------------------------------------------------------------------------------------------------- CHeavyBumper mesh_standard HeavyBumper.dds HeavyBumper_s.dds Rusted -------------------------------------------------------------------------------------------------------------------------- CHeavyBumper mesh_standard HeavyBumper_Rusted.dds HeavyBumper_Rusted_s.dds We will choose the clean version. Paste the line at the bottom of the managedmaterials section. Example: managedmaterials set_managedmaterials_options 1 BK3500 mesh_standard K3500-Tex.png K3500_S.png K3500_Frame mesh_standard Chassis_Bake.png Chassis_Bake_S.png Grille_Cheyenne mesh_standard Grille_Cheyenne.png Grille_Cheyenne_S.png K3500_SteeringWheel mesh_standard K3500_SteeringWheel.png - K3500_Badge mesh_standard K3500_Badge.png K3500_Badge.png K3500_Badge1 mesh_standard K3500_Badge_GMC.png K3500_Badge_GMC.png Mirror_3 mesh_standard Mirror_3.png Mirror_3.png Engine_Bay mesh_standard Engine_Bay.png Engine_Bay_S.png Engine_454 mesh_standard Engine_454.png Engine_454_S.png Grille_WT mesh_standard Grille_WT.png Grille_WT_S.png K3500_Exhaust mesh_standard Exhaust-Tex.png Exhaust_S.png Kodiak_Interior mesh_standard Kodiak_Interior.png Kodiak_Windows mesh_transparent Kodiak_Windows.png Kodiak_Windows_s.png Kodiak_Mirrors mesh_standard Mirrors-Tex.png Mirrors-Tex.png TOYOOC mesh_standard Toyo-OC.png K3500_Wheel mesh_standard K3500_Wheel.png K3500_Wheel_S.png BFGA mesh_standard BFGA.png Black.png DWindow mesh_standard Dwindow.png Dwindow_S.png CHeavyBumper mesh_standard HeavyBumper.dds HeavyBumper_s.dds For more info on managedmaterials , see: Managedmaterials Flexbodies/props \u00b6 Before we begin, a few notes: If the placement line does not have a forset line, this means it is placed under the props section. Just search props instead. If the readme doesn't contain a placement line, it usually means the part uses the same placement as the vehicle's other parts. In this case you would just copy one of the other placements and change the mesh name to the part. The readme will most likely specify this. Some parts (such as truck beds) may require you to edit the vehicle model (e.g. Bed is part of cab model) in order to install the part. To do this, see: Blender mesh editing With that out of the way, search ( CTRL+F ) for flexbodies . You will see this: flexbodies 39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, K3500_FBump.mesh forset 175-178, 76-79, 28-31 39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, K3500_Badge.mesh forset 149-160 Since the vehicle obviously already has a bumper, you will have to remove or comment ( ; ) the original bumper line. For example: ;39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, K3500_FBump.mesh ;forset 175-178, 76-79, 28-31 Now copy the placement line from the readme and paste it below the original bumper line, like so: flexbodies ;39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, K3500_FBump.mesh ;forset 175-178, 76-79, 28-31 39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, CHeavyBumper.mesh forset 175-178, 76-79, 28-31 39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, K3500_Badge.mesh forset 149-160 For more info on props and flexbodies, see: Props You can now save & close the truck file. Packaging \u00b6 All that's left to do is to move the truck file, textures, and mesh back into the vehicle zip. If the part includes multiple textures, you can only copy the files required by the managedmaterials section, in this case HeavyBumper.dds and HeavyBumper_s.dds . In-game \u00b6 Now it's time to test your newly installed part in-game. If you followed this tutorial exactly, you should now have a custom bumper on your K3500! Wheels and tires \u00b6 Keeping with the K3500, in this example we will be installing the 5 Spoke Wheel . Setting up \u00b6 To begin, download & extract the part zip (in our case, 5SpokeRim.zip ) into a new folder. The folder should contain the mesh, dds textures, PDN paintkit, and a readme text file: Next, browse to Documents\\My Games\\Rigs of Rods\\mods and open ChevyK3500.zip : Find the .truck file you want to edit. For this example I'll be editing the Standard cab Single rear wheels (lift) version ( 1990K3500_STD_LIFT.truck ) Once you've figured out which truck you want the wheels on, drag the .truck file from the zip and into the folder containing the part you downloaded earlier: The truck file \u00b6 You will need to open two files, the truck file ( 1990K3500_STD_LIFT.truck ) and the readme file ( ReadMe.txt ). The readme file contains the lines you need to copy into the truck file. Managedmaterials \u00b6 Before we begin, some notes: Some parts may include a .material file inside the zip. If this is the case then you don't need to specify anything in managedmaterials , just move the .material file into the vehicle's zip along with the other files. If you are unable to find the material name (ReadMe doesn't specify it), download OgreMeshy and open the .mesh file. You should see a similar line in red: Can't assign material 'ICD_AEZ_Forged' to SubEntity of 'MeshEntity' because this Material does not exist in group 'InternalMeshGroup'. Have you forgotten to define it in a .material script? In the above example, ICD_AEZ_Forged would be the material name you set in managedmaterials . With that said, in the truck file, scroll down until you find the managedmaterials section. It will look like this: managedmaterials set_managedmaterials_options 1 BK3500 mesh_standard K3500-Tex.png K3500_S.png K3500_Frame mesh_standard Chassis_Bake.png Chassis_Bake_S.png Grille_Cheyenne mesh_standard Grille_Cheyenne.png Grille_Cheyenne_S.png K3500_SteeringWheel mesh_standard K3500_SteeringWheel.png - K3500_Badge mesh_standard K3500_Badge.png K3500_Badge.png K3500_Badge1 mesh_standard K3500_Badge_GMC.png K3500_Badge_GMC.png Mirror_3 mesh_standard Mirror_3.png Mirror_3.png Engine_Bay mesh_standard Engine_Bay.png Engine_Bay_S.png Engine_454 mesh_standard Engine_454.png Engine_454_S.png Grille_WT mesh_standard Grille_WT.png Grille_WT_S.png K3500_Exhaust mesh_standard Exhaust-Tex.png Exhaust_S.png Kodiak_Interior mesh_standard Kodiak_Interior.png Kodiak_Windows mesh_transparent Kodiak_Windows.png Kodiak_Windows_s.png Kodiak_Mirrors mesh_standard Mirrors-Tex.png Mirrors-Tex.png TOYOOC mesh_standard Toyo-OC.png K3500_Wheel mesh_standard K3500_Wheel.png K3500_Wheel_S.png BFGA mesh_standard BFGA.png Black.png DWindow mesh_standard Dwindow.png Dwindow_S.png The readme for this wheel contains the following managedmaterials lines: 5SpokeRim mesh_standard 5SpokeRim.dds 5SpokeRim.dds MudTerrains mesh_standard MudTerrain.dds MudTerrain_s.dds Hub mesh_standard Hubed.dds - Paste the lines at the bottom of the managedmaterials section. Example: managedmaterials set_managedmaterials_options 1 BK3500 mesh_standard K3500-Tex.png K3500_S.png K3500_Frame mesh_standard Chassis_Bake.png Chassis_Bake_S.png Grille_Cheyenne mesh_standard Grille_Cheyenne.png Grille_Cheyenne_S.png K3500_SteeringWheel mesh_standard K3500_SteeringWheel.png - K3500_Badge mesh_standard K3500_Badge.png K3500_Badge.png K3500_Badge1 mesh_standard K3500_Badge_GMC.png K3500_Badge_GMC.png Mirror_3 mesh_standard Mirror_3.png Mirror_3.png Engine_Bay mesh_standard Engine_Bay.png Engine_Bay_S.png Engine_454 mesh_standard Engine_454.png Engine_454_S.png Grille_WT mesh_standard Grille_WT.png Grille_WT_S.png K3500_Exhaust mesh_standard Exhaust-Tex.png Exhaust_S.png Kodiak_Interior mesh_standard Kodiak_Interior.png Kodiak_Windows mesh_transparent Kodiak_Windows.png Kodiak_Windows_s.png Kodiak_Mirrors mesh_standard Mirrors-Tex.png Mirrors-Tex.png TOYOOC mesh_standard Toyo-OC.png K3500_Wheel mesh_standard K3500_Wheel.png K3500_Wheel_S.png BFGA mesh_standard BFGA.png Black.png DWindow mesh_standard Dwindow.png Dwindow_S.png 5SpokeRim mesh_standard 5SpokeRim.dds 5SpokeRim.dds MudTerrains mesh_standard MudTerrain.dds MudTerrain_s.dds Hub mesh_standard Hubed.dds - For more info on managedmaterials , see: Managedmaterials Meshwheels \u00b6 Before we continue, a few notes: Some wheels may include a tire with the wheel mesh, in this case you'll have to set the tire material to tracks/trans . The examples below already have it set. Some wheels may have the tire as a separate mesh, in this case see: Flexbody wheels If the wheel is inside out ingame, swap the l and r values before the mesh name. The second example below had to be swapped. With that said, scroll down until you find the meshwheels section. You will see the following: meshwheels ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, side, meshname material 0.43, 0.2785, 0.5, 12, 84, 86, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, r, ToyoOC_Wheel.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 85, 87, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, l, ToyoOC_Wheel.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 95, 96, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, r, ToyoOC_Wheel.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 103, 105, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, l, ToyoOC_Wheel.mesh tracks/trans Replace ToyoOC_Wheel.mesh with your wheel mesh, in this case 5SpokeRim.mesh : meshwheels ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, side, meshname material 0.43, 0.2785, 0.5, 12, 84, 86, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, l, 5SpokeRim.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 85, 87, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, r, 5SpokeRim.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 95, 96, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, l, 5SpokeRim.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 103, 105, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, r, 5SpokeRim.mesh tracks/trans For more info on meshwheels, see: Meshwheels You can now save & close the truck file. Packaging \u00b6 All that's left to do is to move the truck file, textures, and mesh back into the vehicle zip. If the part includes multiple textures, you can only copy the files required by the managedmaterials section. In-game \u00b6 Now it's time to test your newly installed wheel in-game. If you followed this tutorial exactly, you should now have new wheels on your K3500! Troubleshooting \u00b6 Part doesn't appear ingame \u00b6 If the part doesn't appear ingame, make sure you saved and copied the correct files into the zip and did all .truck file edits correctly. Some parts may require you to adjust the prop/flexbody placement. Press E twice to make sure it's not under the map. White/pink textures \u00b6 If the part appears as white or pink ingame, you set the wrong managedmaterials lines or didn't copy the .material file. If you need help finding the material name, see the second note in Managedmaterials Conclusion \u00b6 You should now know the basics of installing addon parts in Rigs of Rods. I hope this answers most questions people have. Please contact the staff if you'd like any more examples added.","title":"Installing addons"},{"location":"tools-tutorials/addons/#installing-addons","text":"","title":"Installing Addons"},{"location":"tools-tutorials/addons/#what-are-addons","text":"In the Repository and Archives , you will find a category for addon parts . These are ready-to-install modifications for existing vehicles. Some are designed for specific vehicles (e.g. bumpers/exhausts) while others can fit on any vehicle (e.g. wheels/tires). This page serves as a general guide on the basics of installing various types of parts. The only requirement is a plain text editor, such as Notepad. ( Notepad++ is preferred) As always, read thoroughly and do not skip any steps. Most questions we get are simply caused by people not reading.","title":"What are addons?"},{"location":"tools-tutorials/addons/#readme-files","text":"Inside most addon zips, you'll find a ReadMe text file. These contain info you need to know in order to install the part correctly, such as managedmaterials lines. However, not all ReadMe files are the same. Some will provide a detailed step-by-step tutorial, while others may just give the bare minimum managedmaterials lines, or may not include a ReadMe at all.","title":"ReadMe files"},{"location":"tools-tutorials/addons/#vehicle-body-parts","text":"Most parts on the Repository are designed to fit specific vehicles. This includes but not limited to bumpers, exhausts, extra lights, etc. In this example we will be installing the Heavy Bumper for the Chevy K3500 .","title":"Vehicle body parts"},{"location":"tools-tutorials/addons/#setting-up","text":"To begin, download & extract the part zip (in our case, CHeavyBumper.zip ) into a new folder. The folder should contain the mesh, dds textures, PDN paintkit, and a readme text file: Next, browse to Documents\\My Games\\Rigs of Rods\\mods and open ChevyK3500.zip : Find the .truck file you want to edit. For this example I'll be editing the Standard cab Single rear wheels (lift) version ( 1990K3500_STD_LIFT.truck ) Once you've figured out which truck you want the bumper on, drag the .truck file from the zip and into the folder containing the part you downloaded earlier:","title":"Setting up"},{"location":"tools-tutorials/addons/#the-truck-file","text":"You will need to open two files, the truck file ( 1990K3500_STD_LIFT.truck ) and the readme file ( ReadMe.txt ). The readme file contains the lines you need to copy into the truck file.","title":"The truck file"},{"location":"tools-tutorials/addons/#managedmaterials","text":"Before we begin, some notes: Some parts may include a .material file inside the zip. If this is the case then you don't need to specify anything in managedmaterials , just move the .material file into the vehicle's zip along with the other files. If you are unable to find the material name (ReadMe doesn't specify it), download OgreMeshy and open the .mesh file. You should see a similar line in red: Can't assign material 'ICD_AEZ_Forged' to SubEntity of 'MeshEntity' because this Material does not exist in group 'InternalMeshGroup'. Have you forgotten to define it in a .material script? In the above example, ICD_AEZ_Forged would be the material name you set in managedmaterials . With that said, in the truck file, scroll down until you find the managedmaterials section. It will look like this: managedmaterials set_managedmaterials_options 1 BK3500 mesh_standard K3500-Tex.png K3500_S.png K3500_Frame mesh_standard Chassis_Bake.png Chassis_Bake_S.png Grille_Cheyenne mesh_standard Grille_Cheyenne.png Grille_Cheyenne_S.png K3500_SteeringWheel mesh_standard K3500_SteeringWheel.png - K3500_Badge mesh_standard K3500_Badge.png K3500_Badge.png K3500_Badge1 mesh_standard K3500_Badge_GMC.png K3500_Badge_GMC.png Mirror_3 mesh_standard Mirror_3.png Mirror_3.png Engine_Bay mesh_standard Engine_Bay.png Engine_Bay_S.png Engine_454 mesh_standard Engine_454.png Engine_454_S.png Grille_WT mesh_standard Grille_WT.png Grille_WT_S.png K3500_Exhaust mesh_standard Exhaust-Tex.png Exhaust_S.png Kodiak_Interior mesh_standard Kodiak_Interior.png Kodiak_Windows mesh_transparent Kodiak_Windows.png Kodiak_Windows_s.png Kodiak_Mirrors mesh_standard Mirrors-Tex.png Mirrors-Tex.png TOYOOC mesh_standard Toyo-OC.png K3500_Wheel mesh_standard K3500_Wheel.png K3500_Wheel_S.png BFGA mesh_standard BFGA.png Black.png DWindow mesh_standard Dwindow.png Dwindow_S.png For this bumper, you have the choice between clean or rusted, as shown in the readme: Black -------------------------------------------------------------------------------------------------------------------------- CHeavyBumper mesh_standard HeavyBumper.dds HeavyBumper_s.dds Rusted -------------------------------------------------------------------------------------------------------------------------- CHeavyBumper mesh_standard HeavyBumper_Rusted.dds HeavyBumper_Rusted_s.dds We will choose the clean version. Paste the line at the bottom of the managedmaterials section. Example: managedmaterials set_managedmaterials_options 1 BK3500 mesh_standard K3500-Tex.png K3500_S.png K3500_Frame mesh_standard Chassis_Bake.png Chassis_Bake_S.png Grille_Cheyenne mesh_standard Grille_Cheyenne.png Grille_Cheyenne_S.png K3500_SteeringWheel mesh_standard K3500_SteeringWheel.png - K3500_Badge mesh_standard K3500_Badge.png K3500_Badge.png K3500_Badge1 mesh_standard K3500_Badge_GMC.png K3500_Badge_GMC.png Mirror_3 mesh_standard Mirror_3.png Mirror_3.png Engine_Bay mesh_standard Engine_Bay.png Engine_Bay_S.png Engine_454 mesh_standard Engine_454.png Engine_454_S.png Grille_WT mesh_standard Grille_WT.png Grille_WT_S.png K3500_Exhaust mesh_standard Exhaust-Tex.png Exhaust_S.png Kodiak_Interior mesh_standard Kodiak_Interior.png Kodiak_Windows mesh_transparent Kodiak_Windows.png Kodiak_Windows_s.png Kodiak_Mirrors mesh_standard Mirrors-Tex.png Mirrors-Tex.png TOYOOC mesh_standard Toyo-OC.png K3500_Wheel mesh_standard K3500_Wheel.png K3500_Wheel_S.png BFGA mesh_standard BFGA.png Black.png DWindow mesh_standard Dwindow.png Dwindow_S.png CHeavyBumper mesh_standard HeavyBumper.dds HeavyBumper_s.dds For more info on managedmaterials , see: Managedmaterials","title":"Managedmaterials"},{"location":"tools-tutorials/addons/#flexbodiesprops","text":"Before we begin, a few notes: If the placement line does not have a forset line, this means it is placed under the props section. Just search props instead. If the readme doesn't contain a placement line, it usually means the part uses the same placement as the vehicle's other parts. In this case you would just copy one of the other placements and change the mesh name to the part. The readme will most likely specify this. Some parts (such as truck beds) may require you to edit the vehicle model (e.g. Bed is part of cab model) in order to install the part. To do this, see: Blender mesh editing With that out of the way, search ( CTRL+F ) for flexbodies . You will see this: flexbodies 39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, K3500_FBump.mesh forset 175-178, 76-79, 28-31 39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, K3500_Badge.mesh forset 149-160 Since the vehicle obviously already has a bumper, you will have to remove or comment ( ; ) the original bumper line. For example: ;39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, K3500_FBump.mesh ;forset 175-178, 76-79, 28-31 Now copy the placement line from the readme and paste it below the original bumper line, like so: flexbodies ;39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, K3500_FBump.mesh ;forset 175-178, 76-79, 28-31 39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, CHeavyBumper.mesh forset 175-178, 76-79, 28-31 39, 62, 34, 0.50, 0.32, -0.5, 0, 180, 180, K3500_Badge.mesh forset 149-160 For more info on props and flexbodies, see: Props You can now save & close the truck file.","title":"Flexbodies/props"},{"location":"tools-tutorials/addons/#packaging","text":"All that's left to do is to move the truck file, textures, and mesh back into the vehicle zip. If the part includes multiple textures, you can only copy the files required by the managedmaterials section, in this case HeavyBumper.dds and HeavyBumper_s.dds .","title":"Packaging"},{"location":"tools-tutorials/addons/#in-game","text":"Now it's time to test your newly installed part in-game. If you followed this tutorial exactly, you should now have a custom bumper on your K3500!","title":"In-game"},{"location":"tools-tutorials/addons/#wheels-and-tires","text":"Keeping with the K3500, in this example we will be installing the 5 Spoke Wheel .","title":"Wheels and tires"},{"location":"tools-tutorials/addons/#setting-up_1","text":"To begin, download & extract the part zip (in our case, 5SpokeRim.zip ) into a new folder. The folder should contain the mesh, dds textures, PDN paintkit, and a readme text file: Next, browse to Documents\\My Games\\Rigs of Rods\\mods and open ChevyK3500.zip : Find the .truck file you want to edit. For this example I'll be editing the Standard cab Single rear wheels (lift) version ( 1990K3500_STD_LIFT.truck ) Once you've figured out which truck you want the wheels on, drag the .truck file from the zip and into the folder containing the part you downloaded earlier:","title":"Setting up"},{"location":"tools-tutorials/addons/#the-truck-file_1","text":"You will need to open two files, the truck file ( 1990K3500_STD_LIFT.truck ) and the readme file ( ReadMe.txt ). The readme file contains the lines you need to copy into the truck file.","title":"The truck file"},{"location":"tools-tutorials/addons/#managedmaterials_1","text":"Before we begin, some notes: Some parts may include a .material file inside the zip. If this is the case then you don't need to specify anything in managedmaterials , just move the .material file into the vehicle's zip along with the other files. If you are unable to find the material name (ReadMe doesn't specify it), download OgreMeshy and open the .mesh file. You should see a similar line in red: Can't assign material 'ICD_AEZ_Forged' to SubEntity of 'MeshEntity' because this Material does not exist in group 'InternalMeshGroup'. Have you forgotten to define it in a .material script? In the above example, ICD_AEZ_Forged would be the material name you set in managedmaterials . With that said, in the truck file, scroll down until you find the managedmaterials section. It will look like this: managedmaterials set_managedmaterials_options 1 BK3500 mesh_standard K3500-Tex.png K3500_S.png K3500_Frame mesh_standard Chassis_Bake.png Chassis_Bake_S.png Grille_Cheyenne mesh_standard Grille_Cheyenne.png Grille_Cheyenne_S.png K3500_SteeringWheel mesh_standard K3500_SteeringWheel.png - K3500_Badge mesh_standard K3500_Badge.png K3500_Badge.png K3500_Badge1 mesh_standard K3500_Badge_GMC.png K3500_Badge_GMC.png Mirror_3 mesh_standard Mirror_3.png Mirror_3.png Engine_Bay mesh_standard Engine_Bay.png Engine_Bay_S.png Engine_454 mesh_standard Engine_454.png Engine_454_S.png Grille_WT mesh_standard Grille_WT.png Grille_WT_S.png K3500_Exhaust mesh_standard Exhaust-Tex.png Exhaust_S.png Kodiak_Interior mesh_standard Kodiak_Interior.png Kodiak_Windows mesh_transparent Kodiak_Windows.png Kodiak_Windows_s.png Kodiak_Mirrors mesh_standard Mirrors-Tex.png Mirrors-Tex.png TOYOOC mesh_standard Toyo-OC.png K3500_Wheel mesh_standard K3500_Wheel.png K3500_Wheel_S.png BFGA mesh_standard BFGA.png Black.png DWindow mesh_standard Dwindow.png Dwindow_S.png The readme for this wheel contains the following managedmaterials lines: 5SpokeRim mesh_standard 5SpokeRim.dds 5SpokeRim.dds MudTerrains mesh_standard MudTerrain.dds MudTerrain_s.dds Hub mesh_standard Hubed.dds - Paste the lines at the bottom of the managedmaterials section. Example: managedmaterials set_managedmaterials_options 1 BK3500 mesh_standard K3500-Tex.png K3500_S.png K3500_Frame mesh_standard Chassis_Bake.png Chassis_Bake_S.png Grille_Cheyenne mesh_standard Grille_Cheyenne.png Grille_Cheyenne_S.png K3500_SteeringWheel mesh_standard K3500_SteeringWheel.png - K3500_Badge mesh_standard K3500_Badge.png K3500_Badge.png K3500_Badge1 mesh_standard K3500_Badge_GMC.png K3500_Badge_GMC.png Mirror_3 mesh_standard Mirror_3.png Mirror_3.png Engine_Bay mesh_standard Engine_Bay.png Engine_Bay_S.png Engine_454 mesh_standard Engine_454.png Engine_454_S.png Grille_WT mesh_standard Grille_WT.png Grille_WT_S.png K3500_Exhaust mesh_standard Exhaust-Tex.png Exhaust_S.png Kodiak_Interior mesh_standard Kodiak_Interior.png Kodiak_Windows mesh_transparent Kodiak_Windows.png Kodiak_Windows_s.png Kodiak_Mirrors mesh_standard Mirrors-Tex.png Mirrors-Tex.png TOYOOC mesh_standard Toyo-OC.png K3500_Wheel mesh_standard K3500_Wheel.png K3500_Wheel_S.png BFGA mesh_standard BFGA.png Black.png DWindow mesh_standard Dwindow.png Dwindow_S.png 5SpokeRim mesh_standard 5SpokeRim.dds 5SpokeRim.dds MudTerrains mesh_standard MudTerrain.dds MudTerrain_s.dds Hub mesh_standard Hubed.dds - For more info on managedmaterials , see: Managedmaterials","title":"Managedmaterials"},{"location":"tools-tutorials/addons/#meshwheels","text":"Before we continue, a few notes: Some wheels may include a tire with the wheel mesh, in this case you'll have to set the tire material to tracks/trans . The examples below already have it set. Some wheels may have the tire as a separate mesh, in this case see: Flexbody wheels If the wheel is inside out ingame, swap the l and r values before the mesh name. The second example below had to be swapped. With that said, scroll down until you find the meshwheels section. You will see the following: meshwheels ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, side, meshname material 0.43, 0.2785, 0.5, 12, 84, 86, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, r, ToyoOC_Wheel.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 85, 87, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, l, ToyoOC_Wheel.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 95, 96, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, r, ToyoOC_Wheel.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 103, 105, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, l, ToyoOC_Wheel.mesh tracks/trans Replace ToyoOC_Wheel.mesh with your wheel mesh, in this case 5SpokeRim.mesh : meshwheels ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, side, meshname material 0.43, 0.2785, 0.5, 12, 84, 86, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, l, 5SpokeRim.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 85, 87, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, r, 5SpokeRim.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 95, 96, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, l, 5SpokeRim.mesh tracks/trans 0.43, 0.2785, 0.5, 12, 103, 105, 9999, 1, 1, 6, 160.0, 190000.0, 1200.0, r, 5SpokeRim.mesh tracks/trans For more info on meshwheels, see: Meshwheels You can now save & close the truck file.","title":"Meshwheels"},{"location":"tools-tutorials/addons/#packaging_1","text":"All that's left to do is to move the truck file, textures, and mesh back into the vehicle zip. If the part includes multiple textures, you can only copy the files required by the managedmaterials section.","title":"Packaging"},{"location":"tools-tutorials/addons/#in-game_1","text":"Now it's time to test your newly installed wheel in-game. If you followed this tutorial exactly, you should now have new wheels on your K3500!","title":"In-game"},{"location":"tools-tutorials/addons/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"tools-tutorials/addons/#part-doesnt-appear-ingame","text":"If the part doesn't appear ingame, make sure you saved and copied the correct files into the zip and did all .truck file edits correctly. Some parts may require you to adjust the prop/flexbody placement. Press E twice to make sure it's not under the map.","title":"Part doesn't appear ingame"},{"location":"tools-tutorials/addons/#whitepink-textures","text":"If the part appears as white or pink ingame, you set the wrong managedmaterials lines or didn't copy the .material file. If you need help finding the material name, see the second note in Managedmaterials","title":"White/pink textures"},{"location":"tools-tutorials/addons/#conclusion","text":"You should now know the basics of installing addon parts in Rigs of Rods. I hope this answers most questions people have. Please contact the staff if you'd like any more examples added.","title":"Conclusion"},{"location":"tools-tutorials/blender-beginner/","text":"Blender for beginners \u00b6 Introduction \u00b6 This tutorial is designed to provide a simple introduction to blender. This will not be covering any advance topics, it's sole purpose is to provide a small amount of knowledge that you can use to proverbially get your foot in the door of using blender. I am not going to cover how to install blender as i going to assume you are capable of doing that by yourself. This tutorial is designed for Blender 2.65a It may work with newer or older variants, i don't know what the future holds or when you are reading this. So a small word of warning; If you are using blender 25.45b then you are probably looking at something that is outdated. Useful links \u00b6 Blender homepage Download Blender A different Blender tutorial (This goes into much more depth and may be harder to understand, but covers almost everything you could ever want to know) This is Blender \u00b6 This is what you should see This is the first thing you should see when you load up blender. Warning Do not panic, Its not all that bad. I promise The first thing that i want you to do is click on the grey area that is covered in a grid, This should remove the big box in front of you. This is what you will be working with So first things first, you should now be looking at a grey box. It doesn't look like much yet but believe me it will be a work of art once you have finished with it [/sarcasm] Currently you are in object mode, this is indicated by the box with object mode written on it at the bottom of the viewing window (the bit your cube is displayed in) You can select objects by right clicking on them, such as the cube. When you right click on something you will see an orange border around it, this indicates it is the object that is currently selected. There is a little diagram at the bottom left of the viewing window which you can look at if you forget or can not tell which way you are looking. The arrows point into the positives of each axis (as opposed to the negative/minus numbers) Note: You can rotate your view by holding down your mouse wheel and moving your mouse. You can pan around by holding down shift + your mouse wheel and moving your mouse You can also scroll by scrolling up and down on your mouse wheel That is the basics of navigating your object. You can move your cube along thee different axis. These are red, blue and green. If you click and hold on one of the arrows you can move the object in that direction around your screen, you can also right click and hold anywhere when you have a selected item to drag it around your screen, but i advise that you stick to using the three arrows as it is much easier to use because it is much easier to gauge where you are actually moving the object. There are three arrows that have a colour individual to each one: Blue = z axis Green = Y axis Red = X axis Changing to edit mode To modify your cube you will need to switch to edit mode. This is because in object mode you can modify objects (individual 3d models) , whereas in edit mode you can edit the object itself. To do this: Make sure you have your cube selected with an orange glow around it, remember this is done by right clicking the cube. Then once you have done that you have to go to the bar at the bottom of the viewing window and click where it says \"object mode\" a list will then pop up. From that list select \"edit mode\" and you will then be in edit mode. Note: Which mode to use? Object Mode is Moving or adjusting objects models Edit Mode is Changing the actual model If you have done this correctly then your cube should now be tinted orange, this is because by default all of the faces (sides), edges (lines) and vertices (angles/joints) have been selected. This is also similar to when you selected the object earlier. if you haven't already noticed the theme, anything that has been selected will be orange in some way or form. Editing your cube \u00b6 You've made it into edit mode, this is where the work actually begins :D Now that you are in edit mode it is time to edit your cube. First you may notice that your object is a little low on polygons, currently you have a grand total of 6 polygons and nothing awesome was ever created with just 6 polygons. So to fix this we need to move our cursor to the left hand pane of the screen labelled \"mesh tools\". In this pane there are several functions that you can use to modify your model, The options shown will depend on which mode you currently have blender in (remember edit and object mode). We are going to use the tool called subdivide, all you have to do is click it and you will find your cube now has 24 polygons. Now to be completely honest with you that is still quite low, but for now it will do. Note: It is always best to try and make sure you keep all of your faces 4 sided, if you don't subdividing may cause you issues. This doesn't mean you cant use 3 sided faces if you have to but try and keep them to a minimum. Now that you have subdivided your cube it is time to make it into something. For the purpose of this tutorial we are going to make a house (essentially a 3d pentagon) Select these 3 vertices So the first part of turning this run of the mill cube into a house is to select the three top central vertices (points/angles etc... From now on i am only going to refer to these as vertices) you can do this by holding shift while right clicking on them. Once again note how they have turned Orange, have a guess why? The vertices may appear to have moved very slightly when you selected them, don't worry about this. It is one of the quirks of the program/ your pc screen/ your eyes that you will have to get used to. Now you are going to use the blue (z axis) and drag the vertices up into a roof like shape, you will now see that the house is taking shape and although it may look like the roof has triangles in it you will find that it does not (which is good). Best house evar!!1!1!!!!1!!! You will now have something that looks vaguely reminiscent of this house shaped model. It doesn't have to be identical, as long as you are doing the same things you are learning the same things. But believe it or not most 3d house models are slightly more complex than this, so more work may be needed. Unless you are creating models for a scene where you never get more than 100 meters within said model if that is the case then job well done, get yourself a cup of tea and a well deserved chocolate digestive. More detail \u00b6 In this section we are going to add more detail to the building, please note that while more detail makes something look nicer it can also decrease the in game fps. So when you create a \"to scale 1:1 replica of the uss enterprise\" be warned that it may lag a little in blender its self, never mind rigs of rods or whatever else you wish to add this into. The polygon count is over 9000! (well, 96 is close enough) We will want to subdivide the object again (go back up if you have forgotten how). Once you have done that we will add a bay window to your house. Select these vertices To do this we are going to move the highlighted vertices in the image to the left First you should highlight said vertices (shift+right click). Then you are going to use the red arrow to drag them outwards, this will make the house shape much more appealing. Next we are going to add a door, well it kind of looks like one Now we are going to make something that kind of looks like a door. I wouldn't worry to much as to what it looks like as long as you are learning the techniques that's all that matters for now. First we are going to select these six vertices, these are where the edges of the door will be, then we are going to use the extrude region tool (its just above subdivide) when you click on that you will then be able to move that area backwards and forwards. I would suggest that you indent it slightly so it looks a bit like a door. Notice the lip at the bottom of the door, it is evil Notice the lip at the bottom of the door, while it is fine to have it there in blender, it may cause issues when you put it into a game such as rigs of rods. This is because in most 3d game engines faces (side of model/object) only have 1 side, this means you can only see the face from 1 side. On a 3d model this inst an issue because you have multiple faces meaning the backface (side of face that cant be seen) is hidden by other faces. But in the case of this 2d lip it will not be. In rigs of rods if you do this on the collision mesh then you may experience collision issues with the building if a car crashes into the door. So lets delete it, blender offers a multitude of delete options which are all useful for different things In this case we want to delete the edge which will in turn delete the face which will get rid of the problem. So first you need to select the two vertices of the lip, the two that need selecting are the ones at each end of the lip. Then you need to press the delete key on your keyboard. This will bring up a menu with several options. You do not want to delete the vertices because this will also delete a lot of the rest of the model. You do not want to delete the face because there is no face selected You also do not want to delete all of the above or any combination of them All you want to delete is the the edge. so you click on that. Next time you try and delete something it will put the mouse cursor over the edge option for you, this is to try and allow you to work faster if you are trying to delete multiple similar things in a repetitive style. [ edit ] Texturing (UV mapping) For this i am going to keep it simple so we are ditching the house. You may want to save it first. Warning Always keep backups of files, you have no ideas how many times i have seen great projects die because of this. This also doesn't just apply to rigs of rods, this applies to everything in life. A good method if you have the space is to create a main folder for the whole project, then for each save you make you create a new folder inside that one named after the time and date the file was saved. This means you have lots of backups should anything go wrong For this section of the tutorial we are going to use a plain old cube, mainly because it only has 6 sides making it easy to work with. This is some next gen cry-engine graphical awesomeness we have here So you are back at square one, this is a cube. Please make sure it has 6 faces and 8 vertices , if it doesn't then you have already done something wrong (for the intent of this tutorial). There always has to be one indie screen shot First switch into edit mode (you can use \"tab\" if your a hotkey ninja) Then select the button that is on the bar at the bottom of the viewing window that has a cube with a line on it. When you highlight over it you will see a message saying edge select. If you still cant find it just look to the right of where it says \"global\" Think back to making a net of something in school Now you have to mark the edges. To do this you need to select the edges of your model that will allow you to unwrap it as 1 whole layer. Similar to if you are peeling an orange in 1 continuous layer (i cant be the only one who tries to do that?) So all you have to do is hold down ctrl while clicking the edges you wish to select. You want the seems to unfold to make a T shape. **WORK IN PROGRESS - The rest of the tutorial is glued from an older one, for blender 2.49 or previous.** Skins in Rigs of Rods are made by draping the beams in triangles known as submeshes. Textures are cut up and placed by coordinate and percentage. This is a lot of work by hand, and luckily Blender does it all for you. [ edit ] Applying Texture Enter and select your truck. Press f to enter UV Face Select . Enter UV/Image Editor by clicking the Windows Type button, see on the right. Click Image > Open Image and select your trucks texture. Because there is no real texture for the tutorial truck, just pick any image. I am using a picture of my cat, because I can. Select triangles by right clicking them, holding SHIFT to select multiple triangles. You can now adjust the texture placement. In the UV/Image Editor, use left click to adjust the position of the triangle on the texture. Right click a corner of the triangle and use the left click to adjust its position. This may be time consuming and may require some trial-and-error. Take your time, because you're almost done! From here, make a Material File for your truck and set it in your globals... export your truck, and you're done! EDIT: in blender 2.46 there isn't a \"UV face edit\", go to edit mode and press \"U\" [ edit ] Exporting in Blender You must export to an already existing truck file. Blender will NOT make the truck file for you when you hit 'Export'. Make sure the truck file you're exporting to has the word 'submesh' right above the word 'end'. Now, when in Blender, go into object mode. Right-click on the submesh so there is a pink outline around it and you shouldn't see very many beams if you are actually clicked on the submesh. and in the left-hand bottom corner make sure it says submesh after ME and OB (there might be some letters and numbers before the word submesh. this is ok) Also if you try to export and it says \"wings section not found, unable to export wings\" just click on the boxes in the bottom left-hand corner that say OB:(some stuff here) ME:(some stuff here and rename it submesh on BOTH ME and OB and it will now work. After that if you have the blender ror importer and exporter installed.(which I'm sure you do if you got the car into blender in the first place) click file-export-RoR exporter, then find the truck file you are exporting to and click export. Blender should just pause for a second and then return to normal activity. and when you go to your truck file you should see all the submesh stuff in the truck file. Also Blender will automatically make a copy of your original truck file from before you exported it. open that using notepad and copy the node and beam sections into your new truck file that has the submesh because blender will have messed those up. but by doing that it will put it back to normal.","title":"Blender beginner"},{"location":"tools-tutorials/blender-beginner/#blender-for-beginners","text":"","title":"Blender for beginners"},{"location":"tools-tutorials/blender-beginner/#introduction","text":"This tutorial is designed to provide a simple introduction to blender. This will not be covering any advance topics, it's sole purpose is to provide a small amount of knowledge that you can use to proverbially get your foot in the door of using blender. I am not going to cover how to install blender as i going to assume you are capable of doing that by yourself. This tutorial is designed for Blender 2.65a It may work with newer or older variants, i don't know what the future holds or when you are reading this. So a small word of warning; If you are using blender 25.45b then you are probably looking at something that is outdated.","title":"Introduction"},{"location":"tools-tutorials/blender-beginner/#useful-links","text":"Blender homepage Download Blender A different Blender tutorial (This goes into much more depth and may be harder to understand, but covers almost everything you could ever want to know)","title":"Useful links"},{"location":"tools-tutorials/blender-beginner/#this-is-blender","text":"This is what you should see This is the first thing you should see when you load up blender. Warning Do not panic, Its not all that bad. I promise The first thing that i want you to do is click on the grey area that is covered in a grid, This should remove the big box in front of you. This is what you will be working with So first things first, you should now be looking at a grey box. It doesn't look like much yet but believe me it will be a work of art once you have finished with it [/sarcasm] Currently you are in object mode, this is indicated by the box with object mode written on it at the bottom of the viewing window (the bit your cube is displayed in) You can select objects by right clicking on them, such as the cube. When you right click on something you will see an orange border around it, this indicates it is the object that is currently selected. There is a little diagram at the bottom left of the viewing window which you can look at if you forget or can not tell which way you are looking. The arrows point into the positives of each axis (as opposed to the negative/minus numbers) Note: You can rotate your view by holding down your mouse wheel and moving your mouse. You can pan around by holding down shift + your mouse wheel and moving your mouse You can also scroll by scrolling up and down on your mouse wheel That is the basics of navigating your object. You can move your cube along thee different axis. These are red, blue and green. If you click and hold on one of the arrows you can move the object in that direction around your screen, you can also right click and hold anywhere when you have a selected item to drag it around your screen, but i advise that you stick to using the three arrows as it is much easier to use because it is much easier to gauge where you are actually moving the object. There are three arrows that have a colour individual to each one: Blue = z axis Green = Y axis Red = X axis Changing to edit mode To modify your cube you will need to switch to edit mode. This is because in object mode you can modify objects (individual 3d models) , whereas in edit mode you can edit the object itself. To do this: Make sure you have your cube selected with an orange glow around it, remember this is done by right clicking the cube. Then once you have done that you have to go to the bar at the bottom of the viewing window and click where it says \"object mode\" a list will then pop up. From that list select \"edit mode\" and you will then be in edit mode. Note: Which mode to use? Object Mode is Moving or adjusting objects models Edit Mode is Changing the actual model If you have done this correctly then your cube should now be tinted orange, this is because by default all of the faces (sides), edges (lines) and vertices (angles/joints) have been selected. This is also similar to when you selected the object earlier. if you haven't already noticed the theme, anything that has been selected will be orange in some way or form.","title":"This is Blender"},{"location":"tools-tutorials/blender-beginner/#editing-your-cube","text":"You've made it into edit mode, this is where the work actually begins :D Now that you are in edit mode it is time to edit your cube. First you may notice that your object is a little low on polygons, currently you have a grand total of 6 polygons and nothing awesome was ever created with just 6 polygons. So to fix this we need to move our cursor to the left hand pane of the screen labelled \"mesh tools\". In this pane there are several functions that you can use to modify your model, The options shown will depend on which mode you currently have blender in (remember edit and object mode). We are going to use the tool called subdivide, all you have to do is click it and you will find your cube now has 24 polygons. Now to be completely honest with you that is still quite low, but for now it will do. Note: It is always best to try and make sure you keep all of your faces 4 sided, if you don't subdividing may cause you issues. This doesn't mean you cant use 3 sided faces if you have to but try and keep them to a minimum. Now that you have subdivided your cube it is time to make it into something. For the purpose of this tutorial we are going to make a house (essentially a 3d pentagon) Select these 3 vertices So the first part of turning this run of the mill cube into a house is to select the three top central vertices (points/angles etc... From now on i am only going to refer to these as vertices) you can do this by holding shift while right clicking on them. Once again note how they have turned Orange, have a guess why? The vertices may appear to have moved very slightly when you selected them, don't worry about this. It is one of the quirks of the program/ your pc screen/ your eyes that you will have to get used to. Now you are going to use the blue (z axis) and drag the vertices up into a roof like shape, you will now see that the house is taking shape and although it may look like the roof has triangles in it you will find that it does not (which is good). Best house evar!!1!1!!!!1!!! You will now have something that looks vaguely reminiscent of this house shaped model. It doesn't have to be identical, as long as you are doing the same things you are learning the same things. But believe it or not most 3d house models are slightly more complex than this, so more work may be needed. Unless you are creating models for a scene where you never get more than 100 meters within said model if that is the case then job well done, get yourself a cup of tea and a well deserved chocolate digestive.","title":"Editing your cube"},{"location":"tools-tutorials/blender-beginner/#more-detail","text":"In this section we are going to add more detail to the building, please note that while more detail makes something look nicer it can also decrease the in game fps. So when you create a \"to scale 1:1 replica of the uss enterprise\" be warned that it may lag a little in blender its self, never mind rigs of rods or whatever else you wish to add this into. The polygon count is over 9000! (well, 96 is close enough) We will want to subdivide the object again (go back up if you have forgotten how). Once you have done that we will add a bay window to your house. Select these vertices To do this we are going to move the highlighted vertices in the image to the left First you should highlight said vertices (shift+right click). Then you are going to use the red arrow to drag them outwards, this will make the house shape much more appealing. Next we are going to add a door, well it kind of looks like one Now we are going to make something that kind of looks like a door. I wouldn't worry to much as to what it looks like as long as you are learning the techniques that's all that matters for now. First we are going to select these six vertices, these are where the edges of the door will be, then we are going to use the extrude region tool (its just above subdivide) when you click on that you will then be able to move that area backwards and forwards. I would suggest that you indent it slightly so it looks a bit like a door. Notice the lip at the bottom of the door, it is evil Notice the lip at the bottom of the door, while it is fine to have it there in blender, it may cause issues when you put it into a game such as rigs of rods. This is because in most 3d game engines faces (side of model/object) only have 1 side, this means you can only see the face from 1 side. On a 3d model this inst an issue because you have multiple faces meaning the backface (side of face that cant be seen) is hidden by other faces. But in the case of this 2d lip it will not be. In rigs of rods if you do this on the collision mesh then you may experience collision issues with the building if a car crashes into the door. So lets delete it, blender offers a multitude of delete options which are all useful for different things In this case we want to delete the edge which will in turn delete the face which will get rid of the problem. So first you need to select the two vertices of the lip, the two that need selecting are the ones at each end of the lip. Then you need to press the delete key on your keyboard. This will bring up a menu with several options. You do not want to delete the vertices because this will also delete a lot of the rest of the model. You do not want to delete the face because there is no face selected You also do not want to delete all of the above or any combination of them All you want to delete is the the edge. so you click on that. Next time you try and delete something it will put the mouse cursor over the edge option for you, this is to try and allow you to work faster if you are trying to delete multiple similar things in a repetitive style.","title":"More detail"},{"location":"tools-tutorials/blender-mesh-editing/","text":"Blender mesh editing \u00b6 Warning This tutorial assumes you have some basic knowledge on using Blender (Navigating UI, basic object editing, etc). There are plenty of tutorials available on YouTube or many other websites. Introduction \u00b6 Rigs of Rods is a game that is very easy to modify. This tutorial will help you get started on editing meshes using Blender, from installing the add-ons to exporting. Please read everything carefully and do not skip any steps. If you've created a model yourself and just want to export it to RoR, install the add-ons and skip to the Exporting section. Required software \u00b6 Rigs of Rods installed to the default location ( C:\\Program Files\\Rigs of Rods ) Blender (2.79b) Ogre Import/Export add-ons (Optional) Notepad++ (Optional) OgreMeshy A brain, some basic computer knowledge, and some patience Blender version warning \u00b6 The latest version of Blender (2.80) is currently not supported as the plugins have not been updated for it yet. You can download 2.79b here . If you are unsure which file to download, just select blender-2.79b-windows64.zip and extract it into a new folder, then run blender.exe . Getting started \u00b6 If you're following this tutorial, chances are you probably already have a mesh you want to edit. In this tutorial I'll be editing Box5Diesel's Ram EXT. Open the .zip file for the vehicle, and extract the correct .mesh file(s) and the textures ( .dds , .png , etc) into a folder you can easily access: Next, open a new File Explorer window and browse to C:\\Program Files\\Rigs of Rods , this is where OgreXMLConverter.exe is located. Simply drag and drop the mesh onto OgreXMLConverter.exe to get a .mesh.xml : You should now have a .mesh.xml file in the same folder: We're ready to launch Blender now. Installing Blender add-ons \u00b6 First, download the latest Ogre Import/Export add-ons from GitHub ( RoR_ImportExport_*.zip ) and place it into any folder. Do not extract. Now open Blender. Click File -> User Preferences : Click Add-ons -> Install from File : Select the RoR_ImportExport_*.zip file you downloaded earlier. Type rigs into the search bar and both add-ons should appear: Once both add-ons are enabled by clicking the checkbox, select Save User Settings : You can now close the User Preferences window. Importing the mesh \u00b6 Select File -> Import -> Ogre3D (.mesh.xml) : Find & select the .mesh file. You should now see something similar to this: Press the Z key twice to get out of that shading mode. You should now see this: Warning The importer will automatically separate meshes if the .mesh.xml contains multiple materials. The object names match the material name. If there's many objects with the same material name, you should be safe to join them by pressing CTRL+J : It should look similar to this now: Fixing object shading \u00b6 You'll probably notice that your mesh is very blocky and/or has lots of shading errors. To fix this: On the left menu (Press T if it's not already open) select Smooth . You need to be in Object Mode ( TAB key) for this to appear: Now press the TAB key again to go into Edit Mode: Select Remove Doubles from the T menu: Now head over to the tool menu on the right and find the blue wrench icon -> Add Modifier -> Edge Split : The Edge Split Modifier should now be selected. The default Split Angle (30) should be fine in most cases. Do not apply the modifier. The exporter will do this for you. Note: For some models just applying edge split won't be enough, further work may be required (such as marking faces sharp). Applying the texture \u00b6 Now we can apply the texture. Press the TAB key to go into Edit Mode if you're not in it already and click the circle icon on the bottom left -> UV/Image Editor : The UV/Image Editor should now be open: Select Open from the bottom bar: Find & select your texture file: The texture file should now be open in the UV/Image Editor . Now go to the top right and find the little plus icon, or press N to open it: Open the Shading menu and click Textured Solid : It should now look similar to this: Editing the mesh \u00b6 You're now ready to start editing the mesh. For this tutorial, I removed the exhaust stacks from the bed: Setting the object name \u00b6 In the outliner (object list), double-click the object name to rename it. This will be the name of your mesh when exporting. In this example, I'll name it BoxDodgeCummins-NoStacks . Adding a material \u00b6 Now select the circle icon next to the triangle icon and click New : The easiest way to find the material name is by opening the .mesh.xml file in a text editor and search \"material\": Exporting \u00b6 Before we export, if you moved the object while editing it you will need to apply Location/Rotation/Scale by pressing CTRL+A otherwise it will be placed incorrectly in-game: Select your mesh then click File -> Export -> Ogre3D (.scene and .mesh.xml) : Change your export settings to match the screenshot (all other settings can be left to their defaults): You should now have a new .mesh.xml and .mesh file in your folder: The exporter will automatically convert the .mesh.xml to .mesh as long RoR is installed to the default location. If you want to preview your exported model, you can use OgreMeshy to view it: (You can make a .material file if you want it to be textured in OgreMeshy) Testing in-game \u00b6 Now just edit the vehicle's .truck file to match the name of your new mesh and drag the new mesh file back into the .zip and test in-game: 17,14,2, 0.73, 0.5, 0.07, 0, 0, 0, BoxDodgeCummins-NoStacks.mesh forset 7, 12, 40, 41, 44-66, 69-87, 111 Congratulations! Troubleshooting \u00b6 [Error 2] No such file or directory \u00b6 You forgot to convert the .mesh to .mesh.xml , as described in the Getting started section. Warning On Linux there is currently a bug preventing .mesh.xml imports in uppercase paths (e.g. /home/user/Downloads/rorimportfiles . You will have to place the .mesh and .mesh.xml files into a different folder without uppercases (e.g. /home/user/rorimportfiles ) Mesh is flipped \u00b6 Change the \"swap axis\" option in the export settings. Mesh appears white/pink \u00b6 You did not assign the correct material. Make sure it matches. Other errors \u00b6 First, just Google the issue. If you can't find a solution then you can create a thread on the content creation forum .","title":"Blender mesh editing"},{"location":"tools-tutorials/blender-mesh-editing/#blender-mesh-editing","text":"Warning This tutorial assumes you have some basic knowledge on using Blender (Navigating UI, basic object editing, etc). There are plenty of tutorials available on YouTube or many other websites.","title":"Blender mesh editing"},{"location":"tools-tutorials/blender-mesh-editing/#introduction","text":"Rigs of Rods is a game that is very easy to modify. This tutorial will help you get started on editing meshes using Blender, from installing the add-ons to exporting. Please read everything carefully and do not skip any steps. If you've created a model yourself and just want to export it to RoR, install the add-ons and skip to the Exporting section.","title":"Introduction"},{"location":"tools-tutorials/blender-mesh-editing/#required-software","text":"Rigs of Rods installed to the default location ( C:\\Program Files\\Rigs of Rods ) Blender (2.79b) Ogre Import/Export add-ons (Optional) Notepad++ (Optional) OgreMeshy A brain, some basic computer knowledge, and some patience","title":"Required software"},{"location":"tools-tutorials/blender-mesh-editing/#blender-version-warning","text":"The latest version of Blender (2.80) is currently not supported as the plugins have not been updated for it yet. You can download 2.79b here . If you are unsure which file to download, just select blender-2.79b-windows64.zip and extract it into a new folder, then run blender.exe .","title":"Blender version warning"},{"location":"tools-tutorials/blender-mesh-editing/#getting-started","text":"If you're following this tutorial, chances are you probably already have a mesh you want to edit. In this tutorial I'll be editing Box5Diesel's Ram EXT. Open the .zip file for the vehicle, and extract the correct .mesh file(s) and the textures ( .dds , .png , etc) into a folder you can easily access: Next, open a new File Explorer window and browse to C:\\Program Files\\Rigs of Rods , this is where OgreXMLConverter.exe is located. Simply drag and drop the mesh onto OgreXMLConverter.exe to get a .mesh.xml : You should now have a .mesh.xml file in the same folder: We're ready to launch Blender now.","title":"Getting started"},{"location":"tools-tutorials/blender-mesh-editing/#installing-blender-add-ons","text":"First, download the latest Ogre Import/Export add-ons from GitHub ( RoR_ImportExport_*.zip ) and place it into any folder. Do not extract. Now open Blender. Click File -> User Preferences : Click Add-ons -> Install from File : Select the RoR_ImportExport_*.zip file you downloaded earlier. Type rigs into the search bar and both add-ons should appear: Once both add-ons are enabled by clicking the checkbox, select Save User Settings : You can now close the User Preferences window.","title":"Installing Blender add-ons"},{"location":"tools-tutorials/blender-mesh-editing/#importing-the-mesh","text":"Select File -> Import -> Ogre3D (.mesh.xml) : Find & select the .mesh file. You should now see something similar to this: Press the Z key twice to get out of that shading mode. You should now see this: Warning The importer will automatically separate meshes if the .mesh.xml contains multiple materials. The object names match the material name. If there's many objects with the same material name, you should be safe to join them by pressing CTRL+J : It should look similar to this now:","title":"Importing the mesh"},{"location":"tools-tutorials/blender-mesh-editing/#fixing-object-shading","text":"You'll probably notice that your mesh is very blocky and/or has lots of shading errors. To fix this: On the left menu (Press T if it's not already open) select Smooth . You need to be in Object Mode ( TAB key) for this to appear: Now press the TAB key again to go into Edit Mode: Select Remove Doubles from the T menu: Now head over to the tool menu on the right and find the blue wrench icon -> Add Modifier -> Edge Split : The Edge Split Modifier should now be selected. The default Split Angle (30) should be fine in most cases. Do not apply the modifier. The exporter will do this for you. Note: For some models just applying edge split won't be enough, further work may be required (such as marking faces sharp).","title":"Fixing object shading"},{"location":"tools-tutorials/blender-mesh-editing/#applying-the-texture","text":"Now we can apply the texture. Press the TAB key to go into Edit Mode if you're not in it already and click the circle icon on the bottom left -> UV/Image Editor : The UV/Image Editor should now be open: Select Open from the bottom bar: Find & select your texture file: The texture file should now be open in the UV/Image Editor . Now go to the top right and find the little plus icon, or press N to open it: Open the Shading menu and click Textured Solid : It should now look similar to this:","title":"Applying the texture"},{"location":"tools-tutorials/blender-mesh-editing/#editing-the-mesh","text":"You're now ready to start editing the mesh. For this tutorial, I removed the exhaust stacks from the bed:","title":"Editing the mesh"},{"location":"tools-tutorials/blender-mesh-editing/#setting-the-object-name","text":"In the outliner (object list), double-click the object name to rename it. This will be the name of your mesh when exporting. In this example, I'll name it BoxDodgeCummins-NoStacks .","title":"Setting the object name"},{"location":"tools-tutorials/blender-mesh-editing/#adding-a-material","text":"Now select the circle icon next to the triangle icon and click New : The easiest way to find the material name is by opening the .mesh.xml file in a text editor and search \"material\":","title":"Adding a material"},{"location":"tools-tutorials/blender-mesh-editing/#exporting","text":"Before we export, if you moved the object while editing it you will need to apply Location/Rotation/Scale by pressing CTRL+A otherwise it will be placed incorrectly in-game: Select your mesh then click File -> Export -> Ogre3D (.scene and .mesh.xml) : Change your export settings to match the screenshot (all other settings can be left to their defaults): You should now have a new .mesh.xml and .mesh file in your folder: The exporter will automatically convert the .mesh.xml to .mesh as long RoR is installed to the default location. If you want to preview your exported model, you can use OgreMeshy to view it: (You can make a .material file if you want it to be textured in OgreMeshy)","title":"Exporting"},{"location":"tools-tutorials/blender-mesh-editing/#testing-in-game","text":"Now just edit the vehicle's .truck file to match the name of your new mesh and drag the new mesh file back into the .zip and test in-game: 17,14,2, 0.73, 0.5, 0.07, 0, 0, 0, BoxDodgeCummins-NoStacks.mesh forset 7, 12, 40, 41, 44-66, 69-87, 111 Congratulations!","title":"Testing in-game"},{"location":"tools-tutorials/blender-mesh-editing/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"tools-tutorials/blender-mesh-editing/#error-2-no-such-file-or-directory","text":"You forgot to convert the .mesh to .mesh.xml , as described in the Getting started section. Warning On Linux there is currently a bug preventing .mesh.xml imports in uppercase paths (e.g. /home/user/Downloads/rorimportfiles . You will have to place the .mesh and .mesh.xml files into a different folder without uppercases (e.g. /home/user/rorimportfiles )","title":"[Error 2] No such file or directory"},{"location":"tools-tutorials/blender-mesh-editing/#mesh-is-flipped","text":"Change the \"swap axis\" option in the export settings.","title":"Mesh is flipped"},{"location":"tools-tutorials/blender-mesh-editing/#mesh-appears-whitepink","text":"You did not assign the correct material. Make sure it matches.","title":"Mesh appears white/pink"},{"location":"tools-tutorials/blender-mesh-editing/#other-errors","text":"First, just Google the issue. If you can't find a solution then you can create a thread on the content creation forum .","title":"Other errors"},{"location":"tools-tutorials/branding/","text":"Branding \u00b6 Usage Guidelines \u00b6 Rigs of Rods is a soft-body physics simulator aiming to be as realistic as possible. Everything we do is free and open source to the general public. That said, we take branding seriously and maintain a quality. Please do not edit, change, distort, recolor, or reconfigure the Rigs of Rods logo. The Standard Logo The Logotype The Symbol .svg or .png .svg or .png .svg or .png Logotype reversed to White The Symbol with Background The Symbol with Typeface below The Symbol Alternate .svg or .png Typeface \u00b6 We use Maven Pro as our typeface font. Color Palette \u00b6 RoR Blue RoR Red RoR Purple #226699 #882500 #3d0155","title":"Branding"},{"location":"tools-tutorials/branding/#branding","text":"","title":"Branding"},{"location":"tools-tutorials/branding/#usage-guidelines","text":"Rigs of Rods is a soft-body physics simulator aiming to be as realistic as possible. Everything we do is free and open source to the general public. That said, we take branding seriously and maintain a quality. Please do not edit, change, distort, recolor, or reconfigure the Rigs of Rods logo. The Standard Logo The Logotype The Symbol .svg or .png .svg or .png .svg or .png Logotype reversed to White The Symbol with Background The Symbol with Typeface below The Symbol Alternate .svg or .png","title":"Usage Guidelines"},{"location":"tools-tutorials/branding/#typeface","text":"We use Maven Pro as our typeface font.","title":"Typeface"},{"location":"tools-tutorials/branding/#color-palette","text":"RoR Blue RoR Red RoR Purple #226699 #882500 #3d0155","title":"Color Palette"},{"location":"tools-tutorials/contributing-github/","text":"How to contribute to community projects using GitHub \u00b6 Preparation \u00b6 This tutorial assumes you already have: * A registered GitHub Account * GitHub Desktop downloaded and installed * You are logged into GitHub Forking the repository \u00b6 Go to the Rigs of Rods community website on GitHub . Click on the project you want to work on ( baker-ranch-v2 in this example). You will now see the projects repository. The repository contains all assets bound to this project (e.g. terrain configuration files, textures and meshes for maps). Click the Fork button at the top right The repository should now fork to your profile. Once it's done, you should be redirected to your new fork: Verify you are viewing your own repository (indicated by your username / project name with forked from ... subtitle) Cloning your local repository \u00b6 Click on Clone or download then Open in Desktop : After you click on Open in Desktop a dialog will appear. This dialog will be different depending on the web browser you are using. Make sure GitHubDesktop.exe is highlighted and hit Open link . If you have no option here you need to install GitHub Desktop (see Preparation ). GitHub Desktop will open and ask you where it should put the files so you can work on them. Select the place where you'd like to have them (Desktop in this example). Click Clone then wait for the download to finish. After the download is finished, open the project's folder by clicking Repository -> Show in Explorer Making changes \u00b6 In this folder you work on the project like you would usually do. Committing to your local repository \u00b6 This step assumes you are done with your changes and made sure they work and are bugfree. So far all changes are offline on your computer. To contribute to the project you have to upload (commit) them. Open GitHub Desktop. It will show the changes you have made. Check/uncheck the changed files you want to upload in one commit (it's good practice to do one commit per change. If you don't understand what this means yet don't worry, it will come with time). Enter a commit message explaining your change(s). If your changes are big or you want to add a comment use the description field for additional information. This is usually not necessary. Click on Commit to master Your changes are now saved into the git subsystem but they are still offline... Uploading to GitHub \u00b6 You'll see a confirmation that your commit has been saved. Notice your changes are now in the History tab. To upload your changes click on Push origin : Creating a pull request \u00b6 Now your changes are online but they are not in the central repository just yet. As of now they are only stored in your personal repository. To contribute to the project they have to be \"merged\" into the central repository. Open your personal repository on GitHub in your browser by clicking Repository -> View on GitHub . Notice it's telling you your branch is x commits ahead of y . This means you have changes which are not in the central repository yet. Click on New pull request On the next page you can review your changes again and start a pull request. Click Create pull request Enter a description for your pull request Since pull request can contain multiple commits and changes you may want to deliver more information in the description section (optional) Click \"Create pull request\" You just created a pull request. Your changes will be reviewed by the project's admins to ensure the overall quality of the project and to prevent trolls. You can review the status of your request at your pull request page. open (= pending) merged (= merged into central repository) closed (= not accepted) Often there will be a discussion about your changes. Admins will inform you about bugs, things they don't like etc. You should listen to them and adapt your changes accordingly. If someone replied to your pull request you will be notified by the GitHub interface. The GitHub icon at the top right of the page will have a blue dot to inform you about replies (similar to Facebook or Google+). Keeping your local repository updated \u00b6 To keep your local repository updated with the main repository: First, you'll need to get the url for the main repository. To do this, go to the repository you forked from (In this example RigsOfRods-Community/baker-ranch-v2 ) then click Clone or download . The url that appears under Clone with HTTPS is the url. Save this as you'll need it later. In GitHub Desktop, click Repository -> Open in Command Prompt A Command Prompt window will open. Type these commands one at a time: git remote add upstream url git fetch upstream git merge upstream/master --no-commit url being the url you found earlier. Example: https://github.com/RigsOfRods-Community/baker-ranch-v2.git The master branch name might be different depending on the repository. For example the Community Map's default branch is Default . Then in GitHub Desktop click Push to origin . After it's done, when you check your repository on GitHub it should now say This branch is even with RigsOfRods-Community:master. :","title":"How to contribute to community projects using GitHub"},{"location":"tools-tutorials/contributing-github/#how-to-contribute-to-community-projects-using-github","text":"","title":"How to contribute to community projects using GitHub"},{"location":"tools-tutorials/contributing-github/#preparation","text":"This tutorial assumes you already have: * A registered GitHub Account * GitHub Desktop downloaded and installed * You are logged into GitHub","title":"Preparation"},{"location":"tools-tutorials/contributing-github/#forking-the-repository","text":"Go to the Rigs of Rods community website on GitHub . Click on the project you want to work on ( baker-ranch-v2 in this example). You will now see the projects repository. The repository contains all assets bound to this project (e.g. terrain configuration files, textures and meshes for maps). Click the Fork button at the top right The repository should now fork to your profile. Once it's done, you should be redirected to your new fork: Verify you are viewing your own repository (indicated by your username / project name with forked from ... subtitle)","title":"Forking the repository"},{"location":"tools-tutorials/contributing-github/#cloning-your-local-repository","text":"Click on Clone or download then Open in Desktop : After you click on Open in Desktop a dialog will appear. This dialog will be different depending on the web browser you are using. Make sure GitHubDesktop.exe is highlighted and hit Open link . If you have no option here you need to install GitHub Desktop (see Preparation ). GitHub Desktop will open and ask you where it should put the files so you can work on them. Select the place where you'd like to have them (Desktop in this example). Click Clone then wait for the download to finish. After the download is finished, open the project's folder by clicking Repository -> Show in Explorer","title":"Cloning your local repository"},{"location":"tools-tutorials/contributing-github/#making-changes","text":"In this folder you work on the project like you would usually do.","title":"Making changes"},{"location":"tools-tutorials/contributing-github/#committing-to-your-local-repository","text":"This step assumes you are done with your changes and made sure they work and are bugfree. So far all changes are offline on your computer. To contribute to the project you have to upload (commit) them. Open GitHub Desktop. It will show the changes you have made. Check/uncheck the changed files you want to upload in one commit (it's good practice to do one commit per change. If you don't understand what this means yet don't worry, it will come with time). Enter a commit message explaining your change(s). If your changes are big or you want to add a comment use the description field for additional information. This is usually not necessary. Click on Commit to master Your changes are now saved into the git subsystem but they are still offline...","title":"Committing to your local repository"},{"location":"tools-tutorials/contributing-github/#uploading-to-github","text":"You'll see a confirmation that your commit has been saved. Notice your changes are now in the History tab. To upload your changes click on Push origin :","title":"Uploading to GitHub"},{"location":"tools-tutorials/contributing-github/#creating-a-pull-request","text":"Now your changes are online but they are not in the central repository just yet. As of now they are only stored in your personal repository. To contribute to the project they have to be \"merged\" into the central repository. Open your personal repository on GitHub in your browser by clicking Repository -> View on GitHub . Notice it's telling you your branch is x commits ahead of y . This means you have changes which are not in the central repository yet. Click on New pull request On the next page you can review your changes again and start a pull request. Click Create pull request Enter a description for your pull request Since pull request can contain multiple commits and changes you may want to deliver more information in the description section (optional) Click \"Create pull request\" You just created a pull request. Your changes will be reviewed by the project's admins to ensure the overall quality of the project and to prevent trolls. You can review the status of your request at your pull request page. open (= pending) merged (= merged into central repository) closed (= not accepted) Often there will be a discussion about your changes. Admins will inform you about bugs, things they don't like etc. You should listen to them and adapt your changes accordingly. If someone replied to your pull request you will be notified by the GitHub interface. The GitHub icon at the top right of the page will have a blue dot to inform you about replies (similar to Facebook or Google+).","title":"Creating a pull request"},{"location":"tools-tutorials/contributing-github/#keeping-your-local-repository-updated","text":"To keep your local repository updated with the main repository: First, you'll need to get the url for the main repository. To do this, go to the repository you forked from (In this example RigsOfRods-Community/baker-ranch-v2 ) then click Clone or download . The url that appears under Clone with HTTPS is the url. Save this as you'll need it later. In GitHub Desktop, click Repository -> Open in Command Prompt A Command Prompt window will open. Type these commands one at a time: git remote add upstream url git fetch upstream git merge upstream/master --no-commit url being the url you found earlier. Example: https://github.com/RigsOfRods-Community/baker-ranch-v2.git The master branch name might be different depending on the repository. For example the Community Map's default branch is Default . Then in GitHub Desktop click Push to origin . After it's done, when you check your repository on GitHub it should now say This branch is even with RigsOfRods-Community:master. :","title":"Keeping your local repository updated"},{"location":"tools-tutorials/editor-nodeSnap/","text":"nodeSnap \u00b6 Introduction \u00b6 nodeSnap is a new open source truck editor heavily inspired by the old rorEditorizer. This tutorial will show you how to use and manipulate nodeSnap (version 0.1.1-beta) Get started \u00b6 You can download nodeSnap from the repository following this link. The current version is a stand-alone app (which means, it doesn't require an installer) so you will find it in a zip format. You might ask: But why is it ~67MB while rorEditorizer is ~729KB? nodeSnap is built using new technologies, such as Electron and node.js. That might be overkill for this application, but that's how it became possible in the first place. Next versions will make that size worth it with much more features. After downloading the zip file, you can put it anywhere you want. I moved it to my desktop. Extract it to a folder (important) Then double click on \"nodeSnap\" to run it. Create a new truck file \u00b6 To create a new truck file, all you have to do is to click on \"New File\" under \"Actions\" and fill up the form, then click on \"Next\". Open a truck file \u00b6 To open a truck file, simply click on \"Open file\" under \"Actions\" and navigate to your desired truck file. Note: nodeSnap supports all Rigs of rods's truck file extensions. Interface \u00b6 nodeSnap's UI looks like rorEditorizer. On the left side, we have a sidebar that shows you all the nodes and beams with their details and on the top, we have a toolbar that contains functions. In the middle, we have 4 views: Top, Side, Front, and 3D. The first three views are orthographic and the last one is a perspective view. In the middle of the views, you have a selector that you can drag to resize the views. On each view, you have a 'viewCube' (3ds max inspired) that can help you get to certain angles easily. (currently works only on the 3D view) On the sidebar, click on the \"Other\" tab, click on \"Settings\" button to access the current editor's settings. These settings allow you to change the grid size (it affects node snapping), to change a visual node's size and to toggle node names. Note: These settings are saved as preferences for each truck file you make/edit in a \".nodeSnap\" folder that you can find in the root truck file's directory. Controls \u00b6 Camera: Right click + mouse move => move camera around Left click + mouse move (Only on perspective view aka 3D view) => rotate on axis Mouse wheel => Zoom Editor: CTRL + N => truck mode (default) CTRL + B => blueprint mode Truck Mode: Mouse double left click => new node Mouse double left click + CTRL => new node snapped on grid Mouse click on a node + drag => Move node around Mouse click on a node + drag + CTRL => Move node around with grid snapping to the preset value CTRL + SHIFT + click node1 + click node2 => Creates a beam + shows a temporary blue line before you click on the second node Blueprint Mode: Mouse + gizmo => transform Key \"S\" => scale mode Key \"R\" => rotate mode Key \"T\" => translate mode Functions \u00b6 nodeSnap includes a few useful functions to make your editing experience easier. We will use this simple structure as an example. A structure is an N/B, either the whole N/B or an N/B inside of a group. You can right click on a node in one of the views for a menu Grouping \u00b6 nodeSnap supports RoR's grouping and adds a few more functions to that. To add a new group, right click on a node, a window will ask you to name that group, and after clicking apply, nodeSnap will add that group affecting that node and all nodes after it. After you add a new group, nodeSnap will offer you a few functions when you right click on the group. The functions are self explanatory. Duplicate a group \u00b6 Instead of remaking the exact same structure somewhere else, nodeSnap offers a function to duplicate the current structure in a group and place it anywhere else you want. nodeSnap allows you to do an offset on the specified axis. All you have to do is to specify the offset (in RoR's one unit of distance) and how many times you want to duplicate the structure nodeSnap also allows you to do a mirror on the specified axis. Note: You do not have to care about overlapped nodes after duplication, because nodeSnap takes care of that automatically. Note 2: nodeSnap does not copy beams that are connected between any node inside the group and an other node outside the group, keep reading for the solution. Toolbar \u00b6 On the toolbar, we have two drop down menus: \"Edit\" and \"File\" Edit menu \u00b6 The edit menu has a few interesting functions. The \"Scale\" function gives you the ability to scale the whole n/b. The \"Move\" functions moves the whole n/b by an offset on a specified axis. The \"Rotate\" function rotates the whole n/b on a specified axis with a given angle in degrees. The \"Duplicate Visible\" function solves one problem you have when duplicating groups. Instead of duplicating a specific group, all you have to do is to hide all the nodes/groups that you do not want to duplicate, and execute the function, just like duplicating a group. File menu \u00b6 The functions are pretty much self explanatory. Note: nodeSnap has an integrated file watcher. This means that whenever you edit your truck file using a text-editor, nodeSnap will automatically reload the file. Note 2: nodeSnap has a backup system. Each time you save your file, nodeSnap will make a backup of the previous truckfile and store it inside the \".nodeSnap\" folder that is found in the root truck file's directory, ordered by a timestamp. Note 3: nodeSnap is based on a \"project\" system, which means, if you leave the editor and go back to the project page, your work will not be lost and you will have an option to go back to your work. (this is integrated for future features) Blueprint system \u00b6 Like any 3D editor, you can load a blueprint in nodeSnap by going to the sidebar, clicking on the \"Other\" tab, and clicking on the \"Load Blueprint\" Note: nodeSnap saves your blueprint data as preference and loads it again whenever you load the truck file again. Image \u00b6 On the \"Image\" tab, select your file and press \"Add\" You can switch to blueprint mode (CTRL+B) and reposition, scale or rotate the blueprint by pressing (T, S, R) keys respectively. And then go back to truck editor mode using (CTRL+N) 3D Model \u00b6 On the \"3D Model\" tab, select your file and press \"Add\" Again, you can switch to blueprint mode (CTRL+B) and reposition, scale or rotate the model by pressing (T, S, R) keys respectively. Note: nodeSnap supports only ogre's XML files (\".mesh.xml\") or Wavefront object file (\".obj\") Conclusion \u00b6 nodeSnap is made to make editing N/Bs an easy task that anyone can do. For feature requests or bug reporting, please click this link","title":"Editor nodeSnap"},{"location":"tools-tutorials/editor-nodeSnap/#nodesnap","text":"","title":"nodeSnap"},{"location":"tools-tutorials/editor-nodeSnap/#introduction","text":"nodeSnap is a new open source truck editor heavily inspired by the old rorEditorizer. This tutorial will show you how to use and manipulate nodeSnap (version 0.1.1-beta)","title":"Introduction"},{"location":"tools-tutorials/editor-nodeSnap/#get-started","text":"You can download nodeSnap from the repository following this link. The current version is a stand-alone app (which means, it doesn't require an installer) so you will find it in a zip format. You might ask: But why is it ~67MB while rorEditorizer is ~729KB? nodeSnap is built using new technologies, such as Electron and node.js. That might be overkill for this application, but that's how it became possible in the first place. Next versions will make that size worth it with much more features. After downloading the zip file, you can put it anywhere you want. I moved it to my desktop. Extract it to a folder (important) Then double click on \"nodeSnap\" to run it.","title":"Get started"},{"location":"tools-tutorials/editor-nodeSnap/#create-a-new-truck-file","text":"To create a new truck file, all you have to do is to click on \"New File\" under \"Actions\" and fill up the form, then click on \"Next\".","title":"Create a new truck file"},{"location":"tools-tutorials/editor-nodeSnap/#open-a-truck-file","text":"To open a truck file, simply click on \"Open file\" under \"Actions\" and navigate to your desired truck file. Note: nodeSnap supports all Rigs of rods's truck file extensions.","title":"Open a truck file"},{"location":"tools-tutorials/editor-nodeSnap/#interface","text":"nodeSnap's UI looks like rorEditorizer. On the left side, we have a sidebar that shows you all the nodes and beams with their details and on the top, we have a toolbar that contains functions. In the middle, we have 4 views: Top, Side, Front, and 3D. The first three views are orthographic and the last one is a perspective view. In the middle of the views, you have a selector that you can drag to resize the views. On each view, you have a 'viewCube' (3ds max inspired) that can help you get to certain angles easily. (currently works only on the 3D view) On the sidebar, click on the \"Other\" tab, click on \"Settings\" button to access the current editor's settings. These settings allow you to change the grid size (it affects node snapping), to change a visual node's size and to toggle node names. Note: These settings are saved as preferences for each truck file you make/edit in a \".nodeSnap\" folder that you can find in the root truck file's directory.","title":"Interface"},{"location":"tools-tutorials/editor-nodeSnap/#controls","text":"","title":"Controls"},{"location":"tools-tutorials/editor-nodeSnap/#functions","text":"nodeSnap includes a few useful functions to make your editing experience easier. We will use this simple structure as an example. A structure is an N/B, either the whole N/B or an N/B inside of a group. You can right click on a node in one of the views for a menu","title":"Functions"},{"location":"tools-tutorials/editor-nodeSnap/#grouping","text":"nodeSnap supports RoR's grouping and adds a few more functions to that. To add a new group, right click on a node, a window will ask you to name that group, and after clicking apply, nodeSnap will add that group affecting that node and all nodes after it. After you add a new group, nodeSnap will offer you a few functions when you right click on the group. The functions are self explanatory.","title":"Grouping"},{"location":"tools-tutorials/editor-nodeSnap/#duplicate-a-group","text":"Instead of remaking the exact same structure somewhere else, nodeSnap offers a function to duplicate the current structure in a group and place it anywhere else you want. nodeSnap allows you to do an offset on the specified axis. All you have to do is to specify the offset (in RoR's one unit of distance) and how many times you want to duplicate the structure nodeSnap also allows you to do a mirror on the specified axis. Note: You do not have to care about overlapped nodes after duplication, because nodeSnap takes care of that automatically. Note 2: nodeSnap does not copy beams that are connected between any node inside the group and an other node outside the group, keep reading for the solution.","title":"Duplicate a group"},{"location":"tools-tutorials/editor-nodeSnap/#toolbar","text":"On the toolbar, we have two drop down menus: \"Edit\" and \"File\"","title":"Toolbar"},{"location":"tools-tutorials/editor-nodeSnap/#edit-menu","text":"The edit menu has a few interesting functions. The \"Scale\" function gives you the ability to scale the whole n/b. The \"Move\" functions moves the whole n/b by an offset on a specified axis. The \"Rotate\" function rotates the whole n/b on a specified axis with a given angle in degrees. The \"Duplicate Visible\" function solves one problem you have when duplicating groups. Instead of duplicating a specific group, all you have to do is to hide all the nodes/groups that you do not want to duplicate, and execute the function, just like duplicating a group.","title":"Edit menu"},{"location":"tools-tutorials/editor-nodeSnap/#file-menu","text":"The functions are pretty much self explanatory. Note: nodeSnap has an integrated file watcher. This means that whenever you edit your truck file using a text-editor, nodeSnap will automatically reload the file. Note 2: nodeSnap has a backup system. Each time you save your file, nodeSnap will make a backup of the previous truckfile and store it inside the \".nodeSnap\" folder that is found in the root truck file's directory, ordered by a timestamp. Note 3: nodeSnap is based on a \"project\" system, which means, if you leave the editor and go back to the project page, your work will not be lost and you will have an option to go back to your work. (this is integrated for future features)","title":"File menu"},{"location":"tools-tutorials/editor-nodeSnap/#blueprint-system","text":"Like any 3D editor, you can load a blueprint in nodeSnap by going to the sidebar, clicking on the \"Other\" tab, and clicking on the \"Load Blueprint\" Note: nodeSnap saves your blueprint data as preference and loads it again whenever you load the truck file again.","title":"Blueprint system"},{"location":"tools-tutorials/editor-nodeSnap/#image","text":"On the \"Image\" tab, select your file and press \"Add\" You can switch to blueprint mode (CTRL+B) and reposition, scale or rotate the blueprint by pressing (T, S, R) keys respectively. And then go back to truck editor mode using (CTRL+N)","title":"Image"},{"location":"tools-tutorials/editor-nodeSnap/#3d-model","text":"On the \"3D Model\" tab, select your file and press \"Add\" Again, you can switch to blueprint mode (CTRL+B) and reposition, scale or rotate the model by pressing (T, S, R) keys respectively. Note: nodeSnap supports only ogre's XML files (\".mesh.xml\") or Wavefront object file (\".obj\")","title":"3D Model"},{"location":"tools-tutorials/editor-nodeSnap/#conclusion","text":"nodeSnap is made to make editing N/Bs an easy task that anyone can do. For feature requests or bug reporting, please click this link","title":"Conclusion"},{"location":"tools-tutorials/visual-editors/","text":"Visual editors \u00b6 Introduction \u00b6 While it is possible to create a node/beam completely using a text editor, it is not recommended as an n/b can get quite complex. These are programs that help you visualize and edit a node/beam. Truck file template \u00b6 To help you get started with creating a new node/beam, you can download this truck file template which contains all the required sections. Blank Truck File Blender \u00b6 As of November 2018, Blender supports creating/editing Node/Beam structures with a plugin created by Ulteq. Features: Full vertex group support Automatic column alignment Sophisticated vertex position rounding Full preservation of the original truck file Automatic beam sorting based on the vertex groups All node, beam and cab options are preserved during import / export All set_node_defaults , set_beam_defaults and set_beam_defaults_scale entries are preserved Warning The latest version of Blender (2.8x) is currently not supported as the plugins have not been updated for it yet. You can download 2.79b here . If you are unsure which file to download, just select blender-2.79b-windows64.zip and extract it into a new folder, then run blender.exe . Installation \u00b6 First, download the plugins from the Repository . Do not extract. In Blender, go to File -> User Preferences : Click Add-ons -> Install from File : Select the blender_plugins.zip file you downloaded earlier. Type \"RoR\" into the search bar and both add-ons should appear: Once both plug-ins are enabled by clicking the checkbox, select Save User Settings . You can now close the User Preferences window, the plugins are now ready to use. Node visualization \u00b6 By default, the plugin will enable Blender's debug mode which provides node ID visualization, however they are usually difficult to read. To fix this, download this plugin by GitHub user zeffii ( mirror ) Install it following the above instructions: To enable it, go to the top right and find the little plus icon, or press N to open it: While in edit mode, open the Mesh Display menu and select Visualize indices : You should now have readable node IDs. Notes \u00b6 You can use vertex groups to organize your structure. In the .truck file, a \"vertex group\" starts with ;grp: . Due to how the plugin reads/writes the .truck file, it is recommended to remove and reimport your N/B if you want to make changes in Blender, otherwise changes you've made after exporting will be reverted. TruckViewer \u00b6 A Java program made by Gouranga designed for viewing a node/beam structure. Pros: Auto-reloading of the file Supports nodes2 4 independent views, each can be either be rotated in 3d or snapped to the front/sides/back. Cons: Only displays pure nodes and beams. Cannot edit the n/b structure, it is designed only for viewing it. Download \u00b6 Download here Editorizer \u00b6 Warning This program is very old and thus shouldn't be used to edit existing vehicles. It is recommended to create N/Bs using Blender instead. The Editorizer is a free program written by Ben for making vehicles. Contributions: Tuusita (Comments, Structure, Connect To). It's a fairly old and simple program. Note you can't use it to create a new vehicle from scratch, you need to manually create a .truck file with a basic structure. A .truck file with the basic structure has been included to get you started. Pros: Designed for editing node/beam, very feature-rich Colors can be changed to suit your liking Cons: Does not support newer truck sections (such as set_node_defaults ). These sections will have to be commented out otherwise the Editorizer fails to open the file. It is recommended to make a copy of the truck file made for editing, then copy the changes over to your main truck file. Download and run on Windows \u00b6 Download here (ZIP archive) Run as administrator! (only needed on the first run or if you move Editorizer's directory) Troubleshooting \u00b6 If you don't run Editorizer as administrator for the first time, or you subsequently move it's directory, you may encounter this error: To resolve this, try running as administrator again, and if it doesn't help, try these steps: Find comdlg32.ocx and mscomctl.ocx in Editorizer's directory. On 32-bit Windows: Move comdlg32.ocx and mscomctl.ocx to C:\\Windows\\system32 . Open a command line window and run following commands: regsvr32 c:\\Windows\\system32\\comdlg32.ocx regsvr32 c:\\Windows\\system32\\mscomctl.ocx - On 64bit Windows: - Move comdlg32.ocx and mscomctl.ocx to C:\\Windows\\SysWOW64 - Open a command line window and run following commands: regsvr32 c:\\Windows\\SysWOW64\\comdlg32.ocx regsvr32 c:\\Windows\\SysWOW64\\mscomctl.ocx Download and run on MacOSX \u00b6 Download here (ZIP archive) Requires MacOSX Snow Leopard or Higher. The mac port is standalone with all the files needed built into the app, Huge thanks to MothBird. Warning: the file is quite large (511.6MB) because of all of the required frameworks. Using blueprints \u00b6 Blueprints are technical drawings of vehicles and machinery, very useful as reference. Many good blueprints can be found on the internet. To load a blueprint, find Blueprints in the top toolbar, and load in the files. To adjust blueprints, click on Place Blueprints on the far right, and place your blueprints in a desired position . Editing Nodes \u00b6 When you want to add nodes, just click on Add Nodes up in the right. Click where you want the node to go, either in the Top Left, Bottom Left or Botton Right areas. If you want to make the node only get placed on the \"grid\" that divides the areas up-check the \"snap nodes to grid\" box. Special Nodes Check truckfile reference for special node types. If you want to give your nodes these special options, just click on the Nodes tab, pick the one you want to change, and put the corresponding node option in the options part. Editing Beams \u00b6 When you want to add beams, just click on the Add Beams up in the right. Click the first node where you want the beam to start. Click the second node which is where you want the beam to end. Check truckfile reference for special beam types. If you want to give your beams these special options, just click on the Beams tab, pick the beam you want to change, and put the corresponding beam option in the options box, along with any variables for that type of beam. Wheels \u00b6 To add wheels, look at this example. Just click on the Wheels tab and add in the correct information in the correct spaces. FRONT WHEELS(Steering wheels): wheels ; EXAMPLE: 0.5,0.1,12,33,34,9999,1,1,32,350.0,300000,4000, tracks/wheelface tracks/wheelband1 ; EXAMPLE2: 0.5,0.1,12,35,36,9999,1,1,31,350.0,300000,4000, tracks/wheelface tracks/wheelband1 REAR WHEELS: wheels ;EXAMPLE: 0.5,0.1,12,12,13,14,1,1,10,350.0,300000,4000, tracks/wheelfaceb tracks/wheelband1 ;EXAMPLE2: 0.5,0.1,12,14,15,-12,1,1,9,350.0,300000,4000, tracks/wheelfaceb tracks/wheelband1 Scaling \u00b6 To scale your vehicle if you find it a little bit too big, just go to the Visible Nodes tab at the very top. Click on Scale..., then put in decimal numbers from 0.01 to 0.99 in the X,Y,Z lines to scale it down, put in decimal numbers from 1.0 and up(experiment) to scale it up. Tools to avoid \u00b6 In the Visible Nodes tab at the top, I would advise to not use the Interconnect or Variable Interconnect options with any vehicle as it can mess up the structure and other things. Basically these options will join every node to every other node in the object...","title":"Visual editors"},{"location":"tools-tutorials/visual-editors/#visual-editors","text":"","title":"Visual editors"},{"location":"tools-tutorials/visual-editors/#introduction","text":"While it is possible to create a node/beam completely using a text editor, it is not recommended as an n/b can get quite complex. These are programs that help you visualize and edit a node/beam.","title":"Introduction"},{"location":"tools-tutorials/visual-editors/#truck-file-template","text":"To help you get started with creating a new node/beam, you can download this truck file template which contains all the required sections. Blank Truck File","title":"Truck file template"},{"location":"tools-tutorials/visual-editors/#blender","text":"As of November 2018, Blender supports creating/editing Node/Beam structures with a plugin created by Ulteq. Features: Full vertex group support Automatic column alignment Sophisticated vertex position rounding Full preservation of the original truck file Automatic beam sorting based on the vertex groups All node, beam and cab options are preserved during import / export All set_node_defaults , set_beam_defaults and set_beam_defaults_scale entries are preserved Warning The latest version of Blender (2.8x) is currently not supported as the plugins have not been updated for it yet. You can download 2.79b here . If you are unsure which file to download, just select blender-2.79b-windows64.zip and extract it into a new folder, then run blender.exe .","title":"Blender"},{"location":"tools-tutorials/visual-editors/#installation","text":"First, download the plugins from the Repository . Do not extract. In Blender, go to File -> User Preferences : Click Add-ons -> Install from File : Select the blender_plugins.zip file you downloaded earlier. Type \"RoR\" into the search bar and both add-ons should appear: Once both plug-ins are enabled by clicking the checkbox, select Save User Settings . You can now close the User Preferences window, the plugins are now ready to use.","title":"Installation"},{"location":"tools-tutorials/visual-editors/#node-visualization","text":"By default, the plugin will enable Blender's debug mode which provides node ID visualization, however they are usually difficult to read. To fix this, download this plugin by GitHub user zeffii ( mirror ) Install it following the above instructions: To enable it, go to the top right and find the little plus icon, or press N to open it: While in edit mode, open the Mesh Display menu and select Visualize indices : You should now have readable node IDs.","title":"Node visualization"},{"location":"tools-tutorials/visual-editors/#notes","text":"You can use vertex groups to organize your structure. In the .truck file, a \"vertex group\" starts with ;grp: . Due to how the plugin reads/writes the .truck file, it is recommended to remove and reimport your N/B if you want to make changes in Blender, otherwise changes you've made after exporting will be reverted.","title":"Notes"},{"location":"tools-tutorials/visual-editors/#truckviewer","text":"A Java program made by Gouranga designed for viewing a node/beam structure. Pros: Auto-reloading of the file Supports nodes2 4 independent views, each can be either be rotated in 3d or snapped to the front/sides/back. Cons: Only displays pure nodes and beams. Cannot edit the n/b structure, it is designed only for viewing it.","title":"TruckViewer"},{"location":"tools-tutorials/visual-editors/#download","text":"Download here","title":"Download"},{"location":"tools-tutorials/visual-editors/#editorizer","text":"Warning This program is very old and thus shouldn't be used to edit existing vehicles. It is recommended to create N/Bs using Blender instead. The Editorizer is a free program written by Ben for making vehicles. Contributions: Tuusita (Comments, Structure, Connect To). It's a fairly old and simple program. Note you can't use it to create a new vehicle from scratch, you need to manually create a .truck file with a basic structure. A .truck file with the basic structure has been included to get you started. Pros: Designed for editing node/beam, very feature-rich Colors can be changed to suit your liking Cons: Does not support newer truck sections (such as set_node_defaults ). These sections will have to be commented out otherwise the Editorizer fails to open the file. It is recommended to make a copy of the truck file made for editing, then copy the changes over to your main truck file.","title":"Editorizer"},{"location":"tools-tutorials/visual-editors/#download-and-run-on-windows","text":"Download here (ZIP archive) Run as administrator! (only needed on the first run or if you move Editorizer's directory)","title":"Download and run on Windows"},{"location":"tools-tutorials/visual-editors/#troubleshooting","text":"If you don't run Editorizer as administrator for the first time, or you subsequently move it's directory, you may encounter this error: To resolve this, try running as administrator again, and if it doesn't help, try these steps: Find comdlg32.ocx and mscomctl.ocx in Editorizer's directory. On 32-bit Windows: Move comdlg32.ocx and mscomctl.ocx to C:\\Windows\\system32 . Open a command line window and run following commands: regsvr32 c:\\Windows\\system32\\comdlg32.ocx regsvr32 c:\\Windows\\system32\\mscomctl.ocx - On 64bit Windows: - Move comdlg32.ocx and mscomctl.ocx to C:\\Windows\\SysWOW64 - Open a command line window and run following commands: regsvr32 c:\\Windows\\SysWOW64\\comdlg32.ocx regsvr32 c:\\Windows\\SysWOW64\\mscomctl.ocx","title":"Troubleshooting"},{"location":"tools-tutorials/visual-editors/#download-and-run-on-macosx","text":"Download here (ZIP archive) Requires MacOSX Snow Leopard or Higher. The mac port is standalone with all the files needed built into the app, Huge thanks to MothBird. Warning: the file is quite large (511.6MB) because of all of the required frameworks.","title":"Download and run on MacOSX"},{"location":"tools-tutorials/visual-editors/#using-blueprints","text":"Blueprints are technical drawings of vehicles and machinery, very useful as reference. Many good blueprints can be found on the internet. To load a blueprint, find Blueprints in the top toolbar, and load in the files. To adjust blueprints, click on Place Blueprints on the far right, and place your blueprints in a desired position .","title":"Using blueprints"},{"location":"tools-tutorials/visual-editors/#editing-nodes","text":"When you want to add nodes, just click on Add Nodes up in the right. Click where you want the node to go, either in the Top Left, Bottom Left or Botton Right areas. If you want to make the node only get placed on the \"grid\" that divides the areas up-check the \"snap nodes to grid\" box. Special Nodes Check truckfile reference for special node types. If you want to give your nodes these special options, just click on the Nodes tab, pick the one you want to change, and put the corresponding node option in the options part.","title":"Editing Nodes"},{"location":"tools-tutorials/visual-editors/#editing-beams","text":"When you want to add beams, just click on the Add Beams up in the right. Click the first node where you want the beam to start. Click the second node which is where you want the beam to end. Check truckfile reference for special beam types. If you want to give your beams these special options, just click on the Beams tab, pick the beam you want to change, and put the corresponding beam option in the options box, along with any variables for that type of beam.","title":"Editing Beams"},{"location":"tools-tutorials/visual-editors/#wheels","text":"To add wheels, look at this example. Just click on the Wheels tab and add in the correct information in the correct spaces. FRONT WHEELS(Steering wheels): wheels ; EXAMPLE: 0.5,0.1,12,33,34,9999,1,1,32,350.0,300000,4000, tracks/wheelface tracks/wheelband1 ; EXAMPLE2: 0.5,0.1,12,35,36,9999,1,1,31,350.0,300000,4000, tracks/wheelface tracks/wheelband1 REAR WHEELS: wheels ;EXAMPLE: 0.5,0.1,12,12,13,14,1,1,10,350.0,300000,4000, tracks/wheelfaceb tracks/wheelband1 ;EXAMPLE2: 0.5,0.1,12,14,15,-12,1,1,9,350.0,300000,4000, tracks/wheelfaceb tracks/wheelband1","title":"Wheels"},{"location":"tools-tutorials/visual-editors/#scaling","text":"To scale your vehicle if you find it a little bit too big, just go to the Visible Nodes tab at the very top. Click on Scale..., then put in decimal numbers from 0.01 to 0.99 in the X,Y,Z lines to scale it down, put in decimal numbers from 1.0 and up(experiment) to scale it up.","title":"Scaling"},{"location":"tools-tutorials/visual-editors/#tools-to-avoid","text":"In the Visible Nodes tab at the top, I would advise to not use the Interconnect or Variable Interconnect options with any vehicle as it can mess up the structure and other things. Basically these options will join every node to every other node in the object...","title":"Tools to avoid"},{"location":"vehicle-creation/aircraft-and-aerodynamics/","text":"Aircraft and aerodynamics \u00b6 Wings \u00b6 Wings in RoR are a little bit of magic. They introduce aerodynamic effects onto planes, boats, and trucks. Although propulsion engines (motors, props, screws) cannot be combined, wings can be added to any sort of vehicle to provide aerodynamic force. Introduction \u00b6 The wing section declares parts of the chassis as wings, and that they should bear aerodynamic forces. Each line of this section designs a '''wing segment''', that is a homogeneous part of a wing. You can (and you should!) make a plane's wing from several contiguous wing segments. Rudder and elevators are also made with one or more wing segments. Each wing segment is bounded by 8 nodes, that defines the \"bounding box\" of the wing, specifically its span, chord and thickness. You must ensure that these nodes are properly interconnected by beams to ensure the structural integrity of the wing. '''Notice that it is VERY IMPORTANT to declare contiguous wing segments''' (i.e. that shares nodes) IN SEQUENTIAL ORDER FROM RIGHT TO LEFT, and you should avoid cutting a wing in two at the fuselage, but make the whole wing continuous across the fuselage because it helps to compute whole-wing effects like induced drag and other things like wing lights. A very important aerodynamic parameter is the wing airfoil. The airfoil is the tear-like shape of the wing, and its exact geometry is very important for the characteristics and performances of real-world wings. RoR uses precomputed performances curves from standard airfoils, interpolated from wing tunnel tests. These curves are stored in .afl files. Airfoils \u00b6 Standard airfoils provided in RoR are: * NACA64.1.412 - actual airfoil of the wing tip of the Hercules C-130 * NACA64.3.618 - similar airfoil to the wing root of the Hercules C-130 * NACA0009 - standard symmetrical airfoil, good for rudder and elevators * Clark-Y - used for propellers, but is also very popular for main wings You can get more airfoil from the popular X-Plane flight simulator. RoR is compatible with X-Plane .afl, but you must convert their end-of-line style from MacOS to Windows using an advanced text editor, or RoR will crash. Example Wing \u00b6 Here's an example: And the corresponding wings section : wings ;right wing ;1 6,8,5,7,12,10,11,9, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, n, 1.0, 0, 0, NACA64.1.412.afl ;2 4,6,3,5,14,12,13,11, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, a, 0.75, -24, 24, NACA64.1.412.afl ;3 2,4,1,3,16,14,15,13, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, n, 1.0, 0, 0, NACA64.1.412.afl ;left wing ;4 18,2,17,1,28,16,27,15, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, n, 1.0, 0, 0, NACA64.1.412.afl ;5 20,18,19,17,26,28,25,27, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, b, 0.75, -24, 24, NACA64.1.412.afl ;6 22,20,21,19,24,26,23,25, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, n, 1.0, 0, 0, NACA64.1.412.afl Air Brakes \u00b6 (Version 0.35 or later) An air brake is a moving panel used to slow down an airplane. It is positioned similarly to a \"props\", with noderef, nodex, nodey, nodea, offsetx, offsety, offsetz The airbrake needs 4 nodes (noderef, nodex, nodey, nodea) to position it. pick 4 nodes that form a square or rectangle at the position you want your airbrake. This picture shows a basic airbrake setup, you can see the offsetx, and offsety in red move the airbrake back and forth along that direction. Offset Z will move it up and down vertically (in this case). It takes time to position a airbrake just right. Make one adjustment at a time and see what the change did in game before you make another. The 4 nodes you choose will determine the direction your airbrake points. If the airbrake is backwards, swap the noderef, nodex, nodey, nodea around until it points the way you want. Width and length control how long or wide the airbrake is. Simply adjust these numbers until the airbrake is the size you want. Max angle is the maximum angle the airbrake will lift when fully engaged. Then comes two texture coordinates that texture the airbrake using your vehicles texture pic. Air brakes can easily be added to a wing box, just set noderef, nodex, nodey and nodea as the four upper nodes of a wing box. Example: airbrakes ; noderef, nodex, nodey, nodea, offsetx, offsety, offsetz, width, length, max angle, texcord x1, texcoord y1, texcoord x2, texcoord y2 95, 105, 113, 125, 0.2, 0.0, 0.0, 2.0, 3.0, 60.0, 0.044, 0.205, 0.124, 0.146 Propeller engines \u00b6 To add a propeller engine to your creation, first you need to make the node and beam part of the engine (its the same for either type of engine, turboprop or pistonprop). You start off by making a diamond shape with one node in the middle, like so: Make sure that all the nodes are evenly placed so that when they're spinning at high RPM's they won't get out of balance. (You can get them spot on in the editorizer if you use the \"snap nodes to grid\" option). Now you need to add another node in the center of that diamond but this one needs to be a bit behind the first middle node. Like so: now just connect all the nodes together with beams but make sure you only connect the diamonds four outer edge nodes (in this case nodes 1,2,3 and 4) to each other to make an out line and then to the 2 middle nodes. Its important that this is done so that they can rotate smoothly. The nodes that you would use to attach the engine node/beam assembly to the rest of the planes chassis would be the two middle nodes (in this case nodes 0 and 5). Now that you have the node and beam part of the engine done you can move on to the truck file code part of the engine. == Props section requirements == First we will take care of the \"props\" section. '''Note: it is important that you have the \"props\" section ''BEFORE'' the turboprops or pistonprops section.''' The first thing that you want to add to the props section is the \"spinprop.mesh\" this is what makes the turboprops/pistonprops work. When placing this mesh its important how the nodes that you place it on are oriented, for this test model that I'm making it would have ref node: 0, X node: 1, Y node: 5 this way when the engine is spinning the propeller mesh (ie pale.mesh) will be oriented right. for example if I switch X and Y around so X was 5 and Y was 1 the propellers would appear to spin at a 90 degree angle compared to the way the node/beam engine was really spinning. Also you need one \"spinprop.mesh\" for each engine you have. Example props section for \"spinprop.mesh\": props ;ref,x,y,offsetx,offsety,offsetz,rotx,roty,rotz,mesh 0,1,5, 0.0, 0.0, 0.0, 0, 0, 0, spinprop.mesh The next thing we need to add to the props section is the propellers mesh. Its the same as for the \"spinprop.mesh\" you just need one for every visible propeller you want. By looking at the picture and the example props section below it should be fairly easy to figure out. Example props section with propellers mesh's: props ;ref,x,y,offsetx,offsety,offsetz,rotx,roty,rotz,mesh ;First propellers mesh 0,5,1, 0.0, 0.0, 0.0, 180, 0, 90, pale.mesh ;Second propellers mesh 0,5,2, 0.0, 0.0, 0.0, 180, 0, 90, pale.mesh ;Third propellers mesh 0,5,3, 0.0, 0.0, 0.0, 180, 0, 90, pale.mesh ;Fourth propellers mesh 0,5,4, 0.0, 0.0, 0.0, 180, 0, 90, pale.mesh Turboprops section \u00b6 Now that you have everything done in the props section we can move on to the turboprops section. The turboprops section has 8 parameters they are: * 1. Reference node number (center of the prop) * 2. Prop axis node number (back of the prop) * 3. Blade 1 tip node number * 4. Blade 2 tip node number * 5. Blade 3 tip node number * 6. Blade 4 tip node number * 7. Power of the turbine (in kW) * 8. Airfoil of the blades Explanation of the parameters for the example engine built for this tutorial: * The first parameter is the reference node which in this case would be node number 0. * The second parameter is the back node of the prop which in this case is node number 5. * The third parameter is the first blades tip node number, in this case node 1. * The fourth parameter is the second blades tip node number, in this case node 2. * The fifth parameter is the third blades tip node number, in this case node 3. * The sixth parameter is the fourth blades tip node number, in this case node 4. * The seventh parameter is the amount of power of the engine, in this case 3000.0. * The eighth parameter is the airfoil that the props will use, in this case \"Clark-Y.alf\". Example turboprops section: turboprops ;ref, back, p1, p2, p3, p4, power, propfoil 0,5,1,2,3,4, 3000.0, Clark-Y.afl Pistonprops section \u00b6 The pistonprops section is pretty much the same as the turboprops section only with 2 more parameters and different sounds in-game. The first parameter is the reference node which in this case would be node number 0. The second parameter is the back node of the prop which in this case is node number 5. The third parameter is the first blades tip node number, in this case node 1. The fourth parameter is the second blades tip node number, in this case node 2. The fifth parameter is the third blades tip node number, in this case node 3. The sixth parameter is the fourth blades tip node number, in this case node 4. The seventh parameter is the couple node, which in the example is not used so it is set to -1. Also from my searching the couple node parameter was never documented so I don't know what its purpose is. The eighth parameter is the amount of power of the engine, in this case 3000.0. The ninth parameter is the pitch of the prop, in this case it is set to -10 The tenth parameter is the airfoil that the props will use, in this case \"Clark-Y.alf\". pistonprops ;ref, back, p1, p2, p3, p4, couplenode, power, pitch, propfoil 0,5,1,2,3,4, -1, 3000.0, -10, Clark-Y.afl Set_beam_defaults \u00b6 Its quite possible that you will have to use set_beam_defaults to make it so that your engine doesn't explode once you have it spinning. First I would try with out using set_beam_defaults and if the engines explode when spinning I would add set_beam_defaults to the engines beams and raise the deform and break values until you can run the engine at full throttle with out it breaking. The settings that this example uses may be a bit extreme but you get the idea. set_beam_defaults to start out with when raising the deform and break values: ; spring, damping, deform, break, set_beam_defaults -1, -1, 400000, 1000000, set_beam_defaults that the example engine uses: ; spring, damping, deform, break, set_beam_defaults -1, -1, 2000000, 3000000, Fusedrag \u00b6 A fuse drag can be used for a couple of things. It can be used to make a vehicle more aerodynamic to make the top speed improve. The fusedrag section can help improve modelling of the aerodynamic drag of a plane. It can model the fuselage of a plane like a big wing section, with an airfoil. An example of a symmetrical airfoil is something like NACA0009.afl I'm going to show you improvements a fusedrag can do to a vehicles top speed. An example I'm going to use the Dodge Police. The max speed without wheel spin was about 41 mph. Now let's add a fusedrag and see what happens. To add a fuse drag just find two nodes. Here is what needs to be defined: Number of the front-most node of the fuselage: First Node Number of the rear-most node of the fuselage: Second Node Approximate width of the fuselage: ie: 4.0 (You can use and width you want.) Airfoil name: (Default NACA0009.afl) Here's an example of what i added in the .truck file. fusedrag 10, 11, 4.0, NACA0009.afl I got an result, the speed improved by 31mph so if you want more speed add a fusedrag.","title":"Aircraft and aerodynamics"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#aircraft-and-aerodynamics","text":"","title":"Aircraft and aerodynamics"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#wings","text":"Wings in RoR are a little bit of magic. They introduce aerodynamic effects onto planes, boats, and trucks. Although propulsion engines (motors, props, screws) cannot be combined, wings can be added to any sort of vehicle to provide aerodynamic force.","title":"Wings"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#introduction","text":"The wing section declares parts of the chassis as wings, and that they should bear aerodynamic forces. Each line of this section designs a '''wing segment''', that is a homogeneous part of a wing. You can (and you should!) make a plane's wing from several contiguous wing segments. Rudder and elevators are also made with one or more wing segments. Each wing segment is bounded by 8 nodes, that defines the \"bounding box\" of the wing, specifically its span, chord and thickness. You must ensure that these nodes are properly interconnected by beams to ensure the structural integrity of the wing. '''Notice that it is VERY IMPORTANT to declare contiguous wing segments''' (i.e. that shares nodes) IN SEQUENTIAL ORDER FROM RIGHT TO LEFT, and you should avoid cutting a wing in two at the fuselage, but make the whole wing continuous across the fuselage because it helps to compute whole-wing effects like induced drag and other things like wing lights. A very important aerodynamic parameter is the wing airfoil. The airfoil is the tear-like shape of the wing, and its exact geometry is very important for the characteristics and performances of real-world wings. RoR uses precomputed performances curves from standard airfoils, interpolated from wing tunnel tests. These curves are stored in .afl files.","title":"Introduction"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#airfoils","text":"Standard airfoils provided in RoR are: * NACA64.1.412 - actual airfoil of the wing tip of the Hercules C-130 * NACA64.3.618 - similar airfoil to the wing root of the Hercules C-130 * NACA0009 - standard symmetrical airfoil, good for rudder and elevators * Clark-Y - used for propellers, but is also very popular for main wings You can get more airfoil from the popular X-Plane flight simulator. RoR is compatible with X-Plane .afl, but you must convert their end-of-line style from MacOS to Windows using an advanced text editor, or RoR will crash.","title":"Airfoils"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#example-wing","text":"Here's an example: And the corresponding wings section : wings ;right wing ;1 6,8,5,7,12,10,11,9, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, n, 1.0, 0, 0, NACA64.1.412.afl ;2 4,6,3,5,14,12,13,11, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, a, 0.75, -24, 24, NACA64.1.412.afl ;3 2,4,1,3,16,14,15,13, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, n, 1.0, 0, 0, NACA64.1.412.afl ;left wing ;4 18,2,17,1,28,16,27,15, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, n, 1.0, 0, 0, NACA64.1.412.afl ;5 20,18,19,17,26,28,25,27, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, b, 0.75, -24, 24, NACA64.1.412.afl ;6 22,20,21,19,24,26,23,25, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, n, 1.0, 0, 0, NACA64.1.412.afl","title":"Example Wing"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#air-brakes","text":"(Version 0.35 or later) An air brake is a moving panel used to slow down an airplane. It is positioned similarly to a \"props\", with noderef, nodex, nodey, nodea, offsetx, offsety, offsetz The airbrake needs 4 nodes (noderef, nodex, nodey, nodea) to position it. pick 4 nodes that form a square or rectangle at the position you want your airbrake. This picture shows a basic airbrake setup, you can see the offsetx, and offsety in red move the airbrake back and forth along that direction. Offset Z will move it up and down vertically (in this case). It takes time to position a airbrake just right. Make one adjustment at a time and see what the change did in game before you make another. The 4 nodes you choose will determine the direction your airbrake points. If the airbrake is backwards, swap the noderef, nodex, nodey, nodea around until it points the way you want. Width and length control how long or wide the airbrake is. Simply adjust these numbers until the airbrake is the size you want. Max angle is the maximum angle the airbrake will lift when fully engaged. Then comes two texture coordinates that texture the airbrake using your vehicles texture pic. Air brakes can easily be added to a wing box, just set noderef, nodex, nodey and nodea as the four upper nodes of a wing box. Example: airbrakes ; noderef, nodex, nodey, nodea, offsetx, offsety, offsetz, width, length, max angle, texcord x1, texcoord y1, texcoord x2, texcoord y2 95, 105, 113, 125, 0.2, 0.0, 0.0, 2.0, 3.0, 60.0, 0.044, 0.205, 0.124, 0.146","title":"Air Brakes"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#propeller-engines","text":"To add a propeller engine to your creation, first you need to make the node and beam part of the engine (its the same for either type of engine, turboprop or pistonprop). You start off by making a diamond shape with one node in the middle, like so: Make sure that all the nodes are evenly placed so that when they're spinning at high RPM's they won't get out of balance. (You can get them spot on in the editorizer if you use the \"snap nodes to grid\" option). Now you need to add another node in the center of that diamond but this one needs to be a bit behind the first middle node. Like so: now just connect all the nodes together with beams but make sure you only connect the diamonds four outer edge nodes (in this case nodes 1,2,3 and 4) to each other to make an out line and then to the 2 middle nodes. Its important that this is done so that they can rotate smoothly. The nodes that you would use to attach the engine node/beam assembly to the rest of the planes chassis would be the two middle nodes (in this case nodes 0 and 5). Now that you have the node and beam part of the engine done you can move on to the truck file code part of the engine. == Props section requirements == First we will take care of the \"props\" section. '''Note: it is important that you have the \"props\" section ''BEFORE'' the turboprops or pistonprops section.''' The first thing that you want to add to the props section is the \"spinprop.mesh\" this is what makes the turboprops/pistonprops work. When placing this mesh its important how the nodes that you place it on are oriented, for this test model that I'm making it would have ref node: 0, X node: 1, Y node: 5 this way when the engine is spinning the propeller mesh (ie pale.mesh) will be oriented right. for example if I switch X and Y around so X was 5 and Y was 1 the propellers would appear to spin at a 90 degree angle compared to the way the node/beam engine was really spinning. Also you need one \"spinprop.mesh\" for each engine you have. Example props section for \"spinprop.mesh\": props ;ref,x,y,offsetx,offsety,offsetz,rotx,roty,rotz,mesh 0,1,5, 0.0, 0.0, 0.0, 0, 0, 0, spinprop.mesh The next thing we need to add to the props section is the propellers mesh. Its the same as for the \"spinprop.mesh\" you just need one for every visible propeller you want. By looking at the picture and the example props section below it should be fairly easy to figure out. Example props section with propellers mesh's: props ;ref,x,y,offsetx,offsety,offsetz,rotx,roty,rotz,mesh ;First propellers mesh 0,5,1, 0.0, 0.0, 0.0, 180, 0, 90, pale.mesh ;Second propellers mesh 0,5,2, 0.0, 0.0, 0.0, 180, 0, 90, pale.mesh ;Third propellers mesh 0,5,3, 0.0, 0.0, 0.0, 180, 0, 90, pale.mesh ;Fourth propellers mesh 0,5,4, 0.0, 0.0, 0.0, 180, 0, 90, pale.mesh","title":"Propeller engines"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#turboprops-section","text":"Now that you have everything done in the props section we can move on to the turboprops section. The turboprops section has 8 parameters they are: * 1. Reference node number (center of the prop) * 2. Prop axis node number (back of the prop) * 3. Blade 1 tip node number * 4. Blade 2 tip node number * 5. Blade 3 tip node number * 6. Blade 4 tip node number * 7. Power of the turbine (in kW) * 8. Airfoil of the blades Explanation of the parameters for the example engine built for this tutorial: * The first parameter is the reference node which in this case would be node number 0. * The second parameter is the back node of the prop which in this case is node number 5. * The third parameter is the first blades tip node number, in this case node 1. * The fourth parameter is the second blades tip node number, in this case node 2. * The fifth parameter is the third blades tip node number, in this case node 3. * The sixth parameter is the fourth blades tip node number, in this case node 4. * The seventh parameter is the amount of power of the engine, in this case 3000.0. * The eighth parameter is the airfoil that the props will use, in this case \"Clark-Y.alf\". Example turboprops section: turboprops ;ref, back, p1, p2, p3, p4, power, propfoil 0,5,1,2,3,4, 3000.0, Clark-Y.afl","title":"Turboprops section"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#pistonprops-section","text":"The pistonprops section is pretty much the same as the turboprops section only with 2 more parameters and different sounds in-game. The first parameter is the reference node which in this case would be node number 0. The second parameter is the back node of the prop which in this case is node number 5. The third parameter is the first blades tip node number, in this case node 1. The fourth parameter is the second blades tip node number, in this case node 2. The fifth parameter is the third blades tip node number, in this case node 3. The sixth parameter is the fourth blades tip node number, in this case node 4. The seventh parameter is the couple node, which in the example is not used so it is set to -1. Also from my searching the couple node parameter was never documented so I don't know what its purpose is. The eighth parameter is the amount of power of the engine, in this case 3000.0. The ninth parameter is the pitch of the prop, in this case it is set to -10 The tenth parameter is the airfoil that the props will use, in this case \"Clark-Y.alf\". pistonprops ;ref, back, p1, p2, p3, p4, couplenode, power, pitch, propfoil 0,5,1,2,3,4, -1, 3000.0, -10, Clark-Y.afl","title":"Pistonprops section"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#set_beam_defaults","text":"Its quite possible that you will have to use set_beam_defaults to make it so that your engine doesn't explode once you have it spinning. First I would try with out using set_beam_defaults and if the engines explode when spinning I would add set_beam_defaults to the engines beams and raise the deform and break values until you can run the engine at full throttle with out it breaking. The settings that this example uses may be a bit extreme but you get the idea. set_beam_defaults to start out with when raising the deform and break values: ; spring, damping, deform, break, set_beam_defaults -1, -1, 400000, 1000000, set_beam_defaults that the example engine uses: ; spring, damping, deform, break, set_beam_defaults -1, -1, 2000000, 3000000,","title":"Set_beam_defaults"},{"location":"vehicle-creation/aircraft-and-aerodynamics/#fusedrag","text":"A fuse drag can be used for a couple of things. It can be used to make a vehicle more aerodynamic to make the top speed improve. The fusedrag section can help improve modelling of the aerodynamic drag of a plane. It can model the fuselage of a plane like a big wing section, with an airfoil. An example of a symmetrical airfoil is something like NACA0009.afl I'm going to show you improvements a fusedrag can do to a vehicles top speed. An example I'm going to use the Dodge Police. The max speed without wheel spin was about 41 mph. Now let's add a fusedrag and see what happens. To add a fuse drag just find two nodes. Here is what needs to be defined: Number of the front-most node of the fuselage: First Node Number of the rear-most node of the fuselage: Second Node Approximate width of the fuselage: ie: 4.0 (You can use and width you want.) Airfoil name: (Default NACA0009.afl) Here's an example of what i added in the .truck file. fusedrag 10, 11, 4.0, NACA0009.afl I got an result, the speed improved by 31mph so if you want more speed add a fusedrag.","title":"Fusedrag"},{"location":"vehicle-creation/alternate-skins/","text":"Making alternate skins \u00b6 This page serves as an overview page on how to create and modify custom skins. Step-by-step guide \u00b6 Step 1 - GUID \u00b6 Skins are matched against vehicles via GUID (Globally-Unique-IDentifier). Make sure the vehicle you want to skin has one: Truck file format - GUID Ideally, all vehicles should have one. You might need to regen the cache, so the GUID will be in the cache as well. It is recommended to generate a GUID using this site . Step 2 - the .skin file \u00b6 Create a file named \"MySkinName.skin\" (replace MySkinName with any string without spaces) with the following content: Sarens Skin for Sennebogen 5500 { replaceTexture = blansjaar41.jpg, blansjaar41_sarens.jpg preview = 9c15cccf8a8dca392b84b7b778e3517139cef287.png description = sarens skin for the sennebogen 5500 authorName = Rotexx AuthorID = 39570 GUID = 90670430-695d-467b-8c91-dcb67a42633c } this skin was made by Rotexx whose Author ID is 39570 . The preview image for the skin is 9c15cccf8a8dca392b84b7b778e3517139cef287.png . There are 2 ways how to replace the original vehicle graphics with yours: Image substitution - The simple one, you name an existing texture file and a replacement file. In this example, 'blansjaar41.jpg' is replaced with 'blansjaar41_sarens.jpg'. This only works with managedmaterials . Material substitution - More complex, you need to know the .material file format of OGRE3D engine. For an example, see the \"antonov\" tutorial below. The principle is the same - you name the original material and then the new, replacement material. Step 3 - the package \u00b6 Put all the files into a zip archive named \"sarens.skinzip\" and put that into the packs folder (NOT .skinzip.zip, just .skinzip). The .skinzip is important, as it will force RoR to always load this zip to parse the skin information from it. Step 4 - the game \u00b6 Start the game and select the truck, it should have a valid GUID in the selection menu. When pressing enter, the skin selection GUI will be displayed. Skin file reference \u00b6 Sarens Skin for Sennebogen 5500 { // this is a comment line, it is ignored when parsing. It always starts with // // replaceTexture = <original_texture.png> <skin_texture.png> replaceTexture = blansjaar41.jpg, blansjaar41_sarens.jpg replaceTexture = blansjaarkleur.jpg, blansjaarkleur_sarens.jpg replaceTexture = blansjaarlogo5500.jpg, blansjaarlogo5500_sarens.jpg // preview = <preview_image.png> preview = 9c15cccf8a8dca392b84b7b778e3517139cef287.png // description = text that will show in the selectionWindow description = sarens skin for the sennebogen 5500 // AuthorName = <author name, no special characters> authorName = Rotexx // AuthorID = <forum ID of the author> AuthorID = 39570 // GUID = <of the truck to which this skin fits> GUID = 90670430-695d-467b-8c91-dcb67a42633c } replaceTexture - Defines the texture replacements, its first argument is the original texture name, the second argument is the texture name of the skin. Please note that those must be different, or you will get a file collision. You can use this line as much as you like. As noted earlier, this only works with managedmaterials . preview - The \"mini\" image that will appear on the skin selector window. description - A short description of the skin. authorName - Your username. AuthorID - Your forum ID. To get your ID, view your forum profile and check the number shown in the URL. For example: https://forum.rigsofrods.org/members/curiousmike.5831/ 5831 would be the ID. GUID - The GUID that matches the GUID in the .truck file. See Step 1 - GUID . Replacing OGRE Materials (.material) \u00b6 If your vehicle uses a .material file for its textures, you will have to use replaceMaterial instead of replaceTexture . So for an example we will just do this now for the an-12.airplane. Step 1 - The material \u00b6 Copy the existing material file ( 5822UID-an-12.material ) and change the material and texture name(s), like so: material 5822UID-tracks/An12-Green { technique { pass { scene_blend alpha_blend alpha_rejection greater 128 texture_unit { texture 5822UID-an-12-green.dds } } } } Step 2 - The .skin file \u00b6 To find out the original material name, open the An-12's zip file, open the .airplane file then find the globals section and note down the third argument: 5822UID-tracks/An12 Then create a simple .skin file to describe the skin: Antonov 12 - Green Skin { // The substitution: old material name, new material name replaceMaterial = 5822UID-tracks/An12, 5822UID-tracks/An12-Green // Preview image. Should be at least 256x256 pixels. preview = an-12-green-skin-mini.png // Short description description = Green skin for the An-12 // Name of the author, optional AuthorName = Yourname // Forum ID of the author, optional AuthorID = 1 // GUID (globally unique identifier), REQUIRED! GUID = ...GUID, see above... } This will replace the old material name (take the names from step 1) with the new material (from step 3) If you want to replace more than one materials (for example for the props or anything else, just add lines with the correct format. Step 3 - Packaging \u00b6 Like above - package your skin files to .skinzip, and enjoy it ingame! More examples \u00b6 An example skin that replaces materials: 1982 DI Sportster Scheme: HotWheels Challenge HotWheels Challenge Livery { replaceTexture = SportsCarUV.png, SportsCarUV_HWChallenge.png replaceTexture = 308Wheel.png, 308Wheel_HWChallenge.png replaceTexture = 308Wheel_S.png, 308Wheel_HWChallenge_S.png replaceTexture = SportsCarMudflaps.png, SportsCarMudflaps_HWChallenge.png replaceTexture = RallyLightsUV.png, RallyLightsUV_HWChallenge.png replaceTexture = Sports_Wing_Red.png, Sports_Wing_HWChallenge.png replaceTexture = SportsLeather.png, SportsLeather_Black.png replaceTexture = SportsPlastic.png, SportsPlastic_HWChallenge.png replaceTexture = PlasticSpec.png, PlasticSpec_HWChallenge.png replaceMaterial = Sports_Speedo, Sports_Speedo_HW replaceMaterial = Sports_Oil, Sports_Oil_HW replaceMaterial = Sports_Glow_Blue, Sports_Glow_HW replaceMaterial = Sports_Tacho, Sports_Tacho_HW replaceMaterial = Sports_Needle, Sports_Needle_HW preview = HotWheels_Challenge_Mini.png description = HotWheels Challenge Scheme (Based on a particularly hot Ferrari 360 Modena...) authorName = ShawnVallance AuthorID = 5201995 GUID = DI_SPORTSCAR_GUID }","title":"Alternate skins (skinzips)"},{"location":"vehicle-creation/alternate-skins/#making-alternate-skins","text":"This page serves as an overview page on how to create and modify custom skins.","title":"Making alternate skins"},{"location":"vehicle-creation/alternate-skins/#step-by-step-guide","text":"","title":"Step-by-step guide"},{"location":"vehicle-creation/alternate-skins/#step-1-guid","text":"Skins are matched against vehicles via GUID (Globally-Unique-IDentifier). Make sure the vehicle you want to skin has one: Truck file format - GUID Ideally, all vehicles should have one. You might need to regen the cache, so the GUID will be in the cache as well. It is recommended to generate a GUID using this site .","title":"Step 1 - GUID"},{"location":"vehicle-creation/alternate-skins/#step-2-the-skin-file","text":"Create a file named \"MySkinName.skin\" (replace MySkinName with any string without spaces) with the following content: Sarens Skin for Sennebogen 5500 { replaceTexture = blansjaar41.jpg, blansjaar41_sarens.jpg preview = 9c15cccf8a8dca392b84b7b778e3517139cef287.png description = sarens skin for the sennebogen 5500 authorName = Rotexx AuthorID = 39570 GUID = 90670430-695d-467b-8c91-dcb67a42633c } this skin was made by Rotexx whose Author ID is 39570 . The preview image for the skin is 9c15cccf8a8dca392b84b7b778e3517139cef287.png . There are 2 ways how to replace the original vehicle graphics with yours: Image substitution - The simple one, you name an existing texture file and a replacement file. In this example, 'blansjaar41.jpg' is replaced with 'blansjaar41_sarens.jpg'. This only works with managedmaterials . Material substitution - More complex, you need to know the .material file format of OGRE3D engine. For an example, see the \"antonov\" tutorial below. The principle is the same - you name the original material and then the new, replacement material.","title":"Step 2 - the .skin file"},{"location":"vehicle-creation/alternate-skins/#step-3-the-package","text":"Put all the files into a zip archive named \"sarens.skinzip\" and put that into the packs folder (NOT .skinzip.zip, just .skinzip). The .skinzip is important, as it will force RoR to always load this zip to parse the skin information from it.","title":"Step 3 - the package"},{"location":"vehicle-creation/alternate-skins/#step-4-the-game","text":"Start the game and select the truck, it should have a valid GUID in the selection menu. When pressing enter, the skin selection GUI will be displayed.","title":"Step 4 - the game"},{"location":"vehicle-creation/alternate-skins/#skin-file-reference","text":"Sarens Skin for Sennebogen 5500 { // this is a comment line, it is ignored when parsing. It always starts with // // replaceTexture = <original_texture.png> <skin_texture.png> replaceTexture = blansjaar41.jpg, blansjaar41_sarens.jpg replaceTexture = blansjaarkleur.jpg, blansjaarkleur_sarens.jpg replaceTexture = blansjaarlogo5500.jpg, blansjaarlogo5500_sarens.jpg // preview = <preview_image.png> preview = 9c15cccf8a8dca392b84b7b778e3517139cef287.png // description = text that will show in the selectionWindow description = sarens skin for the sennebogen 5500 // AuthorName = <author name, no special characters> authorName = Rotexx // AuthorID = <forum ID of the author> AuthorID = 39570 // GUID = <of the truck to which this skin fits> GUID = 90670430-695d-467b-8c91-dcb67a42633c } replaceTexture - Defines the texture replacements, its first argument is the original texture name, the second argument is the texture name of the skin. Please note that those must be different, or you will get a file collision. You can use this line as much as you like. As noted earlier, this only works with managedmaterials . preview - The \"mini\" image that will appear on the skin selector window. description - A short description of the skin. authorName - Your username. AuthorID - Your forum ID. To get your ID, view your forum profile and check the number shown in the URL. For example: https://forum.rigsofrods.org/members/curiousmike.5831/ 5831 would be the ID. GUID - The GUID that matches the GUID in the .truck file. See Step 1 - GUID .","title":"Skin file reference"},{"location":"vehicle-creation/alternate-skins/#replacing-ogre-materials-material","text":"If your vehicle uses a .material file for its textures, you will have to use replaceMaterial instead of replaceTexture . So for an example we will just do this now for the an-12.airplane.","title":"Replacing OGRE Materials (.material)"},{"location":"vehicle-creation/alternate-skins/#step-1-the-material","text":"Copy the existing material file ( 5822UID-an-12.material ) and change the material and texture name(s), like so: material 5822UID-tracks/An12-Green { technique { pass { scene_blend alpha_blend alpha_rejection greater 128 texture_unit { texture 5822UID-an-12-green.dds } } } }","title":"Step 1 - The material"},{"location":"vehicle-creation/alternate-skins/#step-2-the-skin-file_1","text":"To find out the original material name, open the An-12's zip file, open the .airplane file then find the globals section and note down the third argument: 5822UID-tracks/An12 Then create a simple .skin file to describe the skin: Antonov 12 - Green Skin { // The substitution: old material name, new material name replaceMaterial = 5822UID-tracks/An12, 5822UID-tracks/An12-Green // Preview image. Should be at least 256x256 pixels. preview = an-12-green-skin-mini.png // Short description description = Green skin for the An-12 // Name of the author, optional AuthorName = Yourname // Forum ID of the author, optional AuthorID = 1 // GUID (globally unique identifier), REQUIRED! GUID = ...GUID, see above... } This will replace the old material name (take the names from step 1) with the new material (from step 3) If you want to replace more than one materials (for example for the props or anything else, just add lines with the correct format.","title":"Step 2 - The .skin file"},{"location":"vehicle-creation/alternate-skins/#step-3-packaging","text":"Like above - package your skin files to .skinzip, and enjoy it ingame!","title":"Step 3 - Packaging"},{"location":"vehicle-creation/alternate-skins/#more-examples","text":"An example skin that replaces materials: 1982 DI Sportster Scheme: HotWheels Challenge HotWheels Challenge Livery { replaceTexture = SportsCarUV.png, SportsCarUV_HWChallenge.png replaceTexture = 308Wheel.png, 308Wheel_HWChallenge.png replaceTexture = 308Wheel_S.png, 308Wheel_HWChallenge_S.png replaceTexture = SportsCarMudflaps.png, SportsCarMudflaps_HWChallenge.png replaceTexture = RallyLightsUV.png, RallyLightsUV_HWChallenge.png replaceTexture = Sports_Wing_Red.png, Sports_Wing_HWChallenge.png replaceTexture = SportsLeather.png, SportsLeather_Black.png replaceTexture = SportsPlastic.png, SportsPlastic_HWChallenge.png replaceTexture = PlasticSpec.png, PlasticSpec_HWChallenge.png replaceMaterial = Sports_Speedo, Sports_Speedo_HW replaceMaterial = Sports_Oil, Sports_Oil_HW replaceMaterial = Sports_Glow_Blue, Sports_Glow_HW replaceMaterial = Sports_Tacho, Sports_Tacho_HW replaceMaterial = Sports_Needle, Sports_Needle_HW preview = HotWheels_Challenge_Mini.png description = HotWheels Challenge Scheme (Based on a particularly hot Ferrari 360 Modena...) authorName = ShawnVallance AuthorID = 5201995 GUID = DI_SPORTSCAR_GUID }","title":"More examples"},{"location":"vehicle-creation/boats/","text":"Boats \u00b6 Making a buoyant hull \u00b6 Step1: What you have to do is make a simple boat hull shape out of nodes. You can make many different shaped hulls, they will affect the performance of the boat. Try your best to use the least amount of nodes as possible, For a typical hull, you should use from 10-30 nodes at the most. Step2: When you finish your softbody, you need to submesh it. Submeshing it will allow the boat to float, instead of sinking. Step3: try it out ingame. It should float nicely. If it sinks, then there is a hole in the hull of the boat. Once you find your mistake, it will float. Adding an engine, i.e. \"screwprop\" \u00b6 Step1: To create a chassis, or setup for the screwprop, you must have 3 nodes in a triangular shape and stabilizing it with beams, The picture illustrates the setup. Please imagine the box is actually a boat-hull :) Step2: You should enter the \"screwprops\" section into your .boat file. then, you can have your own sea exploration! :-) screwprops ; prop node, back node, top node, power 3, 1, 2, 100000.0","title":"Boats"},{"location":"vehicle-creation/boats/#boats","text":"","title":"Boats"},{"location":"vehicle-creation/boats/#making-a-buoyant-hull","text":"Step1: What you have to do is make a simple boat hull shape out of nodes. You can make many different shaped hulls, they will affect the performance of the boat. Try your best to use the least amount of nodes as possible, For a typical hull, you should use from 10-30 nodes at the most. Step2: When you finish your softbody, you need to submesh it. Submeshing it will allow the boat to float, instead of sinking. Step3: try it out ingame. It should float nicely. If it sinks, then there is a hole in the hull of the boat. Once you find your mistake, it will float.","title":"Making a buoyant hull"},{"location":"vehicle-creation/boats/#adding-an-engine-ie-screwprop","text":"Step1: To create a chassis, or setup for the screwprop, you must have 3 nodes in a triangular shape and stabilizing it with beams, The picture illustrates the setup. Please imagine the box is actually a boat-hull :) Step2: You should enter the \"screwprops\" section into your .boat file. then, you can have your own sea exploration! :-) screwprops ; prop node, back node, top node, power 3, 1, 2, 100000.0","title":"Adding an engine, i.e. \"screwprop\""},{"location":"vehicle-creation/engine/","text":"Engine \u00b6 The engine sections are used for vehicles which are driven through their wheels (trucks). Together, they specify the type of engine being used (truck or car), the power of that engine and the gear ratios for the truck This section specifies torque, gearing and RPM ranges of the engine being used. Settings \u00b6 See fileformat-truck#engine for reference manual. Torque \u00b6 Tuning torque in RoR is a tricky topic, since the current air resistance simulation is overstrong. Setting torque to provide realistic acceleration at low speeds results in severely stunted top speeds. Setting it to provide higher top speeds results in very strong acceleration. Engine Inertia also has a VERY important role in engine behavior since this value also determines how fast a vehicle can accelerate Differential ratio \u00b6 Differential ratio represents gear reduction ratio between input pinion gear and the ring gear of the differential. This parameter acts as global gear conversion ratio. It means that if, lets say first gear has ratio 13.86 and differential ratio is 2.0 , actual first gear reduction is 27.72 (2.0 * 13.86) . If you are using real gearbox parameters, bear this in mind and look for real differential ratios too. Gear ratios \u00b6 Gear ratios of forward gears. For every turn of the wheel must engine turn this many times (not counting the differential ratio). When setting various gear ratios, try to make smaller difference between higher gears. Please note that in sample gear setting the difference (ratio) between first and second gear is approx. 45%, but difference between the fifth and sixth gear is about 19%. This allows smoother gearbox performance. There must be between 3 and 15 forward gears. The last gear must be followed by a -1 value. More information \u00b6 A great source of practical gear ratios is from Eaton Fuller . To see the ratios, click the name of the transmission and find Product Specifications Guide . If your vehicle decelerates in a gear you may not have enough power, or too high a gear. NOTE: the value of this site is unknown. RoR's poor air resistance simulation probably invalidates the use of any real life gear ratios: It's always best to make sure a truck can sensibly use all the gears it has. If you know a little about vehicles there is a Gear Ratio Guide , but a decent knowledge of transmissions, transfer cases, underdrives and correct rear end gears is highly recommended. Engoption \u00b6 This optional section allows the user to specify whether the engine is for a car or heavy truck and the engine inertia of the vehicle. Settings \u00b6 See fileformat-truck#engoption for reference manual. Engine Inertia \u00b6 The default game value is 10.0 , which is correct for a large diesel engine, Use higher values to make engines accelerate more slowly and stall more difficultly, which may be useful for vehicles towing large masses. This value should be lowered for smaller, light engines (Is the multiplier different for car and truck engines?) With a high value of inertia the engines RPM is not likely to change when resistance is met. As an example, when changing gears a high inertia will cause the wheels to slip, while a lower value will cause the engine RPM to change and prevent the wheels from slipping. However, with a low inertia and a high brake value, the engine will stall more easily since the brakes can change the RPMs more easily. If your engine doesn't change its RPM's during gear change, your engine inertia is too high. If a vehicle is feeling sluggish, and hard to brake, it is better to decrease the inertia than increase the brake force, and torque. Engine Type \u00b6 Using c for cars or t for trucks specifies characteristics of the engines. Car engines use a different sound to truck engines and have no turbocharger. They also have less inertia by default. (t) is the default. Torque Curve \u00b6 This section allows you to define a torque curve for your vehicle. It is optional. This allows you to assign predefined torque curves or your own custom curves to a truck. Predefined options are: default , diesel , turbodiesel , gas , turbogas , wheelloader , compacttractor , tractor , hydrostatic . Predefined Curve Example: torquecurve turbogas The first number is RPM where the power begins, and the second defines power as a percent of total torque. It's suitable to define the torque to the engine RPM set in the engine definition plus 25% ( multiply the value with 1.25) to get the overrev area defined. The following example would be good for a maximum engine RPM set to 2800 . Custom curve example: torquecurve 0,0 1000,0.79 1500,0.9 2000,0.97 2500,0.99 3000,0.9 3500,0.77 Engine dying in idle and first gear? Just define a single higher peak value where you want the engine to idle..like adding: ... 700, 0.2 800, 0.6 900, 0.4 ... To the example above in the right spot will result the engine idle a little bit higher then 800 rpm in first gear. The example to the left shows a screenshot of a torquercurve made for a small diesel engine: Idle: ~600 RPM Max: 1900 RPM Slight and constant torque increase over the used RPM bandwidth, hard torque dropoff in the overrev area.","title":"Engine"},{"location":"vehicle-creation/engine/#engine","text":"The engine sections are used for vehicles which are driven through their wheels (trucks). Together, they specify the type of engine being used (truck or car), the power of that engine and the gear ratios for the truck This section specifies torque, gearing and RPM ranges of the engine being used.","title":"Engine"},{"location":"vehicle-creation/engine/#settings","text":"See fileformat-truck#engine for reference manual.","title":"Settings"},{"location":"vehicle-creation/engine/#torque","text":"Tuning torque in RoR is a tricky topic, since the current air resistance simulation is overstrong. Setting torque to provide realistic acceleration at low speeds results in severely stunted top speeds. Setting it to provide higher top speeds results in very strong acceleration. Engine Inertia also has a VERY important role in engine behavior since this value also determines how fast a vehicle can accelerate","title":"Torque"},{"location":"vehicle-creation/engine/#differential-ratio","text":"Differential ratio represents gear reduction ratio between input pinion gear and the ring gear of the differential. This parameter acts as global gear conversion ratio. It means that if, lets say first gear has ratio 13.86 and differential ratio is 2.0 , actual first gear reduction is 27.72 (2.0 * 13.86) . If you are using real gearbox parameters, bear this in mind and look for real differential ratios too.","title":"Differential ratio"},{"location":"vehicle-creation/engine/#gear-ratios","text":"Gear ratios of forward gears. For every turn of the wheel must engine turn this many times (not counting the differential ratio). When setting various gear ratios, try to make smaller difference between higher gears. Please note that in sample gear setting the difference (ratio) between first and second gear is approx. 45%, but difference between the fifth and sixth gear is about 19%. This allows smoother gearbox performance. There must be between 3 and 15 forward gears. The last gear must be followed by a -1 value.","title":"Gear ratios"},{"location":"vehicle-creation/engine/#more-information","text":"A great source of practical gear ratios is from Eaton Fuller . To see the ratios, click the name of the transmission and find Product Specifications Guide . If your vehicle decelerates in a gear you may not have enough power, or too high a gear. NOTE: the value of this site is unknown. RoR's poor air resistance simulation probably invalidates the use of any real life gear ratios: It's always best to make sure a truck can sensibly use all the gears it has. If you know a little about vehicles there is a Gear Ratio Guide , but a decent knowledge of transmissions, transfer cases, underdrives and correct rear end gears is highly recommended.","title":"More information"},{"location":"vehicle-creation/engine/#engoption","text":"This optional section allows the user to specify whether the engine is for a car or heavy truck and the engine inertia of the vehicle.","title":"Engoption"},{"location":"vehicle-creation/engine/#settings_1","text":"See fileformat-truck#engoption for reference manual.","title":"Settings"},{"location":"vehicle-creation/engine/#engine-inertia","text":"The default game value is 10.0 , which is correct for a large diesel engine, Use higher values to make engines accelerate more slowly and stall more difficultly, which may be useful for vehicles towing large masses. This value should be lowered for smaller, light engines (Is the multiplier different for car and truck engines?) With a high value of inertia the engines RPM is not likely to change when resistance is met. As an example, when changing gears a high inertia will cause the wheels to slip, while a lower value will cause the engine RPM to change and prevent the wheels from slipping. However, with a low inertia and a high brake value, the engine will stall more easily since the brakes can change the RPMs more easily. If your engine doesn't change its RPM's during gear change, your engine inertia is too high. If a vehicle is feeling sluggish, and hard to brake, it is better to decrease the inertia than increase the brake force, and torque.","title":"Engine Inertia"},{"location":"vehicle-creation/engine/#engine-type","text":"Using c for cars or t for trucks specifies characteristics of the engines. Car engines use a different sound to truck engines and have no turbocharger. They also have less inertia by default. (t) is the default.","title":"Engine Type"},{"location":"vehicle-creation/engine/#torque-curve","text":"This section allows you to define a torque curve for your vehicle. It is optional. This allows you to assign predefined torque curves or your own custom curves to a truck. Predefined options are: default , diesel , turbodiesel , gas , turbogas , wheelloader , compacttractor , tractor , hydrostatic . Predefined Curve Example: torquecurve turbogas The first number is RPM where the power begins, and the second defines power as a percent of total torque. It's suitable to define the torque to the engine RPM set in the engine definition plus 25% ( multiply the value with 1.25) to get the overrev area defined. The following example would be good for a maximum engine RPM set to 2800 . Custom curve example: torquecurve 0,0 1000,0.79 1500,0.9 2000,0.97 2500,0.99 3000,0.9 3500,0.77 Engine dying in idle and first gear? Just define a single higher peak value where you want the engine to idle..like adding: ... 700, 0.2 800, 0.6 900, 0.4 ... To the example above in the right spot will result the engine idle a little bit higher then 800 rpm in first gear. The example to the left shows a screenshot of a torquercurve made for a small diesel engine: Idle: ~600 RPM Max: 1900 RPM Slight and constant torque increase over the used RPM bandwidth, hard torque dropoff in the overrev area.","title":"Torque Curve"},{"location":"vehicle-creation/fileformat-soundscript/","text":"Soundscript file reference \u00b6 This format is text-based and files must have the extension \".soundscript\". Each soundscript file can contain the description of many sound scripts. Each sound script defines how to play one or many audio files in the context of the vehicle where it is used (using the soundsources section ). A sound script is defined by a line with his name (which is the name you use in the soundsource section of your vehicle description file), then a set of curly braces enclosing parameters. Parameters \u00b6 Sources \u00b6 Sources define which vehicle events or states will influence the sound. trigger_source \u00b6 This is the more important source, and it is mandatory. There can be only one trigger source. It will define how the sound will start and stop. Valid values are: Source Description always_on the sound will always play engine the sound will play as long as the car/truck/boat engine is running aeroengine1 to aeroengine8 the sound will play as long as the numbered propeller or jet engine is running afterburner1 to afterburner8 same for afterburners horn the horn brake the brake pedal pump the hydraulic pump starter the engine starter ignition the ignition switch repair when the truck is repaired air active air suspension activation air_purge compressed air purge shift shifting gears gear_slide gearbox torture creak structural creaking break beam breaking screetch wheel screetching on tarmac parking_brake parking brake aoa_horn Stall horn (AOA above 18 degree) gpws_ap_disconnect Autopilot disconnect gpws_10 10 feet warning gpws_20 20 feet warning gpws_30 30 feet warning gpws_40 40 feet warning gpws_50 50 feet warning gpws_100 100 feet warning gpws_pull_up woop woop pull up! gpws_minimums Minimums! pitch_source \u00b6 A pitch source will alter the pitch of the played sounds (if they are pitchable). There can be only one pitch source. Valid pitch sources are: Name Description none this is the default, no pitch modulation, with a reference value of 1.0 engine_rpm engine revolutions per minute turbo_rpm turbo revolutions per minute aeroengine1_rpm to aeroengine8_rpm propeller revolutions per minute, or jet engine speed in percent aeroengine1_throttle to aeroengine8_throttle throttle setting of the propeller or jet engine wheel_speed_kmph wheel speed in kilometer per hour air_speed_knots air speed in knots angle_of_attack_degree absolute value of the angle of attack in degree (for airplanes only) injector_ratio how much fuel is injected into the engine (from 0.0 to 1.0) torque_nm output torque of engine in Newton.Meter gearbox_rpm gearbox output speed in RPM creak structural creaking effort break beam breaking effort screetch wheel screetch intensity pump_rpm hydraulic pump RPM gain_source \u00b6 A gain source will alter the gain of the played sounds (how loud it is heard). There can be only one gain source. Valid gain sources are the same as for pitch sources. Modifiers \u00b6 Modifiers will take output value from the pitch or gain sources, and apply to it a polynomial equation (up to degree 2) to alter the value to match the intended effect. Both modifiers take two or three parameter values (they can be negative value): An offset (default 0.0) A multiplicative factor (default 1.0) An optional square factor (default 0.0) The equation is : output = offset + mult_factor x source + square_factor x source x source pitch_factors \u00b6 The parameter pitch_factors alters the pitch source. It is optional. gain_factors \u00b6 The parameter gain_factors alters the gain source. It is optional. The output value of the gain modifier is clamped to the interval from 0.0 to 1.0 before being applied to the sounds. Sounds \u00b6 These parameters define the WAV sound files used by the soundscript. All sounds parameters takes two parameters : a reference pitch value : this is the \"true\" pitch value corresponding to the recorded sound. For example, if you record an engine at 100 RPM, the resulting sound will have a reference pitch value of 100, and will be correctly pitched by the source engine RPM (as long as the units match, if not, use the modifiers). You can also use the keyword \"unpitched\" to say that this sound shall never be pitched. a WAV file name. This WAV file MUST be mono, and exported as 16-bit PCM with no metadata. start_sound \u00b6 This sound is optional and is played only once at the start of the trigger. There can be only one start sound. sound \u00b6 This sound is optional and played in a loop as long as the trigger holds. There can be many sounds defined. If there are many sounds with different reference pitches, the sounds will be mixed together to obtain the best blend of sounds for a given source pitch. This allows the \"texture\" of sound to change depending on pitch. stop sound \u00b6 This sound is optional and is played only once at the end of the trigger. There can be only one end sound. Examples \u00b6 Note that you can compose sound scripts by playing several scripts at the same time (with the same trigger). In the following, the full diesel engine sound is composed of the 3 first sound scripts played together. tracks/default_diesel { trigger_source engine pitch_source engine_rpm sound 750.0 default_diesel_idle.wav sound 849.0 default_diesel_low.wav sound 1035.0 default_diesel_medium.wav sound 1455.0 default_diesel_high.wav } tracks/default_force { trigger_source engine gain_source injector_ratio gain_factors 0.0 0.5 sound unpitched default_diesel_force.wav } tracks/default_turbo { trigger_source engine pitch_source turbo_rpm gain_source turbo_rpm gain_factors 0.0 0.0 1.852E-12 sound 100000.0 default_turbo.wav } tracks/default_starter { trigger_source starter start_sound unpitched default_starter_start.wav sound unpitched default_starter.wav stop_sound unpitched default_starter_stop.wav } tracks/default_pump { trigger_source pump pitch_source pump_rpm start_sound 660.0 default_pump_start.wav sound 660.0 default_pump.wav stop_sound 660.0 default_pump_stop.wav } tracks/default_brakes { trigger_source brake stop_sound unpitched default_brakes.wav } tracks/default_parkbrakes { trigger_source parking_brake start_sound unpitched default_parking_brakes.wav } Default \u00b6 These are the default soundscripts for RoR. It is divided into sections according to engine type. Engine (Diesel) \u00b6 tracks/default_diesel { trigger_source engine pitch_source engine_rpm sound 750.0 default_diesel_idle.wav sound 849.0 default_diesel_low.wav sound 1035.0 default_diesel_medium.wav sound 1455.0 default_diesel_high.wav } tracks/default_force { trigger_source engine gain_source injector_ratio gain_factors 0.0 0.5 sound unpitched default_diesel_force.wav } tracks/default_starter { trigger_source starter start_sound unpitched default_starter_start.wav sound unpitched default_starter.wav stop_sound unpitched default_starter_stop.wav } tracks/default_turbo { trigger_source engine pitch_source turbo_rpm gain_source turbo_rpm gain_factors 0.0 0.0 1.852E-12 sound 100000.0 default_turbo.wav } tracks/default_air_purge { trigger_source air_purge sound unpitched default_valve.wav } tracks/default_horn { trigger_source horn start_sound unpitched default_horn_start.wav sound unpitched default_horn.wav stop_sound unpitched default_horn_stop.wav } tracks/default_pump { trigger_source pump pitch_source pump_rpm start_sound 660.0 default_pump_start.wav sound 660.0 default_pump.wav stop_sound 660.0 default_pump_stop.wav } tracks/default_screetch { trigger_source screetch gain_source screetch sound unpitched default_screetch.wav } tracks/default_brakes { trigger_source brake stop_sound unpitched default_brakes.wav } tracks/default_parkbrakes { trigger_source parking_brake start_sound unpitched default_parking_brakes.wav } tracks/default_air { trigger_source air sound unpitched default_air.wav } tracks/default_shift { trigger_source shift start_sound unpitched default_shift.wav } tracks/default_break { trigger_source break pitch_source break pitch_factors 1.0 1.0 start_sound 1.0 default_break.wav } tracks/default_creak { trigger_source creak pitch_source creak pitch_factors 1.0 0.2 gain_source creak gain_factors 0.3 1.0 start_sound 1.0 default_creak.wav } tracks/default_gear_slide { trigger_source gear_slide start_sound unpitched default_gear_slide.wav } tracks/default_reverse_beep { trigger_source reverse_gear sound unpitched default_reverse_beep.wav } tracks/default_turn_signal { trigger_source turn_signal sound unpitched default_turn_signal.wav } Engine (Gasoline) \u00b6 tracks/default_car { trigger_source engine pitch_source engine_rpm gain_source injector_ratio gain_factors 0.5 0.5 sound 1500 default_car_idle.wav } tracks/default_starter { trigger_source starter start_sound unpitched default_starter_start.wav sound unpitched default_starter.wav stop_sound unpitched default_starter_stop.wav } tracks/default_horn { trigger_source horn start_sound unpitched default_horn_start.wav sound unpitched default_horn.wav stop_sound unpitched default_horn_stop.wav } tracks/default_pump { trigger_source pump pitch_source pump_rpm start_sound 660.0 default_pump_start.wav sound 660.0 default_pump.wav stop_sound 660.0 default_pump_stop.wav } tracks/default_police { trigger_source horn sound unpitched default_police.wav } tracks/default_screetch { trigger_source screetch gain_source screetch sound unpitched default_screetch.wav } tracks/default_shift { trigger_source shift start_sound unpitched default_shift.wav } tracks/default_break { trigger_source break pitch_source break pitch_factors 1.0 1.0 start_sound 1.0 default_break.wav } tracks/default_creak { trigger_source creak pitch_source creak pitch_factors 1.0 0.2 gain_source creak gain_factors 0.3 1.0 start_sound 1.0 default_creak.wav } tracks/default_gear_slide { trigger_source gear_slide start_sound unpitched default_gear_slide.wav } tracks/default_turn_signal { trigger_source turn_signal sound unpitched default_turn_signal.wav } Airplane (Prop) \u00b6 tracks/default_turboprop_start1 { trigger_source aeroengine1 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower1 { trigger_source always_on pitch_source aeroengine1_rpm gain_source aeroengine1_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower1 { trigger_source aeroengine1 pitch_source aeroengine1_rpm gain_source aeroengine1_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start2 { trigger_source aeroengine2 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower2 { trigger_source always_on pitch_source aeroengine2_rpm gain_source aeroengine2_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower2 { trigger_source aeroengine2 pitch_source aeroengine2_rpm gain_source aeroengine2_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start3 { trigger_source aeroengine3 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower3 { trigger_source always_on pitch_source aeroengine3_rpm gain_source aeroengine3_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower3 { trigger_source aeroengine3 pitch_source aeroengine3_rpm gain_source aeroengine3_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start4 { trigger_source aeroengine4 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower4 { trigger_source always_on pitch_source aeroengine4_rpm gain_source aeroengine4_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower4 { trigger_source aeroengine4 pitch_source aeroengine4_rpm gain_source aeroengine4_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start5 { trigger_source aeroengine5 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower5 { trigger_source always_on pitch_source aeroengine5_rpm gain_source aeroengine5_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower5 { trigger_source aeroengine5 pitch_source aeroengine5_rpm gain_source aeroengine5_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start6 { trigger_source aeroengine6 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower6 { trigger_source always_on pitch_source aeroengine6_rpm gain_source aeroengine6_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower6 { trigger_source aeroengine6 pitch_source aeroengine6_rpm gain_source aeroengine6_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start7 { trigger_source aeroengine7 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower7 { trigger_source always_on pitch_source aeroengine7_rpm gain_source aeroengine7_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower7 { trigger_source aeroengine7 pitch_source aeroengine7_rpm gain_source aeroengine7_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start8 { trigger_source aeroengine8 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower8 { trigger_source always_on pitch_source aeroengine8_rpm gain_source aeroengine8_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower8 { trigger_source aeroengine8 pitch_source aeroengine8_rpm gain_source aeroengine8_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } Airplane (Jet) \u00b6 tracks/default_turbojet_start1 { trigger_source aeroengine1 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower1 { trigger_source always_on pitch_source aeroengine1_rpm gain_source aeroengine1_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower1 { trigger_source aeroengine1 gain_source aeroengine1_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner1 { trigger_source afterburner1 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start2 { trigger_source aeroengine2 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower2 { trigger_source always_on pitch_source aeroengine2_rpm gain_source aeroengine2_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower2 { trigger_source aeroengine2 gain_source aeroengine2_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner2 { trigger_source afterburner2 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start3 { trigger_source aeroengine3 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower3 { trigger_source always_on pitch_source aeroengine3_rpm gain_source aeroengine3_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower3 { trigger_source aeroengine3 gain_source aeroengine3_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner3 { trigger_source afterburner3 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start4 { trigger_source aeroengine4 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower4 { trigger_source always_on pitch_source aeroengine4_rpm gain_source aeroengine4_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower4 { trigger_source aeroengine4 gain_source aeroengine4_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner4 { trigger_source afterburner4 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start5 { trigger_source aeroengine5 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower5 { trigger_source always_on pitch_source aeroengine5_rpm gain_source aeroengine5_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower5 { trigger_source aeroengine5 gain_source aeroengine5_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner5 { trigger_source afterburner5 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start6 { trigger_source aeroengine6 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower6 { trigger_source always_on pitch_source aeroengine6_rpm gain_source aeroengine6_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower6 { trigger_source aeroengine6 gain_source aeroengine6_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner6 { trigger_source afterburner6 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start7 { trigger_source aeroengine7 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower7 { trigger_source always_on pitch_source aeroengine7_rpm gain_source aeroengine7_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower7 { trigger_source aeroengine7 gain_source aeroengine7_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner7 { trigger_source afterburner7 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start8 { trigger_source aeroengine8 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower8 { trigger_source always_on pitch_source aeroengine8_rpm gain_source aeroengine8_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower8 { trigger_source aeroengine8 gain_source aeroengine8_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner8 { trigger_source afterburner8 sound unpitched default_turbojet_afterburner.wav }</pre> ==== Airplane (Piston) ==== <pre>tracks/default_pistonprop_start1 { trigger_source aeroengine1 start_sound unpitched default_pistonprop_start.wav } tracks/default_pistonprop_lopower1 { trigger_source always_on pitch_source aeroengine1_rpm gain_source aeroengine1_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower1 { trigger_source aeroengine1 pitch_source aeroengine1_rpm gain_source aeroengine1_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_start2 { trigger_source aeroengine2 start_sound unpitched default_pistonprop_start.wav } tracks/default_pistonprop_lopower2 { trigger_source always_on pitch_source aeroengine2_rpm gain_source aeroengine2_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower2 { trigger_source aeroengine2 pitch_source aeroengine2_rpm gain_source aeroengine2_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_start3 { trigger_source aeroengine3 start_sound unpitched default_pistonprop_start.wav } tracks/default_pistonprop_lopower3 { trigger_source always_on pitch_source aeroengine3_rpm gain_source aeroengine3_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower3 { trigger_source aeroengine3 pitch_source aeroengine3_rpm gain_source aeroengine3_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_start4 { trigger_source aeroengine4 start_sound unpitched default_pistonprop_start.wav } tracks/default_pistonprop_lopower4 { trigger_source always_on pitch_source aeroengine4_rpm gain_source aeroengine4_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower4 { trigger_source aeroengine4 pitch_source aeroengine4_rpm gain_source aeroengine4_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_lopower5 { trigger_source always_on pitch_source aeroengine5_rpm gain_source aeroengine5_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower5 { trigger_source aeroengine5 pitch_source aeroengine5_rpm gain_source aeroengine5_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_lopower6 { trigger_source always_on pitch_source aeroengine6_rpm gain_source aeroengine6_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower6 { trigger_source aeroengine6 pitch_source aeroengine6_rpm gain_source aeroengine6_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_lopower7 { trigger_source always_on pitch_source aeroengine7_rpm gain_source aeroengine7_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower7 { trigger_source aeroengine7 pitch_source aeroengine7_rpm gain_source aeroengine7_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_lopower8 { trigger_source always_on pitch_source aeroengine8_rpm gain_source aeroengine8_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower8 { trigger_source aeroengine8 pitch_source aeroengine8_rpm gain_source aeroengine8_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } Marine (Large) \u00b6 tracks/default_marine_large { trigger_source engine pitch_source engine_rpm sound 100.0 default_marine_large.wav } Marine (Small) \u00b6 tracks/default_marine_small { trigger_source engine pitch_source engine_rpm sound 100.0 default_marine_small.wav }","title":"Soundscript file format"},{"location":"vehicle-creation/fileformat-soundscript/#soundscript-file-reference","text":"This format is text-based and files must have the extension \".soundscript\". Each soundscript file can contain the description of many sound scripts. Each sound script defines how to play one or many audio files in the context of the vehicle where it is used (using the soundsources section ). A sound script is defined by a line with his name (which is the name you use in the soundsource section of your vehicle description file), then a set of curly braces enclosing parameters.","title":"Soundscript file reference"},{"location":"vehicle-creation/fileformat-soundscript/#parameters","text":"","title":"Parameters"},{"location":"vehicle-creation/fileformat-soundscript/#sources","text":"Sources define which vehicle events or states will influence the sound.","title":"Sources"},{"location":"vehicle-creation/fileformat-soundscript/#trigger_source","text":"This is the more important source, and it is mandatory. There can be only one trigger source. It will define how the sound will start and stop. Valid values are: Source Description always_on the sound will always play engine the sound will play as long as the car/truck/boat engine is running aeroengine1 to aeroengine8 the sound will play as long as the numbered propeller or jet engine is running afterburner1 to afterburner8 same for afterburners horn the horn brake the brake pedal pump the hydraulic pump starter the engine starter ignition the ignition switch repair when the truck is repaired air active air suspension activation air_purge compressed air purge shift shifting gears gear_slide gearbox torture creak structural creaking break beam breaking screetch wheel screetching on tarmac parking_brake parking brake aoa_horn Stall horn (AOA above 18 degree) gpws_ap_disconnect Autopilot disconnect gpws_10 10 feet warning gpws_20 20 feet warning gpws_30 30 feet warning gpws_40 40 feet warning gpws_50 50 feet warning gpws_100 100 feet warning gpws_pull_up woop woop pull up! gpws_minimums Minimums!","title":"trigger_source"},{"location":"vehicle-creation/fileformat-soundscript/#pitch_source","text":"A pitch source will alter the pitch of the played sounds (if they are pitchable). There can be only one pitch source. Valid pitch sources are: Name Description none this is the default, no pitch modulation, with a reference value of 1.0 engine_rpm engine revolutions per minute turbo_rpm turbo revolutions per minute aeroengine1_rpm to aeroengine8_rpm propeller revolutions per minute, or jet engine speed in percent aeroengine1_throttle to aeroengine8_throttle throttle setting of the propeller or jet engine wheel_speed_kmph wheel speed in kilometer per hour air_speed_knots air speed in knots angle_of_attack_degree absolute value of the angle of attack in degree (for airplanes only) injector_ratio how much fuel is injected into the engine (from 0.0 to 1.0) torque_nm output torque of engine in Newton.Meter gearbox_rpm gearbox output speed in RPM creak structural creaking effort break beam breaking effort screetch wheel screetch intensity pump_rpm hydraulic pump RPM","title":"pitch_source"},{"location":"vehicle-creation/fileformat-soundscript/#gain_source","text":"A gain source will alter the gain of the played sounds (how loud it is heard). There can be only one gain source. Valid gain sources are the same as for pitch sources.","title":"gain_source"},{"location":"vehicle-creation/fileformat-soundscript/#modifiers","text":"Modifiers will take output value from the pitch or gain sources, and apply to it a polynomial equation (up to degree 2) to alter the value to match the intended effect. Both modifiers take two or three parameter values (they can be negative value): An offset (default 0.0) A multiplicative factor (default 1.0) An optional square factor (default 0.0) The equation is : output = offset + mult_factor x source + square_factor x source x source","title":"Modifiers"},{"location":"vehicle-creation/fileformat-soundscript/#pitch_factors","text":"The parameter pitch_factors alters the pitch source. It is optional.","title":"pitch_factors"},{"location":"vehicle-creation/fileformat-soundscript/#gain_factors","text":"The parameter gain_factors alters the gain source. It is optional. The output value of the gain modifier is clamped to the interval from 0.0 to 1.0 before being applied to the sounds.","title":"gain_factors"},{"location":"vehicle-creation/fileformat-soundscript/#sounds","text":"These parameters define the WAV sound files used by the soundscript. All sounds parameters takes two parameters : a reference pitch value : this is the \"true\" pitch value corresponding to the recorded sound. For example, if you record an engine at 100 RPM, the resulting sound will have a reference pitch value of 100, and will be correctly pitched by the source engine RPM (as long as the units match, if not, use the modifiers). You can also use the keyword \"unpitched\" to say that this sound shall never be pitched. a WAV file name. This WAV file MUST be mono, and exported as 16-bit PCM with no metadata.","title":"Sounds"},{"location":"vehicle-creation/fileformat-soundscript/#start_sound","text":"This sound is optional and is played only once at the start of the trigger. There can be only one start sound.","title":"start_sound"},{"location":"vehicle-creation/fileformat-soundscript/#sound","text":"This sound is optional and played in a loop as long as the trigger holds. There can be many sounds defined. If there are many sounds with different reference pitches, the sounds will be mixed together to obtain the best blend of sounds for a given source pitch. This allows the \"texture\" of sound to change depending on pitch.","title":"sound"},{"location":"vehicle-creation/fileformat-soundscript/#stop-sound","text":"This sound is optional and is played only once at the end of the trigger. There can be only one end sound.","title":"stop sound"},{"location":"vehicle-creation/fileformat-soundscript/#examples","text":"Note that you can compose sound scripts by playing several scripts at the same time (with the same trigger). In the following, the full diesel engine sound is composed of the 3 first sound scripts played together. tracks/default_diesel { trigger_source engine pitch_source engine_rpm sound 750.0 default_diesel_idle.wav sound 849.0 default_diesel_low.wav sound 1035.0 default_diesel_medium.wav sound 1455.0 default_diesel_high.wav } tracks/default_force { trigger_source engine gain_source injector_ratio gain_factors 0.0 0.5 sound unpitched default_diesel_force.wav } tracks/default_turbo { trigger_source engine pitch_source turbo_rpm gain_source turbo_rpm gain_factors 0.0 0.0 1.852E-12 sound 100000.0 default_turbo.wav } tracks/default_starter { trigger_source starter start_sound unpitched default_starter_start.wav sound unpitched default_starter.wav stop_sound unpitched default_starter_stop.wav } tracks/default_pump { trigger_source pump pitch_source pump_rpm start_sound 660.0 default_pump_start.wav sound 660.0 default_pump.wav stop_sound 660.0 default_pump_stop.wav } tracks/default_brakes { trigger_source brake stop_sound unpitched default_brakes.wav } tracks/default_parkbrakes { trigger_source parking_brake start_sound unpitched default_parking_brakes.wav }","title":"Examples"},{"location":"vehicle-creation/fileformat-soundscript/#default","text":"These are the default soundscripts for RoR. It is divided into sections according to engine type.","title":"Default"},{"location":"vehicle-creation/fileformat-soundscript/#engine-diesel","text":"tracks/default_diesel { trigger_source engine pitch_source engine_rpm sound 750.0 default_diesel_idle.wav sound 849.0 default_diesel_low.wav sound 1035.0 default_diesel_medium.wav sound 1455.0 default_diesel_high.wav } tracks/default_force { trigger_source engine gain_source injector_ratio gain_factors 0.0 0.5 sound unpitched default_diesel_force.wav } tracks/default_starter { trigger_source starter start_sound unpitched default_starter_start.wav sound unpitched default_starter.wav stop_sound unpitched default_starter_stop.wav } tracks/default_turbo { trigger_source engine pitch_source turbo_rpm gain_source turbo_rpm gain_factors 0.0 0.0 1.852E-12 sound 100000.0 default_turbo.wav } tracks/default_air_purge { trigger_source air_purge sound unpitched default_valve.wav } tracks/default_horn { trigger_source horn start_sound unpitched default_horn_start.wav sound unpitched default_horn.wav stop_sound unpitched default_horn_stop.wav } tracks/default_pump { trigger_source pump pitch_source pump_rpm start_sound 660.0 default_pump_start.wav sound 660.0 default_pump.wav stop_sound 660.0 default_pump_stop.wav } tracks/default_screetch { trigger_source screetch gain_source screetch sound unpitched default_screetch.wav } tracks/default_brakes { trigger_source brake stop_sound unpitched default_brakes.wav } tracks/default_parkbrakes { trigger_source parking_brake start_sound unpitched default_parking_brakes.wav } tracks/default_air { trigger_source air sound unpitched default_air.wav } tracks/default_shift { trigger_source shift start_sound unpitched default_shift.wav } tracks/default_break { trigger_source break pitch_source break pitch_factors 1.0 1.0 start_sound 1.0 default_break.wav } tracks/default_creak { trigger_source creak pitch_source creak pitch_factors 1.0 0.2 gain_source creak gain_factors 0.3 1.0 start_sound 1.0 default_creak.wav } tracks/default_gear_slide { trigger_source gear_slide start_sound unpitched default_gear_slide.wav } tracks/default_reverse_beep { trigger_source reverse_gear sound unpitched default_reverse_beep.wav } tracks/default_turn_signal { trigger_source turn_signal sound unpitched default_turn_signal.wav }","title":"Engine (Diesel)"},{"location":"vehicle-creation/fileformat-soundscript/#engine-gasoline","text":"tracks/default_car { trigger_source engine pitch_source engine_rpm gain_source injector_ratio gain_factors 0.5 0.5 sound 1500 default_car_idle.wav } tracks/default_starter { trigger_source starter start_sound unpitched default_starter_start.wav sound unpitched default_starter.wav stop_sound unpitched default_starter_stop.wav } tracks/default_horn { trigger_source horn start_sound unpitched default_horn_start.wav sound unpitched default_horn.wav stop_sound unpitched default_horn_stop.wav } tracks/default_pump { trigger_source pump pitch_source pump_rpm start_sound 660.0 default_pump_start.wav sound 660.0 default_pump.wav stop_sound 660.0 default_pump_stop.wav } tracks/default_police { trigger_source horn sound unpitched default_police.wav } tracks/default_screetch { trigger_source screetch gain_source screetch sound unpitched default_screetch.wav } tracks/default_shift { trigger_source shift start_sound unpitched default_shift.wav } tracks/default_break { trigger_source break pitch_source break pitch_factors 1.0 1.0 start_sound 1.0 default_break.wav } tracks/default_creak { trigger_source creak pitch_source creak pitch_factors 1.0 0.2 gain_source creak gain_factors 0.3 1.0 start_sound 1.0 default_creak.wav } tracks/default_gear_slide { trigger_source gear_slide start_sound unpitched default_gear_slide.wav } tracks/default_turn_signal { trigger_source turn_signal sound unpitched default_turn_signal.wav }","title":"Engine (Gasoline)"},{"location":"vehicle-creation/fileformat-soundscript/#airplane-prop","text":"tracks/default_turboprop_start1 { trigger_source aeroengine1 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower1 { trigger_source always_on pitch_source aeroengine1_rpm gain_source aeroengine1_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower1 { trigger_source aeroengine1 pitch_source aeroengine1_rpm gain_source aeroengine1_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start2 { trigger_source aeroengine2 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower2 { trigger_source always_on pitch_source aeroengine2_rpm gain_source aeroengine2_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower2 { trigger_source aeroengine2 pitch_source aeroengine2_rpm gain_source aeroengine2_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start3 { trigger_source aeroengine3 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower3 { trigger_source always_on pitch_source aeroengine3_rpm gain_source aeroengine3_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower3 { trigger_source aeroengine3 pitch_source aeroengine3_rpm gain_source aeroengine3_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start4 { trigger_source aeroengine4 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower4 { trigger_source always_on pitch_source aeroengine4_rpm gain_source aeroengine4_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower4 { trigger_source aeroengine4 pitch_source aeroengine4_rpm gain_source aeroengine4_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start5 { trigger_source aeroengine5 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower5 { trigger_source always_on pitch_source aeroengine5_rpm gain_source aeroengine5_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower5 { trigger_source aeroengine5 pitch_source aeroengine5_rpm gain_source aeroengine5_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start6 { trigger_source aeroengine6 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower6 { trigger_source always_on pitch_source aeroengine6_rpm gain_source aeroengine6_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower6 { trigger_source aeroengine6 pitch_source aeroengine6_rpm gain_source aeroengine6_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start7 { trigger_source aeroengine7 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower7 { trigger_source always_on pitch_source aeroengine7_rpm gain_source aeroengine7_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower7 { trigger_source aeroengine7 pitch_source aeroengine7_rpm gain_source aeroengine7_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav } tracks/default_turboprop_start8 { trigger_source aeroengine8 start_sound unpitched default_turboprop_start.wav } tracks/default_turboprop_lopower8 { trigger_source always_on pitch_source aeroengine8_rpm gain_source aeroengine8_throttle gain_factors 0.5 0.5 sound 1000.0 default_turboprop_lopower.wav } tracks/default_turboprop_hipower8 { trigger_source aeroengine8 pitch_source aeroengine8_rpm gain_source aeroengine8_throttle gain_factors -0.5 1.0 sound 1000.0 default_turboprop_hipower.wav }","title":"Airplane (Prop)"},{"location":"vehicle-creation/fileformat-soundscript/#airplane-jet","text":"tracks/default_turbojet_start1 { trigger_source aeroengine1 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower1 { trigger_source always_on pitch_source aeroengine1_rpm gain_source aeroengine1_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower1 { trigger_source aeroengine1 gain_source aeroengine1_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner1 { trigger_source afterburner1 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start2 { trigger_source aeroengine2 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower2 { trigger_source always_on pitch_source aeroengine2_rpm gain_source aeroengine2_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower2 { trigger_source aeroengine2 gain_source aeroengine2_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner2 { trigger_source afterburner2 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start3 { trigger_source aeroengine3 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower3 { trigger_source always_on pitch_source aeroengine3_rpm gain_source aeroengine3_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower3 { trigger_source aeroengine3 gain_source aeroengine3_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner3 { trigger_source afterburner3 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start4 { trigger_source aeroengine4 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower4 { trigger_source always_on pitch_source aeroengine4_rpm gain_source aeroengine4_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower4 { trigger_source aeroengine4 gain_source aeroengine4_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner4 { trigger_source afterburner4 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start5 { trigger_source aeroengine5 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower5 { trigger_source always_on pitch_source aeroengine5_rpm gain_source aeroengine5_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower5 { trigger_source aeroengine5 gain_source aeroengine5_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner5 { trigger_source afterburner5 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start6 { trigger_source aeroengine6 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower6 { trigger_source always_on pitch_source aeroengine6_rpm gain_source aeroengine6_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower6 { trigger_source aeroengine6 gain_source aeroengine6_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner6 { trigger_source afterburner6 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start7 { trigger_source aeroengine7 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower7 { trigger_source always_on pitch_source aeroengine7_rpm gain_source aeroengine7_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower7 { trigger_source aeroengine7 gain_source aeroengine7_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner7 { trigger_source afterburner7 sound unpitched default_turbojet_afterburner.wav } tracks/default_turbojet_start8 { trigger_source aeroengine8 start_sound unpitched default_turbojet_start.wav } tracks/default_turbojet_lopower8 { trigger_source always_on pitch_source aeroengine8_rpm gain_source aeroengine8_rpm gain_factors 2.0 -0.02 sound 25.0 default_turbojet_lopower.wav } tracks/default_turbojet_hipower8 { trigger_source aeroengine8 gain_source aeroengine8_rpm gain_factors -0.30 0.013 sound unpitched default_turbojet_hipower.wav } tracks/default_turbojet_afterburner8 { trigger_source afterburner8 sound unpitched default_turbojet_afterburner.wav }</pre> ==== Airplane (Piston) ==== <pre>tracks/default_pistonprop_start1 { trigger_source aeroengine1 start_sound unpitched default_pistonprop_start.wav } tracks/default_pistonprop_lopower1 { trigger_source always_on pitch_source aeroengine1_rpm gain_source aeroengine1_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower1 { trigger_source aeroengine1 pitch_source aeroengine1_rpm gain_source aeroengine1_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_start2 { trigger_source aeroengine2 start_sound unpitched default_pistonprop_start.wav } tracks/default_pistonprop_lopower2 { trigger_source always_on pitch_source aeroengine2_rpm gain_source aeroengine2_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower2 { trigger_source aeroengine2 pitch_source aeroengine2_rpm gain_source aeroengine2_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_start3 { trigger_source aeroengine3 start_sound unpitched default_pistonprop_start.wav } tracks/default_pistonprop_lopower3 { trigger_source always_on pitch_source aeroengine3_rpm gain_source aeroengine3_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower3 { trigger_source aeroengine3 pitch_source aeroengine3_rpm gain_source aeroengine3_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_start4 { trigger_source aeroengine4 start_sound unpitched default_pistonprop_start.wav } tracks/default_pistonprop_lopower4 { trigger_source always_on pitch_source aeroengine4_rpm gain_source aeroengine4_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower4 { trigger_source aeroengine4 pitch_source aeroengine4_rpm gain_source aeroengine4_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_lopower5 { trigger_source always_on pitch_source aeroengine5_rpm gain_source aeroengine5_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower5 { trigger_source aeroengine5 pitch_source aeroengine5_rpm gain_source aeroengine5_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_lopower6 { trigger_source always_on pitch_source aeroengine6_rpm gain_source aeroengine6_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower6 { trigger_source aeroengine6 pitch_source aeroengine6_rpm gain_source aeroengine6_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_lopower7 { trigger_source always_on pitch_source aeroengine7_rpm gain_source aeroengine7_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower7 { trigger_source aeroengine7 pitch_source aeroengine7_rpm gain_source aeroengine7_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav } tracks/default_pistonprop_lopower8 { trigger_source always_on pitch_source aeroengine8_rpm gain_source aeroengine8_throttle gain_factors 0.5 0.5 sound 1000.0 default_pistonprop_lopower.wav } tracks/default_pistonprop_hipower8 { trigger_source aeroengine8 pitch_source aeroengine8_rpm gain_source aeroengine8_throttle gain_factors -0.5 1.0 sound 1000.0 default_pistonprop_hipower.wav }","title":"Airplane (Jet)"},{"location":"vehicle-creation/fileformat-soundscript/#marine-large","text":"tracks/default_marine_large { trigger_source engine pitch_source engine_rpm sound 100.0 default_marine_large.wav }","title":"Marine (Large)"},{"location":"vehicle-creation/fileformat-soundscript/#marine-small","text":"tracks/default_marine_small { trigger_source engine pitch_source engine_rpm sound 100.0 default_marine_small.wav }","title":"Marine (Small)"},{"location":"vehicle-creation/fileformat-truck/","text":"Truck file format \u00b6 \"Truck\" is a text-based file format which defines all physically simulated objects in the game, be it vehicles of any kind, machinery, loads or any other things. The name is historical - Rigs of Rods was originally a heavy truck simulator, other kinds of vehicles came later. Recognized filename extensions for this format are: .truck , .car , .boat , .airplane , .train , .machine , .trailer , .load , .fixed . Note the extension is only informative, the actual type of object is determined by file contents. The truckfile is divided into sections, each with defined purpose. Except the title, every section starts with a keyword. Order of sections matters (for example: cinecams requires beams). Comment lines can be inserted by putting ; or // at the beginning of the line. Building Philosophy \u00b6 See Vehicle Concepts to understand the building philosophy. I recommend using the following method for construction: Draw the blueprint of your truck on a piece drawing paper; mark the nodes, and write their number (starting with zero). Edit your truck file; put the title, globals, engine, cameras, nodes, and beams sections in. Run the game to see how it goes. If you forget some beams the truck will fold on itself! When the chassis seems to work well; add wheels, suspension, hydros, etc; And then test drive. When the truck is all working; do the bodywork and texture, and mark most beams as invisible (displaying too many beams has a large performance impact) Is It a Truck, Plane, Train or Boat? \u00b6 Before we start, let's ask an important question: Is it a truck, plane, train, or boat? Or what makes a truck a truck and a plane a plane and a train a train, or a boat a boat? Simple: A truck is a description file containing an engine section A plane is a description file containing a turboprops , turbojets , or pistonprops section A boat is a description file containing a screwprops section A train is a vehicle that drives on a rail (see Building rail vehicles ) Also, notice that: You should not combine more than one propulsion (eg have both an engine and a turboprops section in the same file) If you have no propulsion, then you are making a load, and the file extension should be .load You can have a wings section on a truck or a boat (e.g. to add aerodynamic spoilers for stability). You should have a fusedrag section on a plane to have a better aerodynamic modeling. A boat needs to have a hull which is defined in the submesh section. Light Cars \u00b6 Here a few recommendations for those who want to build a light car : RoR is optimized for heavy trucks, so you have to use some extra sections that help you create a realistic car: Use engoptions to reduce the engine inertia and set the engine type to c Use brakes to reduce braking force Use and abuse set_beam_defaults to soften the car body, or it will be too strong and springy, i.e. almost indestructible. Experiment with the engine section to use higher RPM and correct gear ratios. Lighten the wheels as much as possible. This is not very easy as they become unstable. Reducing the spring and damping of the wheels helps a lot. Suggested values for 100kg wheels: spring 150000 and damping 1000 . Use the dashboard-small.mesh prop as a dashboard. (unless you have a custom dashboard you want to use.) Documentation style guide \u00b6 Every keyword (directive, inline-section or section) which has parameters should have them listed in this manner: Required parameter : Data type ; default = VALUE ; Explanatory text. Example required parameter : Real number ; default = -1.0 ; Parameters are written as shown, followed by a colon. The data type should be easy to understand for a human, not technically accurate. Another required parameter : Positive decimal ; The \"default\" text can be omitted if the parameter has no default. The \"data type\" field should always be followed by semicolon. Optional parameter (optional) : Data type ; default = VALUE ; Optional parameters have \"(optional)\" text after them. Alternatively, the parameter list may be split into \"Required parameters\" list, followed by \"Optional parameters\" list, see 'flares'. Required nullable parameter (nullable) : Data type ; Empty value = -1 ; Parameters which must be entered but can contain \"empty value\" are described (nullable) and have \"Empty value\" section. New parameter (optional) : [ Version 0.4+ ] Data type ; Parameters with version requirements have a [ Version ] box. Options (optional) : String , default = none Options are enumerated as sub-list. a : What this option does. b : Another option c or C : Case insensitive option. Required Sections \u00b6 The game will not run without these sections. Every one of these sections must be present for a vehicle to work in the game! Title \u00b6 This is the only section not introduced by a keyword. It is the name of the truck, and it absolutely positively must be the first line of the file. My nice truck Globals \u00b6 This section defines some global parameters. Those parameters are: dry mass - Real number ; The weight RoR will try to give the truck (affected by minimum node weight, see below). Weight is measured in kilograms. (For you people in non-metric countries, a kilogram is 2.2 pounds.) Load mass - Real number ; Total mass of all nodes marked with the option \"l\". Material name - String ; The name of the material that will be used to texture the truck's submesh. This material must be defined in a separate material file. globals ;dry mass, cargo mass, material 10000.0, 1000.0, tracks/semi Nodes \u00b6 This section begins the structural definition of the vehicle. Each line defines a node. Node number : Positive decimal number ; The first parameter is the node number. These numbers must be consecutive. Important: Do NOT use node 0 for any moving stuff like propellers, commands etc. It's the reference for some calculations in RoR and should be part of the rigid frame of your truck. X position (in meters) : Real number ; Node's X coordinate. Y position (in meters) : Real number ; Node's Y coordinate. Z position (in meters) : Real number ; Node's Z coordinate. Options (optional) : String ; default = none ; Node options. You can combine multiple flags. n : This node can be grabbed with the mouse. (Standard node) m [ Version 0.39.07+ ] : This node can't be grabbed with the mouse. (Useful for switching levers with the mouse.) f : This node will not produce sparks. (Useful for support feet or hand made wheels.) x : This node is the exhaust point. (requires a \"y\" node) (see the exhausts section) y : The exhaust reference point. This node should be placed opposite of the direction that you want the exhaust to come from. c : This node will not detect contact with ground. (Can be used for optimization on inner chassis parts, for instance.) h : This node is a hook point. (Like the hook on a crane, or a winch, or whatever.) RoR will create a beam between this Node and Node#0. If this is Node#0, it will link it to Node#1 (even if it isn't defined yet). e : This node is a terrain editing point (Like in the terrain editor truck. Not used as of version 0.4.0+) b : This node is assigned an extra buoyancy force (Experimental!) p [ Version 0.36.3+ ] : Disables particle effects for this node (Like dust.) L [ Version 0.36.3+ ] : Enables node settings logging into the ror.log for this node l : This node bears a part of the cargo load Load mass (in Kilograms) (optional, needs l flag) : Real number ; Overrides the load mass for this node. Only valid if used with l option. Please note that the load-nodes where you specify the mass explicitly are not calculated with the global load mass. So if you specify a custom mass on any load, you will also increase the mass on all other nodes if you do not decrease the global mass. NOTE: You can put a comment at the end of a node-line. nodes ;id, x, y, z, options ;main chassis 0, 0.00, 0.75, 0.66 1, 0.00, 0.75, 1.84 2, 0.63, 0.75, 0.66 3, 0.63, 0.36, 0.66, l 4, 0.63, 0.75, 1.84 5, 0.63, 0.36, 1.84, n 6, 1.48, 0.75, 0.66, l 7, 1.48, 0.00, 0.66 8, 1.48, 0.75, 1.84, c 9, 1.48, 0.00, 1.84, x 10, 2.33, 0.75, 0.66, y 11, 2.33, 0.00, 0.66 This section supports multiple options as argument. If you want a f and b node together you could write something like this: nodes 11, 2.33, 0.00, 0.66, fb This setting will set the node mass to 2000 kilograms: nodes 14, 1.36, 0.00, 1.97, l 2000 This setting will set the node as non-contactable and set the mass to 2000 kilograms: nodes 14, 1.36, 0.00, 1.97, cl 2000 You can debug your truck's node masses by enabling Debug actor mass in settings: Look into your RoR.log after spawning and you could see something like this: Node 0 : 3662 kg Node 1 : 1730 kg ... Node 13 : 1180 kg (normal load node: 6000 kg / 6 nodes) Node 14 : 1180 kg (normal load node: 6000 kg / 6 nodes) ... Node 136 : 5026 kg (overridden by node mass) Node 141 mass (20kg) too light. Resetting to minimass (50kg). ... TOTAL VEHICLE MASS: 32399 kg You can set any option property, loadweight, friction, volume, and surface-coefficients as default with set_node_defaults . Nodes2 \u00b6 Nodes2 use the same syntax as nodes, except the first argument can be any string instead of a number. After using a name for a node in the nodes2 section, you can use it for any node parsing throughout the rest of the file. valid characters for the string: a-z,A-Z,0-9, _ For example: nodes2 ; name, x, y, z, options ; main chassis 0, 0.00, 0.75, 0.66 1, 0.00, 0.75, 1.84 special_node, 0.63, 0.75, 0.66 3, 0.63, 0.36, 0.66,l 4, 0.63, 0.75, 1.84 another_one, 0.63, 0.36, 1.84 hook_node, 1.48, 0.75, 0.66,lh 50 We advise to use the following scheme for naming the nodes: function_section_name So for example a rear hook node could look like this: hook_rear_hook1 There is also a fallback in place which will resolve named nodes to normal node numbers. For example if you convert an existing truck to named nodes (nodes2) and don't want to replace all occurrences, just leave the numbers there, it will take them up as classic node numbers. Things to keep in mind: Transition from nodes to nodes2 is easy: just replace nodes with nodes2 , the numbers will act as the name strings Transition from nodes2 to nodes is impossible, since nodes rely on the linear numbering of nodes Only use node names without any special characters or spaces (only a-z, A-Z, 0-9, _, -) You don't need to convert all nodes to nodes2 with names, if a nodes2 named node is not found, it will fallback to using the number as classic node. Beams \u00b6 This section defines all the beams connecting nodes. Each line describes a beam. node_A : Node ID ; Connected node node_B : Node ID ; Connected node options (optional) : String ; default = empty v : Dummy option, does nothing. Beams are visible by default. i : This beam is invisible. r : This beam is a rope (no resistance to compression, but will deform/break when expanded) s : This beam is a support beam (no resistance to expansion, but will deform/break when compressed). Support beams have 1/10 th of the damping of the last set_beam_defaults setting extension_break_limit (optional) : Positive real number ; default = 4 * original length ; Only valid with option \" s \" TIP: Support beams are very useful for limiting movement of body panels like trunks, hoods, and doors from going inside the car while still allowing rotation without costly and complicated collisions. Default expansion break length is . User set break length factor is optional. Valid factors are > 0.0. . beams ;node1, node2, options 0, 1 2, 4 3, 5, i 6, 8, i 7, 9 10, 12, i 11, 13, i ; support beam, default extension break limit 11, 23, s ; visible support beam, user set extension break limit original spawn length * 12.5 11, 24, s 12.5 This section supports multiple options as argument. If you want a 'i' and 'r' node together you could write something like this: ;invisible rope 11, 13, ir ; invisible support beam, default extension break limit 11, 25, is ; invisible support beam, user set extension break limit original spawn length * 25 11, 26, si 25.0 Cameras \u00b6 This section is important. It helps to position the truck in space, by defining a local direction reference. This is used to measure the pitch and the roll of the truck. It is also very important to orient the truck's cameras. The three parameters are node numbers. The first is the reference node and may be anywhere. The second must be behind the first (if you look at the front of the truck, it is hidden behind the first). The third must be at the left of the first (if you look to the right of the truck, it is hidden by the first). Correct relative placement of these nodes is important, or it may break the inside camera view. cameras ;center, back, left 0, 2, 1 Cinecam \u00b6 This defines the position of the in-truck camera. It is a special node suspended from eight chassis nodes. Required parameters: X,Y,Z position (in meters) : Real numbers ; Coordinates of the camera point. 8 node bindings : Node ID ; Nodes to which the camera point is bound. Optional parameters: beam spring : Real number ; Default=8000 beam damping : Real number ; Default=800 node weight (Kg) : Real number ; [ Version 2020.01+ ] Weight of the camera point. Default=20Kg Example: cinecam ; x, y, z, <---------8 bindings--------->, Opt: spring, damping, node-weight 0.66, 2.0, 1.8, 75, 76, 77, 78, 73, 74, 53, 54, 8000.0, 800.0, 20.0 Note: If you have multiple cinecams, you also need to have multiple cameras . You can simply duplicate the line per cinecam. Example: cameras ;center, back, left 0, 2, 1 0, 2, 1 0, 2, 1 cinecam ; x, y, z, <---------8 bindings--------->, Opt: spring, damping, node-weight 0.66, 2.0, 1.8, 75, 76, 77, 78, 73, 74, 53, 54, 8000.0, 800.0, 20.0 0.56, 1.0, 1.4, 74, 75, 76, 77, 72, 73, 52, 53, 8000.0, 800.0, 20.0 0.36, 2.5, 1.9, 70, 75, 73, 76, 74, 79, 53, 50, 8000.0, 800.0, 20.0 End \u00b6 This section will stop the parser. Everything after it will be ignored. Since [ Version 0.4.5.0 ] , it's optional. In previous versions it's STRICTLY REQUIRED - without it, the vehicle will crash the game. end Organizational Sections \u00b6 These sections are not required, but will make it easier to locate your file or work with. Do not use carets in your syntax, they are used to mark sections! GUID \u00b6 You should use the guid feature to allow RoR to recognize your truck uniquely. This section is required for skins . ;guid <GUID> guid 6daaee29-e462-4d99-96d2-4577294f7b10 You can generate some GUIDs here . Fileformatversion \u00b6 This tells RoR what version of RoR your truck is built for. Most trucks built today should use fileformatversion 3 Version 1 = Pre-RoR 0.32 Version 2 = RoR 0.32 - 0.35 Version 3 = Post-RoR 0.36 Leaving out this tag will result in version 1. fileformatversion 3 Author \u00b6 author <Type> <AuthorID> <AuthorName> <Email> Type = Tells what the author referenced in the next section did. Recommended types to put: chassis, texture, support, etc. AuthorID = ID of the author's RoR Forum account. To get your ID, view your forum profile and check the number shown in the URL. For example: https://forum.rigsofrods.org/members/curiousmike.5831/ 5831 would be the ID. AuthorName = The author's username. Email = The author's e-mail. (optional) Each author requires a separate line. author chassis 4 heinz_peter heinz@mail.com author texture 123 forname_surname_othername someuser@mail.com author support 5487 otheruser otheruser@mail.com Please note: Do not use spaces in the type, authorname, or email. Instead, use an underscore ( _ ). In the game, the underscore will be replaced with a space. Description \u00b6 description Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. end_description Pretty self-explanatory. Only the first 3 lines will get displayed in the Truck HUD. Do not put keywords in the description; they will mess up the truck file. Fileinfo \u00b6 General info about the vehicle. Unique ID (nullable) : String ; default = -1 ; Empty value = -1 ; This field specifies the unique file ID (you get one by uploading it to the repository). Category ID (optional) (nullable) : Decimal number ; default = -1 ; Empty value = -1 ; This is the category number from the repository. It is recommended that you give your truck a category. File version (optional) : Decimal number ; default = 0 ; Version of the vehicle, read by users and the repository. For backwards compatibility, this field also accepts real number (a warning is reported). ; syntax: ;fileinfo <uniqueid>, <categoryid>, <fileversion> ; example: fileinfo 000UID, 107, 2 Available category IDs ;;; vehicles 108, Other Land Vehicles 146, Street Cars 147, Light Racing Cars 148, Offroad Cars 149, Fantasy Cars 150, Bikes 155, Crawlers 152, Towercranes 153, Mobile Cranes 154, Other cranes 107, Buses 151, Tractors 156, Forklifts 159, Fantasy Trucks 160, Transport Trucks 161, Racing Trucks 162, Offroad Trucks 110, Boats 113, Helicopters 114, Aircraft 117, Trailers 118, Other Loads ;;; terrains 129, Addon Terrains 859, Container 875, Submarine ;note: these categories are NOT in the repository: 5000, Official Terrains 5001, Night Terrains ;do not use category numbers above 9000! 9990, Unsorted 9991, All 9992, Fresh 9993, Hidden Help \u00b6 NOTE: This section is not used as of version 0.39.5+ The help section gives the name of the material used for the help panel on the in-game dashboard. This material must be defined elsewhere in a material file. This is optional. (But it looks cool, so use it!) NOTE: This setting can be overridden by section \"guisettings\" help tracks/semihelp Comments \u00b6 Comments are ignored by RoR. They are useful for telling users what things do in the truck file. Comments can be put anywhere by putting a semicolon ( ; ) as the first character of the line to be commented. You can also comment out several lines of text using this format: comment One morning, as Gregor Samsa was waking up from anxious dreams, he discovered that in bed he had been changed into a monstrous vermin. He lay on his armour-hard back and saw, as he lifted his head up a little, his brown, arched abdomen divided up into rigid bow-like sections. From this height the blanket, just about ready to slide off completely, could hardly stay in place. His numerous legs, pitifully thin in comparison to the rest of his circumference, flickered helplessly before his eyes. end_comment hideInChooser \u00b6 Excludes the vehicle/load from being shown in the vehicle menu on top of the screen. Place the single keyword somewhere in the vehicle/load file. hideInChooser Vehicle-specific \u00b6 The following sections define important vehicle parts, like wheels, shock absorbers, and the like. Engine \u00b6 The engine section contains the engine parameters. Parameters are: Shift down RPM : Real number The engine speed at which the automatic transmission will shift down (gear 2 and up) or the clutch engages (driving off). Shift up RPM : Real number The engine speed at which the automatic transmission will shift up. Actual redline is this value x1.25. Torque : Real number Engine torque in newton-meters (N/m). The higher the value, the faster a truck will accelerate. RoR uses a flat torque model, usually correct for large intercooled turbo diesels. Global gear Ratio : Real number A global gear conversion ratio. (Final gear reduction ratio) Rear gear ratio : Real number Gear ratio of reverse. For every turn of the wheel the engine will have to turn this many times (not counting the differential ratio). Neutral gear ratio : Real number Gear ratio of neutral gear. 1.0 is a good one as it helps to distinguish between reverse and forward gears First gear ratio : Real number Gear ratio of 1 st gear. Second/etc gear ratio : Real number Gear ratio of all further gears. Note there must be between 1 and 21 forward gears. The final gear must be followed by a -1 value (parser will emit a warning if the terminator is missing). engine ;min rpm, max rpm, torque, differential, reverse, neutral, 1st, 2nd, 3rd, 4th, 5th, 6th... 1000.0, 1500.0, 8000.0, 2.00, 10.85, 10.00, 13.86, 9.52, 6.56, 5.48, 4.58, 3.83, 3.02, 2.53, 2.08, 1.74, 1.43, 1.20, 1.00, -1.0 One good source of practical gear ratios is Eaton Fuller . To see the ratios, click the name of the transmission and find \"Product Specifications Guide\". It's wise to make sure you can get into final gear. If your vehicle decelerates in a gear you may not have enough power, or the gear ratio may be too high. Engoption \u00b6 Engoption sets optional parameters to the engine. It is mainly used for car engines. Parameters are: Engine inertia : Real number , default = 10.0 . The default game value is correct for a large diesel engine. For smaller engines you probably want smaller values. 1.0 or 0.5 would be appropriate for small atmospheric engines, for instance. Engine type : One Character String , default = t . Valid types are t for truck engine and c for car engine. This parameter changes engine sound and other engine characteristics. Clutch Force (optional) : [ Version 0.36.2+ ] Real number , default = 10000 for trucks, 5000 for cars . Shift Time : (optional) : [ Version 0.36.2+ ] Positive real number , default = 0.2 seconds . Time (in seconds) that it takes to shift. Requires a defined clutch force parameter to work. Clutch Time (optional) : [ Version 0.36.2+ ] Positive real number , default = 0.5 seconds . Time (in seconds) the clutch takes to apply. Requires a defined clutch force parameter to work. Post Shift Time (optional) : [ Version 0.36.2+ ] Positive real number , default = 0.2 seconds . Time (in seconds) until full torque is transferred. Requires a defined clutch force parameter to work. Stall RPM (optional) : [ Version 0.4.0.7+ ] Real number , default = 300 . RPM where the engine will stall. Idle RPM (optional) : [ Version 0.4.0.7+ ] Real number , default = 800 . Idle RPM the engine should attempt to maintain. Max Idle Mixture (optional) : [ Version 0.4.0.7+ ] Real number , default = 0.1 . Defines the maximum amount of throttle the truck will use to maintain the idle RPM. Min Idle Mixture (optional) : [ Version 0.4.0.7+ ] Real number , default = 0.0 . Defines the minimum amount of throttle the truck will use to maintain the idle RPM. Braking torque (optional) : [ Version 2020.01+ ] Real number , default = engine_torque / 5 . Defines the amount of engine braking when you let go of the throttle. engoption ;inertia, type, clutchforce, shifttime, clutchtime, postshifttime, stallRPM, idleRPM, maxIdleMixture, minIdleMixture 0.5, c, 5000.0, 0.75, 0.9, 0.75, 500, 700, 0.25, 0.06 ;sample shift timings for a mid size truck PROTIP: Use the \"Engine inertia\" value to make the engine start faster. With a value of 0.1, the engine will start instantly. With a value of 10, the engine requires about 30 seconds of cranking before it starts. Values between 1 and 3.5 are great for vehicles that you drive frequently, or race vehicles and the like that you want to start fast. However, using a higher value makes it harder to stall the engine. Making something to tow a lot of weight? Raise it up to 9 or 10 and it won't really stall, ever. (With values over 10, it may not start at all, so be careful.) Engturbo \u00b6 Engine's Turbo settings: When defining this on your truck file, you do not need to put \"t\" type of vehicle in the engoptions. There are 2 version of this section: Using Version 1 you have more control over the power added to the engine, but this can end up in unrealistic simulation if the values aren't correctly chosen. Turbo is always giving 20 PSI at max rpm. (Which isn't realistic.) Using Version 2 you have less control over the power added, but you can end up with a realistic simulation depending on the maxPSI value. Version 1: (Not recommended) type : Positive real number ; Turbo's simulation version, leave it as 1 for this type of simulation. inertiaFactor : Positive real number ; Turbo's inertia, how much time it will take for the turbo to spool up. Big turbos tend to have Values between 2 and 6, while small turbos are between 0.1 and 1. numTurbo : Real number <0 - 4> ; The number of turbos in the engine. No effects for the moment. additionalTorque Positive real number ; Torque in Nm that will be added at max turbo rpm. engine_rpm_op ; (optional) ; Positive real number ; default = 0 ; Engine's RPM at which turbo will start to spool up. engturbo ;type, inertiaFactor, numTurbo, additionalTorque, engine_rpm_op 1, 0.2, 1, 430, 3200 Version 2: type : Positive real number ; Turbo's simulation version, leave it as 2 for this type of simulation. inertiaFactor : Positive real number ; Turbo's inertia, how much time it will take for the turbo to spool up. Big turbos tend to have Values between 2 and 6, while small turbos are between 0.1 and 1. numTurbo : Real number <0 - 4> ; The number of turbos in the engine. No effects for the moment. maxPSI ; Positive real number ; Max PSI the turbo will give. for each 14.7 psi added, the power out is multiplied per 2. (This is not perfect, but it is theoretical) engine_rpm_op ; (optional) ; Positive real number ; default = 0 ; Engine's RPM at which turbo will start to spool up. BOV ; (optional) ; Boolean <0= disabled, 1= enabled> ; default = 0 ; Enable blow off valve. BOV_minPSI ; (optional) ; Positive real number ; default = 11 ; Minimum PSI at which the blow off valve starts to operate. wastegate ; (optional) ; Boolean <0= disabled, 1= enabled> ; default = 0 ; Enables or disable the wastegate. wastegate_maxpsi ; (optional) ; Positive real number ; default = 20 ; maxPSI on which the wastegate will limit the turbo. wastegate_threshold ; (optional) ; Positive real number ; default = 0 ; Wastegate's threshold. (Optimal values between 0.01 and 0.1) antilag ; (optional) ; Boolean <0= disabled, 1= enabled> ; default = 0 ; Enables or disable the anti-lag system. antilag_chance ; (optional) ; Positive real number <min = 0, max = 1> ; default = 0.9975 ; Random number which calculates the chances of the anti lag's combustion. The lower the number, the more the chances. (Optimal values between 0.95 and 0.99) antilag_minRPM ; (optional) ; Positive real number ; default = 3000 ; Minimum engine's RPM on which the anti lag system start to work. antilag_power ; (optional) ; Positive real number ; default = 170 ; Power factor which will be used to sustain the turbo's spinning while anti lag is working. engturbo ;type, inertiaFactor, numTurbos, maxPSI, rpm_op, bov, bov_minPSI, wastegate, wastegate_maxpsi, wastegate_threshold, antilag, antilag_chance, antilag_minRPM, antilag_power 2, 4, 1, 35, 3500, 1, 11, 1, 32, 0.02, 1, 0.9985, 3000, 250 Brakes \u00b6 Parameters: Default braking force : Real number ; default = 30000 ; This allows you to change the default braking force value. The default is 30000, which is generally too high a value for smaller cars and trucks. Parking brake force (optional) : [ Version 0.36.3+ ] Real number ; default = (brake_force * 2) ; brakes ; brake_force, [park_brake_force] 20000, 15000 AntiLockBrakes \u00b6 AntiLockBrakes settings: regulating_force : Positive real number from range <1 - 20> ; Valid range 1 (no regulation) - 20 (max regulation). Any other value is clamped to the <1 - 20> interval. min_speed : Positive real number ; The speed-limit where the anti-lock-brakes system gets active pulse/sec (optional) : Positive decimal number <1 - 2000> mode (optional) : mode: MODES JOINED WITH & ON : System is active at spawn OFF : System is inactive at spawn NODASH : No dashboard indicator NOTOGGLE : The system cannot be turned on/off and stays ON or OFF ;AntiLockBrakes regulation-force, minspeed, pulse/sec, mode AntiLockBrakes 12, 15, 2000, mode: ON & NODASH Examples of MODE settings: System is activated at spawn with no dashboard indicator: mode: ON & NODASH System is activated at spawn and can NOT be shut off: mode: ON & NOTOGGLE System is activated at spawn, no dashboard indicator and can NOT be shut off mode: ON & NODASH & NOTOGGLE System deactivated at spawn and no dashboard indicator: mode: OFF & NODASH In game, you can toggle the anti-lock brakes on/off with SHIFT+B Anti-lock Brakes do NOT have any impact on your parking brake behavior. TractionControl \u00b6 NOTE: wheelslip and fade_speed have been made obsolete with version 2020.01 (see: https://github.com/RigsOfRods/rigs-of-rods/commit/57dfbba4f16431e7b6db878223d86a17f97a92ce ) In game, you can toggle the traction control on/off with SHIFT+V Parameters: regulating_force : Positive real number from range <1 - 20> ; Valid range 1 (no regulation) - 20 (max regulation). Any other value is clamped to the <1 - 20> interval. wheelslip : Positive real number ; Allowed wheel-slip in percentage of the actual speed. fade_speed (optional) : Positive real number ; The speed where the allowed wheel-slip doubles (use low settings for drifter setups) pulse/sec (optional) : Positive real number from range <1 - 2000> ; Any other value is clamped to the <1 - 2000> interval. options (optional) : String ; ON : System spawns activated OFF : System spawns deactivated NODASH : Hides dashboard indicator NOTOGGLE : System cannot be turned on/off and remains in original state. Valid modes: ON : System is activate at spawn ON & NODASH : System is activate at spawn and no dashboard indicator ON & NOTOGGLE : System is activate at spawn and can NOT be shut off ON & NODASH & NOTOGGLE : System is activate at spawn, no dashboard indicator and can NOT be shut off OFF : System deactivated at spawn OFF & NODASH : System deactivated at spawn and no dashboard indicator ;TractionControl regulation-force, wheelslip, fadespeed, pulse/sec, mode TractionControl 6, 0.01, 100, 2000, mode: ON SlopeBrake \u00b6 NOTE: This section has been made obsolete with 0.4.6.0 (see: https://github.com/RigsOfRods/rigs-of-rods/commit/523c02f854853cc5159d4aacdd41cf1e73dff5dd ) This section fixes the bug, where trucks slowly roll down a slope no matter how much brake-force is applied. SlopeBrake settings: regulating force : Positive real number from range <0 - 20>; Valid range 0 (no regulation) - 20 (max regulation) attach-angle : Positive real number from range <1 - 45>; Valid range any positive integer 1 - 45. The angle where the slope brake tries to activate at full force release-angle : Positive real number from range <5 - 45>; Valid range any positive integer 5 - 45. Adds to attach-angle. The angle where the slope brake will reset and restart when it was not able to keep the wheel from spinning. Use small numbers here. ;SlopeBrake regulating force, attach-angle, release-angle SlopeBrake 10, 5, 12 Wheels \u00b6 This section is important: it defines the wheels! Parameters are: Radius - Real number ; The radius of the wheel, in meters. Width (ignored) - Real number ; Use any number (must be present for compatibility), wheel width is auto-calculated from distance between node1 and node2. number of rays - Real number ;The number of 'pie pieces' that make up the wheel. For reference, 3 makes the wheel triangular, and 4 makes the wheel square. Recommended values are between 10 and 16 . Node 1 - Node number or name ;The node on the axle where the one side of the wheel starts. Node 2 - Node number or name ;The node on the axle where one side of the wheel ends. To clarify, if you imagine a beam that goes right through the middle of the wheel along the axis of rotation, Node 1 and Node 2 would be at the intersection between one side of the wheel and the beam and the intersection between other side of the wheel and the beam. Rigidity Node - Node number or name ; The number of a special rigidity node (see explanation about Axle Rigidity ). Use 9999 if there is no rigidity node. Wheel Braking - Positive real number from range <0 - 4>; 0 for unbraked wheels, 1 for braked wheels. For directional braking, as found in airplanes, use 2 for a left wheel, 3 for a right wheel. In 0.37+, 4 is used for a wheel with a footbrake, but no parking brake. Wheel Drive - Positive real number from range <0 - 2>; 0 for undriven wheels, 1 for wheels driven forwards, 2 for wheels driven backwards Reference arm node - Node number or name ; The reference arm node for the wheel. This is where reaction torque is applied to the chassis. Set it to a node in front of the wheel for more traction and behind the wheel for less traction. Setting the reference arm node to the same node as Node 1 or Node 2 gets rid of the effects of the Reference Arm Node. Mass - Real number ; Mass of the wheel, in kilograms. Springiness - Real number ; The stiffness of the wheel, somewhat equivalent to tire pressure. Having too much spring will make the steering wheels bounce back and forth during understeer, sending vibrations through the entire vehicle. Damping - Real number ; The rebound rate of the wheel Materials - String ; Face material and band material. (no comma between them) If you don't have a custom material, use tracks/wheelface for the face and tracks/wheelband1 for a single wheel or tracks/wheelband2 for dual mounted wheels. wheels ;radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, facemat bandmat 0.54, -1, 12, 35, 36, 9999, 1, 0, 3, 200.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband1 0.54, -1, 12, 37, 38, 9999, 1, 0, 5, 200.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband1 0.54, -1, 12, 39, 40, 41, 1, 1, 25, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 0.54, -1, 12, 41, 42, 40, 1, 1, 23, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 Notes: Wheel breaking strength is set by the last Beam defaults in the truck file before the wheels section. This can help the wheel to go faster before it breaks. The order in which the wheels are declared is important: each consecutive pair of wheels is grouped into an axle. A truck cannot have an odd number of powered wheels, since one wheel would not be in a pair. If this happens, the odd wheel will not move. Wheels2 \u00b6 This section improves wheels by simulating both wheel tires and rims. The player is able to set tire pressure via key input. Rim radius - Real number The radius of the wheel rim in meters Tyre radius - Real number The radius of the tire in meters, measured from the center of the wheel. Width - Real number Use any number (must be present for compatibility), wheel width is auto-calculated from distance between node1 and node2. Number of rays - Real number The number of 'pie pieces', or corners, that make up the wheel. For reference, 3 makes the wheel triangular, and 4 makes the wheel square. Recommended values are between 10 and 16 . Node 1 - Node number/name The node where the wheel starts. Node 2 - Node number/name The node where the wheel ends. (See Wheels for an explanation of how this works.) Rigidity Node - Node number/name The number of a special rigidity node (see Axle Rigidity explanation ). Use 9999 if there is no rigidity node. Wheel Braking - Positive real number from range <0 - 4>; 0 for unbraked wheels, 1 for braked wheels. For directional braking, as found in airplanes, use 2 for a left wheel, 3 for a right wheel. In 0.37+, 4 is used for a wheel with a footbrake, but no parking brake. Wheel Drive - Positive real number from range <0 - 2>; 0 for an undriven wheel, 1 for a wheel driven forwards, 2 for a wheel driven backwards. Reference arm node - Node number/name The reference arm node for the wheel. This is where reaction torque is applied to the chassis. Set it to a node in front of the wheel for more traction and behind the wheel for less traction. Mass - Real number Mass of the wheel in kilograms. Rim springiness - Real number The stiffness of the wheel rim. Rim damping - Real number The rebound rate of the wheel rim. Tyre springiness - Real number The stiffness of the tire. Tyre damping - Real number The rebound rate of the tire. Materials - String Face material and band material. (no comma between them) If you don't have a custom material, use tracks/wheelface for the face and tracks/wheelband1 for a single wheel or tracks/wheelband2 for dual mounted wheels. wheels2 ;radius, radius2, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, rim spring, rim damping, simple spring, simple damping, facemat bandmat 0.335, 0.625, -1, 12, 44, 45, 9999, 1, 1, 3, 280.0, 900000.0, 200.0, 400000.0, 2000.0, tracks/daffwheelface tracks/dafwheelband 0.335, 0.625, -1, 12, 46, 47, 9999, 1, 1, 5, 280.0, 900000.0, 200.0, 400000.0, 2000.0, tracks/daffwheelface tracks/dafwheelband 0.335, 0.625, -1, 12, 48, 49, 50, 1, 1, 31, 280.0, 900000.0, 200.0, 200000.0, 2000.0, tracks/dafrwheelface tracks/dafwheelband 0.335, 0.625, -1, 12, 50, 51, 49, 1, 1, 33, 280.0, 900000.0, 200.0, 200000.0, 2000.0, tracks/dafrwheelface tracks/dafwheelband 0.335, 0.625, -1, 12, 52, 53, 54, 1, 1, 31, 280.0, 900000.0, 200.0, 200000.0, 2000.0, tracks/dafrwheelface tracks/dafwheelband 0.335, 0.625, -1, 12, 54, 55, 53, 1, 1, 33, 280.0, 900000.0, 200.0, 200000.0, 2000.0, tracks/dafrwheelface tracks/dafwheelband Meshwheels \u00b6 Mesh wheels allows you to do very nice wheels. It takes an Ogre3D mesh of a rim (the rim only, without the tire!). The mesh should be centered, and of the right size for the wheel you want to do: its outer diameter should be the same as the \"rim_radius\" parameter, and its width should be the same as the distance between node1 and node2. The other parameters are similar to the wheels section, though there are a few differences. The side value should be l or r depending on the side of the wheel, and the final parameters are the mesh name and the material for the tire. The mapping of the texture should look something like this: Here is an example picture of a rim mesh, as it should be modeled. The tire geometry is added dynamically afterward by the game, and will flex like a real tire. meshwheels ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, side, meshname material 0.35, 0.21, 0.5, 14, 32, 33, 34, 1, 1, 18, 200.0, 300000.0, 2000.0, l, dodgechargerwheel.mesh dodgechargerband 0.35, 0.21, 0.5, 14, 34, 35, 33, 1, 1, 26, 200.0, 300000.0, 2000.0, r, dodgechargerwheel.mesh dodgechargerband 0.35, 0.21, 0.5, 14, 44, 45, 9999, 1, 0, 53, 200.0, 350000.0, 2000.0, l, dodgechargerwheel.mesh dodgechargerband 0.35, 0.21, 0.5, 14, 46, 47, 9999, 1, 0, 50, 200.0, 350000.0, 2000.0, r, dodgechargerwheel.mesh dodgechargerband Meshwheels2 \u00b6 This section works exactly the same way as meshwheels, except one difference. The tread of the wheel you generate does use the meshwheels section spring and damping ratios while the rim will use the ones from the set_beam_defaults . It enables you to make quite soft and flexing wheels, which have a lot lateral grip and are very reliable and predictable in comparison to normal meshwheels. Very useful for flex body tires, since the nodeflip-bug is mostly gone with this used the right way. Use set_beam_defaults . that make sense for rims (high spring, low damping) while the tires itself can be soft and have high damping values: set_beam_defaults 700000, 350, 60000000, 80000000 ;set_beam_defaults for the rim meshwheels2 ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, tirespring, tiredamping, side, meshname material 0.660, 0.315, 0.375, 12, 27, 26, 38, 4, 1, 22, 100.0, 150000.0, 1500.0, r, my-rim.mesh my-tire-material Flexbodywheels \u00b6 This section works exactly the same way then meshwheels2, except 2 differences: There is a contactive rim generated and you can place a tire mesh which is converted to a flexbody by RoR. For now, the rim mesh is a prop. Might be upgraded to flexbody later. This one has complete new tire physics, so for now, happy testing, please give feedback. set_beam_defaults 100000, 350, 60000000, 80000000 flexbodywheels ;radius, rimradius, width, rays, n1, n2, ref-n, braked, propulsed, force-n, weight, tire-spring, tire-damp, rim-spring, rim-damp, rim-orientation, rim-mesh tire-mesh 0.50, 0.300, 0.300, 16, 13, 11, 9999, 1, 1, 19, 92.5, 4500.0, 300.0, 3000000, 350, r, testtruck-rim.mesh testtruck-wheel.mesh Shocks \u00b6 Shocks can be seen as tunable beams, useful for suspensions. node_1 : Node number/name The node where the shock starts. node_2 : Node number/name The node where the shock ends. spring_rate : Real number The 'stiffness' of the shock. The higher the value, the less the shock will move for a given bump. damping : Real number The 'resistance to motion' of the shock. The best value is given by this equation: [ 2 * sqrt(suspended_mass * spring_rate) ] max_contraction : Real number The shortest length the shock can be, as a proportion of its original length. 0 means the shock will not be able to contract at all, 1 will let it contract all the way to zero length. If the shock tries to shorten more than this value allows, it will become as rigid as a normal beam. max_extension : Real number The longest length a shock can be, as a proportion of its original length. 0 means the shock will not be able to extend at all. 1 means the shock will be able to double its length. Higher values allow for longer extension. precompression : Real number Changes compression or extension of the suspension when the truck spawns. This can be used to \"level\" the suspension of a truck if it sags in game. The default value is 1.0 . options (optional) : String , default = no options (shock is visible) i : This shock is invisible (default is visible). l OR L : Stability active suspension for left side. r OR R : Stability active suspension for right side. n : Placeholder. Does nothing, parser ignores it silently. shocks ;critical damping=2*sqrt(mass*spring) ;id1, id2, spring, damping, shortbound, longbound, precomp, options 36, 6, 200000, 10000, 0.3, 0.3, 1.0 37, 8, 200000, 10000, 0.3, 0.3, 1.0, l 38, 2, 200000, 10000, 0.3, 0.3, 1.0, r Shocks2 \u00b6 Shocks can be seen as tunable beams, useful for suspensions. Parameters: node_1 : Node number/name The node where the shock starts. node_2 : Node number/name The node where the shock ends. spring_in_rate : Real number The 'stiffness' of the shock, applied when the shock is compressing. The higher the value, the less the shock will move for a given bump. damping_in_rate : Real number The 'resistance to motion' of the shock, applied when the shock is compressing. The best value is given by this equation: [ 2 * sqrt(suspended_mass * spring_rate) ] spring_in_progression_factor : Real number Progression factor for spring_in_rate. A value of 0 disables this option. 1...x as multipliers, example: [ maximum springrate == springrate + (factor*springrate) ] damping_in_progression_factor : Real number Progression factor for damp_in_rate. 0 = disabled, 1...x as multipliers, example: [ maximum dampingrate == springrate + (factor*dampingrate) ] spring_out_rate : Real number The 'stiffness' of the shock, applied when the shock is extending. The higher the value, the less the shock will move for a given bump. damping_out_rate : Real number The 'resistance to motion' of the shock, applied when the shock is extending. The best value is given by this equation: [ 2 * sqrt(suspended_mass * spring_rate) ] spring_out_progression_factor : Real number Progression factor for spring_out_rate. A value of 0 disables this option. 1...x as multipliers, example: [ maximum springrate == springrate + (factor*springrate) ] damping_out_progression_factor : Real number Progression factor for damp_out_rate. 0 = disabled, 1...x as multipliers, example: [ maximum dampingrate == springrate + (factor*dampingrate) ] max_contraction : Real number The shortest length the shock can be, as a proportion of its original length. 0 means the shock will not be able to contract at all, 1 will let it contract all the way to zero length. If the shock tries to shorten more than this value allows, it will become as rigid as a normal beam. max_extension : Real number The longest length a shock can be, as a proportion of its original length. 0 means the shock will not be able to extend at all. 1 means the shock will be able to double its length. Higher values allow for longer extension. precompression : Real number Changes compression or extension of the suspension when the truck spawns. This can be used to \"level\" the suspension of a truck if it sags in game. The default value is 1.0 . options (optional) : String , default = no options (shock is visible) i : This shock is invisible (default is visible). s : soft bump boundaries, use when shocks reach limiters too often and \"jumprebound\" (default is hard bump boundaries) m : metric values for shortbound/longbound applying to the length of the beam M : Absolute metric values for shortbound/longbound, settings apply without regarding to the original length of the beam. Use with caution, check RoR.log for errors. IMPORTANT : shocks2 needs at least 1500+ as a minimum damping value when using them as inbound/outbound only. (When your shocks2 truck bottoms out at spawn, damping is too low (or the springs don't support the weight of the truck) soft bump shocks need some boundary limit ( 5%+ ) to work proper as soft bump boundaries. You will find any errors in the RoR.log regarding to wrong values in 'M' setting or any other shock values. shocks2 ;invisible softbump shock, high value progressive for inbound, linear low values for outbound ;node1, node2, springin, dampin, progspringin, progdampin, springout, dampout, progspringout, progdampout, shortbound, longbound, precomp, options 45, 80, 22000, 2000, 5, 5, 2000, 1500, 0, 0, 0.8, 0.1, 1, is ;visible hardbump shock, high value progressive for inbound and outbound, boundaries apply metric in meters ;node1, node2, springin, dampin, progspringin, progdampin, springout, dampout, progspringout, progdampout, shortbound, longbound, precomp, options 45, 80, 22000, 2000, 15, 10, 22000, 2000, 15, 10, 0.5, 0.5, 1, m ;visible hardbump shock, high value progressive inbound only shock, boundaries apply metric as absolute values in meters ;node1, node2, springin, dampin, progspringin, progdampin, springout, dampout, progspringout, progdampout, shortbound, longbound, precomp, options 45, 80, 22000, 2000, 5, 5, 0, 0, 0, 0, 0.2, 2.5, 1, M Shockswapping help: This is an example how to get started with replacing shocks with shocks2. In this example, the shocks2 have exactly the same functionality then the original shocks. After adding the shocks2 delete the old shock and you are fine to tune/tweak your truck. shocks ;id1, id2, spring, damping, shortbound, longbound, precomp, options 36, 6, 200000, 10000, 0.3, 0.3, 1.0 shocks2 ;node1, node2, springin, dampin, progspringin, progdampin, springout, dampout, progspringout, progdampout, shortbound, longbound, precomp, options 36, 6, 200000, 10000, 0, 0, 200000, 10000, 0, 0, 0.3, 0.3, 1.0 Shocks3 \u00b6 [ Version 2020.01+ ] Shocks can be seen as tunable beams, useful for suspensions. Parameters: node_1 : Node number/name The node where the shock starts. node_2 : Node number/name The node where the shock ends. spring_in_rate : Real number The 'stiffness' of the shock, applied when the shock is compressing. The higher the value, the less the shock will move for a given bump. damping_in_rate : Real number The 'resistance to motion' of the shock, applied when the shock is compressing. The best value is given by this equation: [ 2 * sqrt(suspended_mass * spring_rate) ] damp_in_slow : Real number Damping factor for compression speeds below split_vel_in, example: [ damping == damp_in * damp_in_slow * vel ] split_vel_in : Real number Velocity threshold for the slow / fast compression speed damp_in_fast : Real number Damping factor for compression speeds above split_vel_in, example: [ damping == damp_ing * damp_in_slow * split_vel_ing + damp_in * damp_in_fast * (vel - split_vel_in) ] spring_out_rate : Real number The 'stiffness' of the shock, applied when the shock is extending. The higher the value, the less the shock will move for a given bump. damping_out_rate : Real number The 'resistance to motion' of the shock, applied when the shock is extending. The best value is given by this equation: [ 2 * sqrt(suspended_mass * spring_rate) ] damp_out_slow : Real number Damping factor for extension speeds below split_vel_out, example: [ damping == damp_out * damp_out_slow * vel ] split_vel_out : Real number Velocity threshold for the slow / fast extension speed damp_out_fast : Real number Damping factor for extension speeds above split_vel_out, example: [ damping == damp_out * damp_out_slow * split_vel_out + damp_out * damp_out_fast * (vel - split_vel_out) ] max_contraction : Real number The shortest length the shock can be, as a proportion of its original length. 0 means the shock will not be able to contract at all, 1 will let it contract all the way to zero length. If the shock tries to shorten more than this value allows, it will become as rigid as a normal beam. max_extension : Real number The longest length a shock can be, as a proportion of its original length. 0 means the shock will not be able to extend at all. 1 means the shock will be able to double its length. Higher values allow for longer extension. precompression : Real number Changes compression or extension of the suspension when the truck spawns. This can be used to \"level\" the suspension of a truck if it sags in game. The default value is 1.0 . options (optional) : String , default = no options (shock is visible) i : This shock is invisible (default is visible). m : metric values for shortbound/longbound applying to the length of the beam M : Absolute metric values for shortbound/longbound, settings apply without regarding to the original length of the beam. Use with caution, check RoR.log for errors. shocks3 ;node1, node2, springin(N/m), dampin(N/m/s), slowdampin, splitin(m/s), fastdampin, springout(N/m), dampout(N/m/s), slowdampout, splitout(m/s), fastdampout, shortbound, longbound, precomp, options 46, 55, 65000, 5800, 0.5, 1.2, 0.2, 65000, 1080, 0.5, 1.2, 0.2, 0.62, 0.00, 1.2, n Hydros \u00b6 The hydros section is concerned only with the steering actuators! They are beams which change their length depending on the steering of the truck. Hydros can use inertia . Parameters: node_1 : Node name or number The node where the hydro starts. node_2 : Node name or number The node where the hydro ends. lengthening_factor : Real number How much the hydro extends or contracts when a steering key is pressed (expressed as a proportion of the original length). Positive values extend when steering left and contract when steering right. Negative values do the reverse. options (optional) String , default = no options (hydro is visible) i : Makes the hydro invisible s : (Land vehicles) Disables the hydro at high speed (as seen sometimes with rear steering axles on large trucks) a : [ Version 0.36+ ] (Airplanes) This hydro is commanded by aileron input. r : [ Version 0.36+ ] (Airplanes) This hydro is commanded by rudder input. e : [ Version 0.36+ ] (Airplanes) This hydro is commanded by elevator input. u : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of aileron input and elevator input. v : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of inverse aileron input and elevator input. x : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of aileron input and rudder input. y : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of inverse aileron input and rudder input. g : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of elevator input and rudder input. h : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of inverse elevator input and rudder input. start_delay (optional) : Real number Inertia. stop_delay (optional) : Real number Inertia. start_function (optional) : String Inertia. stop_function (optional) : String Inertia. hydros ;node1, node2, factor, options 43, 37, -0.2 45, 37, 0.2 46, 36, 0.2, s 48, 36, -0.2, s Animators \u00b6 The animator section concerns only Animators referring to game data! They are beams which change their length depending on the variables of the simulation. The parameters are: Node 1 - Node name or number The node where the animator starts. Required Node 2 - Node name or number The node where the animator ends. Required. lengthening factor - Real number A coefficient which specifies how much the animator moves. Required. Option string - String Required Options: vis - This creates a visible animator. ( It's not necessarily needed, but can help users read the truck file.) inv - This creates an invisible animator. airspeed - This animator extends or contracts with the actual speed (not speedometer indicated speed) for any vehicle. vvi - This animator extends or contracts with the vehicle's vertical velocity. altimeter100k - This animator extends or contracts with the vehicle's altitude up to 100,000 feet. altimeter10k - This animator extends or contracts with the vehicle's altitude up to 10,000 feet, at which point it will revert back to its original length. altimeter1k - This animator extends or contracts with the vehicle's altitude up to 1,000 feet, at which point it will revert back to its original length. These three animators can be used to create altimeters with three needles or similar objects, though for those small applications it is usually recommended that Add_animation be used. aoa - This animator extends or contracts with the dashboard's angle of attack. flap - This animator extends or contracts with the flap setting on the vehicle. airbrake - This animator extends or contracts with the airbrake setting on the vehicle. roll - This animator extends or contracts with the vehicle's roll. It will flip at 180 degrees roll to -180 degrees roll. This option can be used for an automatic trim feature. pitch - This animator extends or contracts with the vehicle's pitch. It will flip back at 180 degrees pitch to -180 degrees pitch. This option can be used for an automatic trim feature. throttle1 - This animator extends or contracts with the throttle setting of an aircraft's first engine. This option can be used for thruster mechanics. Valid sources include throttle1, throttle2, etc. etc. up to throttle8. rpm1 - This animator extends or contracts with the RPM of an aircraft's first engine. This option can be used for thruster mechanics. Valid sources include rpm1, rpm2, etc. etc. up to rpm8. aerotorq1 - This animator extends or contracts with the torque of an aircraft's first engine. Note that this only works for propeller engines, because torque is not applicable to jets. Valid sources include aerotorq1, aerotorq2, etc. etc. up to aerotorq8. aeropit1 - This animator extends or contracts with the pitch of an aircraft's first engine. Note that this only makes sense with propeller engines, pitch is not applicable to jets. Valid sources include aeropit1, aeropit2, etc. etc. up to aerotorq8. aerostatus1 - This animator extends with the On/Off/Fire status of an aircraft's first engine. Valid sources include aerostatus1, aerostatus2, etc. etc. up to aerostatus8. brakes - This animator extends or contracts with the vehicle's brake status. accel - This animator extends or contracts with the vehicle's accelerator status. clutch - This animator extends or contracts with the vehicle's clutch status. speedo - This animator extends or contracts with the speedometer indication. It scales with the guisetting speedometer. (It is best to use it even if there is no custom overlay dashboard; it simplifies the adjustment a lot.) tacho - This animator extends or contracts with the vehicle's RPM. It scales with guisetting tachometer. (It is best use it even if there is no custom overlay dashboard; simplifies the adjustment a lot.) turbo - This animator extends or contracts with the vehicle's turbocharger PSI. parking - This animator extends or contracts with the vehicle's parking brake status. shifterman1 - H-shift left right animator ( Reverse | 1-2 | 3-4 | 5-6...11-12 as positions, scales with engine settings (maxGear) shifterman2 - H-shift forth/back animator Reverse-2-6-8-10-12 | 1-3-5-7-9-11 as positions sequential - sequential shift animator ( i.e for tiptronic or wheel shift pedals), can be used for commands too ( no settable limits then ) shifterlin - for auto transmission animations or gearselect indicators torque - animator to simulate engine torque, useful in addition to wheel nodearms difflock - This animator extends or contracts with the difflock status of the truck (It only works when differentials are present in the truck.) rudderboat - This animator extends or contracts with the steering hydro on boats. throttleboat - This animator extends or contracts with the throttle status on boats. shortlimit - Adds shortbound movement limit to the animator, needs to be followed by a valid number. Limits are calculated in percentage like shocks. [ Version 0.38.24+ ] longlimit - Adds longbound movement limit to the animator, needs to be followed by a valid number. Limits are calculated in percentage like shocks. [ Version 0.38.24+ ] All options need to be connected by an vertical bar | , please refer to the example below. You can stack multiple options (like: airpseed | vvi | inv ), but it is not recommended and may result in weird behaviors. All animators are scaled to a maximum of -1/+1 as default coefficient, use the ratio setting to get the movement you want. Speed or force of the animators is NOT settable, though you can alter movement speed just with simple lever mechanics. The longer the lever arm, the slower the node will move. To tune your torque-animator to the needs of the truck, let it just work against a stiff shocks2 . The harder you make the shock, the more engine-rpm torque effect you get. Animators can use set_inertia_defaults . Inertia helps a lot to smooth instant movement like with shifters or airbrakes. animators ;node1, node2, factor, options 32, 26, 0.09, shifterlin | inv 5, 27, 0.10, accel | inv 5, 28, 0.10, brake | inv 5, 29, 0.10, clutch | inv 36, 41, -0.40, speedo | inv ;this one is visible 49, 3, -0.90, torque | vis ;this one is visible and has a short and a longbound limit 49, 3, -0.25, roll | vis | shortlimit: 0.02 | longlimit: 0.05 Behavior \u00b6 These sections define behaviors for the vehicle, like command-operated hydraulics and modifications to how beams behave. Commands \u00b6 The commands section describes the \"real\" hydros, that is, those you command with the function keys. They are like beams, but their length varies depending with the function keys you press. The parameters are: Node 1 : Node number/name ; The node where the command beam starts. Node 2 : Node number/name ; The node where the command beam ends. Rate of extension/contraction : Real number How fast the command beam moves. Maximum contraction : Real number The shortest length that the command beam will try to be, as a proportion of its initial length. Maximum extension : Real number The longest length the command beam will try to be, as a proportion of its initial length. Contraction key : Function key code (decimal number) A number representing the function key used to control the command beam. More than one can be controlled with the same key. (See below for the keymap.) Extension key : Function key code (decimal number) The key used to extend the command beam. Option flag (optional) : Single character i : Makes the command beam invisible. r : Makes the command behave like a rope or a winch (no compression strength). c : Makes the command beam auto-center: It will automatically return it to its starting position when a lengthening/shortening key is released. n : Placeholder, does nothing (useful as filler when you need to specify description) Description (optional) : String A text description that tells the user what the command beam does when the it is activated. This is shown by pressing CTRL+T ingame. There is no need to put a key in front of the text (like F1:_do_something) this will be done automatically! Writing \"hide\" will hide the command from the \"t-screen\". commands ;id1, id2, rate, short, long, keys, keyl, options description 10, 91, 0.1, 1.0, 7, 1, 2, i Death_machine 12, 93, 0.1, 1.0, 7, 1, 2, i 14, 90, 0.1, 1.0, 7, 1, 2 16, 92, 0.1, 1.0, 7, 1, 2 114, 122, 0.2, 1.0, 19, 3, 4 115, 123, 0.2, 1.0, 19, 3, 4, n Happy_butterfly_wings 126, 132, 0.1, 0.1, 1.0, 5, 6, r This is the default keymap: 1 = F1 2 = F2 3 = F3 etc. etc. 12 = F12 13 = CTRL+F1 14 = CTRL+F2 etc. etc. 24 = CTRL+F12 25 = ALT+F1 26 = ALT+F2 etc. etc. 36 = ALT+F12 37 = CTRL+ALT+F1 38 = CTRL+ALT+F2 etc. etc. 46 = CTRL+ALT+F10 Since RoR 0.4.0.5 it is possible to use up to 84 commands. The keymap changed because of that: 1 = F1 2 = F2 3 = F3 etc. etc. 12 = F12 13 = CTRL+F1 14 = CTRL+F2 etc. etc. 24 = CTRL+F12 25 = SHIFT+F1 26 = SHIFT+F2 etc. etc. 36 = SHIFT+F12 37 = ALT+F1 38 = ALT+F2 etc. etc. 46 = ALT+F10 49 = CTRL+SHIFT+F1 50 = CTRL+SHIFT+F2 etc. etc. 59 = CTRL+SHIFT+F11 61 = CTRL+ALT+F1 62 = CTRL+ALT+F2 etc. etc. 72 = CTRL+ALT+F12 73 = CTRL+SHIFT+ALT+F1 74 = CTRL+SHIFT+ALT+F2 etc. etc 84 = CTRL+SHIFT+ALT+F12 Note that some keymapped commands are by default assigned to Windows commands.. i.e. ALT+F4 closes the active window (in this case the RoR render window). It is best to avoid using those buttons if at all possible. If you hold F4 then hold/press ALT , the window should stay open and the command will work. Commands2 \u00b6 Improved commands. Commands are beams which contract and extend when player presses the corresponding key combination. Since [ Version 0.36.2 ] you can specify an inertia function for your command. This reduces the swing of commands since they will operate smoothly with inertia. The parameters are: Node 1 : Node number/name ; The node where the command beam starts. Node 2 : Node number/name ; The node where the command beam ends. Shortening rate : Positive real number ; How fast the command beam shortens. Lengthening rate : Positive real number ; How fast the command beam lengthens. Maximum contraction : Positive real number ; The shortest length that the command beam will try to be, as a proportion of its initial length. Maximum extension : Positive real number ; The longest length the command beam will try to be, as a proportion of its initial length. Shortening key : Key code (decimal number) ; A number representing the function key needed to compress the command beam. More than one can be controlled with the same key. (see above for keymap) Lengthening key : Key code (decimal number) ; The key used to extend the command beam. Option flag(s) (optional) : n : Filler option, does nothing. i : Makes the command beam invisible. r : Makes the command beam behave like a rope or a winch. c : Makes the command beam auto-center: It will automatically return it to its starting position when a lengthening/shortening key is released. f : Stops the command moving faster when engine revs increase. p : Activates press-once functionality: A single press of a shortening/lengthening key will lengthen/shorten the command beam as much as possible. A second keypress of the key which started the command moving stops the automatic movement. o : is like p , but it will stop in the center position. Description (optional) : Placeholder = underscore '_' A text description that tells the user what the command beam does when it is activated. This is shown by pressing CTRL+T ingame. There is no need to put a key in front of the text (like F1:_do_something) this will be done automatically! Writing \"hide\" will hide the command from the \"t-screen\". Inertia: Start delay factor (optional) : [ Version 0.36.2+ ] ; Positive real number ; The delay upon command start. Note this isn't time in seconds, but are a factor (the lower the value, the more inertia there is) Inertia: Stop delay factor (optional) : [ Version 0.36.2+ ] ; Positive real number ; The delay upon command stop. Note this isn't time in seconds, but are a factor (the lower the value, the more inertia there is) Inertia: Start function (optional) : [ Version 0.36.2+ ] ; String ; Specifies what spline should be used for start. See diagram below. Inertia: Stop function (optional) : [ Version 0.36.2+ ] ; String ; Specifies what spline should be used for stop. See diagram below. Affects engine? (optional) : [ Version 0.4.0.5+ ] ; Positive real number ; default = 1.0 ; 0 means that moving this command won't affect engine RPM, so it is independent. Value larger than 0 specifies how much engine power will be needed for this command to move. Needs engine? (optional) : [ Version 0.4.0.5+ ] ; Boolean ; default = true ; value of \"true\" means that the command only works with a running engine. \"False\" means engine is not needed. commands2 ;id1, id2, rateShort, rateLong, short, long, keys, keyl, options Description 61, 113, 0.1, 0.5, 1.0, 4, 1, 2, of 62, 112, 0.1, 0.5, 1.0, 4, 1, 2, onf desc commands2 ;id1, id2, rateShort, rateLong, short, long, keyS, keyL, options description startDelay, stopDelay, startFunction stopFunction 115, 123, 0.10, 0.10, 1.00, 19.0, 3, 4, n First_Joint 0.5, 0.5, smoothcrane revprogressiv 127, 133, 0.10, 0.10, 1.00, 10.5, 5, 6, n Second_Joint 0.7, 0.5, smoothcrane revprogressiv 137, 147, 0.10, 0.10, 1.00, 10.5, 7, 8, n Third_Joint 0.7, 0.5, smoothcrane revprogressiv 143, 148, 0.05, 0.05, 0.50, 2.0, 9, 10, n Extremity_Joint 0.7, 0.5, smoothcrane revprogressiv commands2 ;id1, id2, rateShort, rateLong, short, long, keyS, keyL, options description startDelay, stopDelay, startFunction stopFunction affectEngine needsEngine 115, 123, 0.10, 0.10, 1.00, 19.0, 3, 4, n First_Joint 0.5, 0.5, smoothcrane revprogressiv 0 1 127, 133, 0.10, 0.10, 1.00, 10.5, 5, 6, n Second_Joint 0.7, 0.5, smoothcrane revprogressiv 0 0 137, 147, 0.10, 0.10, 1.00, 10.5, 7, 8, n Third_Joint 0.7, 0.5, smoothcrane revprogressiv 1 1 143, 148, 0.05, 0.05, 0.50, 2.0, 9, 10, n Extremity_Joint 0.7, 0.5, smoothcrane revprogressiv 1 0 Note: You may mix commands / commands2 sections, depending on what you want to use. Example: commands2 ;id1, id2, rateShort, rateLong, short, long, keyS, keyL, options description 61, 113, 0.1, 0.5, 1.0, 4, 1, 2, of 62, 112, 0.1, 0.5, 1.0, 4, 1, 2, onf Boom commands ;id1, id2, rate, short, long, keyS, keyL, options description 116, 124, 0.1, 1.0, 2.6, 3, 4 117, 125, 0.1, 1.0, 2.6, 3, 4, n Underlift commands2 ;id1, id2, rateShort, rateLong, short, long, keys, keyl, options Description 136, 116, 0.4, 4.4, 1.0, 10, 5, 6 136, 117, 0.4, 4.4, 1.0, 10, 5, 6 Set_inertia_defaults \u00b6 This command will set the defaults for all following commands, hydros, animators and rotators. start_delay : Real number , default = -1.0 . Entering value < 0 will reset all 4 values of this directive to defaults. stop_delay (optional) : Real number , default = -1.0 . Entering value < 0 will reset all 4 values of this directive to defaults. start_function (optional) : Inertia function name , default = none . stop_function (optional) : Inertia function name , default = none . ;set_inertia_defaults startDelay, stopDelay, startFunction stopFunction set_inertia_defaults 0.5, 0.5, smoothcrane revprogressiv ... set_inertia_defaults 0.7, 0.5, smoothcrane revprogressiv ... ; reset: set_inertia_defaults -1 NOTE: Both commas and spaces are accepted as delimiters between parameters. Rotators \u00b6 Rotators are alternate commands(hydros) that allows you to do turntables, like in the base of a rotating crane. They use 10 reference nodes: 2 nodes to define the axis of rotation 4 nodes (must be a square, centered with the axis) to define the baseplate 4 nodes (again, a square, centered with the axis) to define the rotating plate. Then, in a similar way to commands, comes the rate of rotation, and the numbers of the left and right function keys. New in [ Version 0.4+ ] start_delay. Real, default 0.0 stop_delay. Real, default 0.0 start_function. stop_function. engine_coupling. Real, default 1.0 needs_engine. Boolean, default false Rotators can use inertia . The reference nodes for the baseplate and rotator plate must also match each other in order. (i.e. if you start at the front left for the base plate and work clockwise, do the same for the rotator plate!) See the example rotators code and attached picture. Both plates must be identical! rotators ;axis1, axis2, a1, a2, a3, a4, b1, b2 b3, b4, rate, keyleft, keyright, (Ver. 0.4+) start_delay, stop_delay, start_function, stop_function, engine_coupling, needs_engine 29, 30, 31, 32, 34, 33, 37, 38, 36, 35, 0.1, 1, 2, 1, 1, smooth, smooth, 0.5, true Rotators2 \u00b6 Same as rotators section, but more options that allow lightweight rotators, rotator force setting and tolerance (anti jitter) setting and correct description parsing. Additional options: Force : the rotating power of the rotator, default is 10000000 Tolerance : anti jitter setting for lightweight rotators, default is 0.0 . Rise gently to make your rotator spawn and rotate stable if needed Description : descriptive text visible in the t-screen rotators2 ;axis1, axis2, a1, a2, a3, a4, b1, b2 b3, b4, rate, keyleft, keyright, force, tolerance, description, (Ver. 0.4+) start_delay, stop_delay, start_function, stop_function, engine_coupling, needs_engine 29, 30, 31, 32, 34, 33, 37, 38, 36, 35, 0.1, 1, 2, 1000000, 0.025, Superstructure_left/right, 1, 1, smooth, smooth, 0.5, true Forwardcommands \u00b6 Forwards the command keys pressed while riding a truck to loads in close proximity. It is used to remote control the commands of a load. The load must have the \"importcommands\" tag. forwardcommands In 0.4.0.5 and above it is possible to toggle forwardcommands on/off for the current beam object. The standard button assignment for this is CTRL+SHIFT+F . Importcommands \u00b6 Enables a load to receive command keys from a manned vehicle in close proximity. The controlling vehicle must have the \"forwardcommands\" tag. The load only receives the keys that are pressed by the player, it must contain a commands section. Commands section for loads is defined in the same manner as in manned trucks. importcommands In 0.4.0.5 and above it is possible to toggle importcommands on/off for the current beam object. The standard button assignment for this is CTRL+SHIFT+I . Set_beam_defaults \u00b6 This is not a section, but a self-contained line that can be inserted anywhere in the truck file. It changes all the beams (and the hydros and ropes) declared after this line. You can use this line many times to make different groups of beams that have different characteristics (e.g. stronger chassis, softer cab, etc.). Parameters: Springiness : Real number ; Default: 9000000 ; The overall stiffness of a beam. The higher the value the stiffer the beam. Damping constant : Real number ; Default: 12000 ; The resistance to motion of a beam. Higher values make the beam less likely to deform. Deformation threshold constant : Real number ; Default: 400000 ; The amount of force that must be applied to a beam before it will not return to its original length. The lower the value, the easier it is to deform. Breaking threshold constant : Real number ; Default: 1000000 ; The amount of force that must be applied to a beam before it will break. Beam diameter : (optional) ; Real number ; Default: 0.05 (= 5cm) The visual size of a beam in meters. This setting only has a visual effect. Changing it does not modify how a truck will drive. Beam material (optional) ; String ; Default: tracks/beam ; The material used to color the beam. It must be defined in a separate .material file. Plastic deformation coefficient : (optional) ; Real number in range: 0.0 - 1.0 ; Default: 0.0 ; This defines how elastic the deformation of a beam is. It is explained in greater detail below. To use default values without having to type the numbers, use -1 in each field. Example: set_beam_defaults -1, -1, -1, -1 Or if you want to use the default values as a base: set_beam_defaults 9000000, 12000, 400000, 1000000, 0.05, tracks/beam, 0.0 Beware: Excessive spring will result in an unstable chassis. Increasing the damping will help with this, but excessive damping will crash RoR. Higher chassis mass may mitigate that problem if applicable. If you create a light car, you may want to reduce the spring, damping and deformation values to match the real, softer frame of a car, and also increase stability. Be aware that the current default values are \"overspringy\", or \"underdamped\" for stability reasons (that is why trucks often look too springy when they fall down a slope), but on softer designs you can correct this and have a better damping ratio. Missing beam textures may make RoR unstable. Example for a car: ;set_beam_defaults spring, damping, deform, break, diameter, material set_beam_defaults 3000000, 10000, 100000, 250000, 0.02, tracks/beamblack If you want to keep a rigid chassis base and drivetrain, you can do: beams ;base chassis and drivetrain with the default high-strength settings 1,2 2,3 ... 3,4 ;car body, softer setting set_beam_defaults 3000000, 10000, 100000, 250000 5,6 6,7 ... ;return to stronger defaults for the rest (e.g. hydros) set_beam_defaults -1, -1, -1, -1 ... If you want to to make something deform well (like for flexbodies), use these settings for the beam group you want to deform together with the global enable_advanced_deformation option to unleash unlimited beam physics for best results in crash deformation: ;set_beam_defaults spring, damping, deform, break, diameter, material, deform_coef set_beam_defaults 3000000, 10000, 100000, 250000, 0.02, tracks/beamblack, 0.9 The plastic deformation coefficient is 0.0 by default (elastic deformation). By setting it as property you can tune the related beam group to your needs. For example, if a cube made of nodes and beams is crashed to a wall, then the placement of the nodes are displaced, altering the original shape to an irregular one. This also affects the length of beams, if nodes are displaced, the beams may conform to a new shorter or longer length, and staying that way until another outside force is applied. Valid values: 0.0 - 1.0 , do not exceed that range! A plastic deformation coefficient setting of 0.0 is close to the original beam behavior of RoR 0.36.2 (quite elastic). 1.0 is close to the maximum plastic deformation you were able to reach with the former experimental enable_advanced_deformation patch. Never use a break setting lower then a deform setting! This will result in a beam breaking instantly when it starts deforming! Set_beam_defaults_scale \u00b6 This is not a section, but a self-contained line that can be inserted anywhere in the truck file. It changes the scale of all following set_beam_defaults lines to a certain factor: Springiness - Scale: 0-1 Damping constant - Scale: 0-1 Deformation threshold constant - Scale: 0-1 Breaking threshold constant - Scale: 0-1 The default is all 1 for all arguments. set_beam_defaults_scale 1, 1, 1, 1 Example that scales spring to 50%: set_beam_defaults_scale 0.5, 1, 1, 1 Take note: Unlike set_beam_defaults , you must always give all four arguments. Its not possible to leave some out. Any set_beam_defaults line that is scaled will output a line to RoR.log saying Due to using set_beam_defaults_scale, this set_beam_defaults was interpreted as ... Set_node_defaults \u00b6 This is a directive which affects all nodes (including wheel and camera nodes) declared on lines below it. You can use this line many times to make different groups of nodes that have different characteristics (e.g. more grip for wheels, more surface drag for chassis nodes, etc.). The parameters are: loadweight : Real number ; Default: 0.0 ; The default loadweight mass applied to a node. Will be overridden by a per node definition (the option l ). Minimass calculation is unaffected. friction : Real number ; Default: 1.0 ; The amount to multiply the node's friction by. A setting of 2 will double the friction; a setting of 0 will create a frictionless node. volume : Real number ; Default: 1.0 ; The amount to multiply the node's buoyancy. A setting of 2 will double the buoyancy; a setting of 0 will create a non-buoyant node. This only applies when the node is in a fluid. surface : Real number ; Default: 1.0 ; The amount to multiply the node's surface by. A setting of 2 will double the surface; a setting of 0 will create a node with no surface. This only applies when the node is in a fluid. options : (optional) ; Options string ; Set any node-option property as default. You do not need to set the l property if a default loadweight is set. Important: Buoyancy volume and drag surface settings only have effect on fluids defined in ground_models.cfg (mud definitions), so right now they do not work with the standard RoR Water. To use default values without having to type the numbers, use \"-1\" in each field. For example: set_node_defaults -1, -1, -1, -1 Beware: Excessive friction, surface and volume will result in an unstable node/beam structure when driving in mud. If your wheels/truck explodes when driving from solid ground onto mud, lower the friction and/or volume setting. If a wheel cracks while in the mud, lower the volume and/or the surface setting. Syntax is set_node_defaults loadweight, traction, buoyancy, surface Mud tire example, unloaded, increased traction, higher buoyancy, higher drag surface and set to extra per node buoyancy: set_node_defaults -1, 1.1, 5, 1.25, b Chassis, loaded with 5 kg per node, reduced traction, no buoyancy, higher drag surface: set_node_defaults 5, 0.5, 0, 2 Tracks example, high traction, low buoyancy, low surface, loaded with 50 kg per node: set_node_defaults 50, 1.2, 0.3, 0.5 Steam boat paddlewheel, loaded with 75 kg per node, no traction, no buoyancy, high drag surface: set_node_defaults 75, 0, 0, 3 Contactless with default settings: set_node_defaults -1, -1, -1, -1, c The new L node option will help to understand and use set_node_defaults , p node option will boost fps even with tracked vehicles on slower computers. See: nodes Enable_advanced_deformation \u00b6 This is not a section, but a self-contained line that can be inserted anywhere in the truck file. It changes the general beams deformation physics. Use this only once per truck file, it's a general activation and setting of advanced beam physics . Its recommended to place the enable_advanced_deformation before the first beams section in your truck-file. Truck file syntax: enable_advanced_deformation This will remove any limit and thresholds from the set_beam_defaults processing. Its recommended to use it for the development of properly deforming flexbody node\\beam structures. Rollon \u00b6 NOTE: This directive has no effect as of version 0.39.5+ Enables collision between wheels and the contactable textured surfaces of a truck. rollon Contacters \u00b6 The contacters section lists the nodes that may contact with cab triangles. This concerns only contacts with other trucks or loads. You can easily omit this section at first. contacters 34 18 20 22 24 26 28 30 32 Triggers \u00b6 Triggers are special beams which trigger user-specified events when extended/contracted to a given bound. They have no physics attributes and can extend indefinitely. Parameters: Node 1 : Node number/name ; The node where the trigger beam starts. Node 2 : Node number/name ; The node where the trigger beam ends. contraction_trigger_limit : Real number ; The length when the shortkey command gets triggered extension_trigger_limit : Real number ; The length when the longkey command gets triggered shortbound_trigger_action : Positive or negative Decimal number ; On normal triggers without a special option this represents the command key to be triggered at shortbound (1 - 48 [ Version 0.4.0.7+ ] 1 - 84). For other trigger types, look below. longbound_trigger_action : Positive or negative Decimal number ; On normal triggers without a special option this represents the command key to be triggered at longbound (1 - 48 [ Version 0.4.0.7+ ] 1 - 84). For other trigger types, look below. options (optional) : String i : Makes the trigger beam invisible c : Set the boundary calculation to command-style, just for convenience x : Set the trigger to disabled on startup ( default = enabled ), will get useless after first activation by a triggerblocker b : Blocks other commandkeys, shortkey at shortbound, longkey at longbound. If longkey is set to -1 , shortkey will get blocked at short and at longbound. It does not block of manual user inputs, just triggers. B : Blocks other triggers when triggered, a number in shortkey represent the number of triggers to block at shortbound , a number in longkey the number of triggers to release at longbound. A : [ Version 0.38.23+ ] Same as the Blocker B , but inverted activation. Will block while between shotbound and longbound a number of triggers (shortkey) and release if not (longkey). s : Switches commandnumbers when triggered set in shortkey and longkey. Good to build wipers or similar, see examples h : [ Version 0.38.26+ ] You can use triggers to lock or unlock hookgroups ( only hookgroups <= -3 ); Unlocks hookgroups shortkey at shortbound and hookgroup longkey at longbound. H : [ Version 0.38.26+ ] You can use triggers to lock or unlock hookgroups ( only hookgroups <= -3 ); Locks hookgroups shortkey at shortbound and hookgroup longkey at longbound. t : [ Version 0.4.0.7+ ] Continuous trigger, delivers a value of 0 below and at shortbound, a value of 1 over and at longbound. Between these boundaries, this trigger will deliver a value between 0 and 1 (linear), depending on the current position. See \"engine trigger\" for details on how to use this. E : [ Version 0.4.0.7+ ] Engine trigger. This trigger gives you control over various vehicle driving functions. It is recommended to use this in combination with a t -trigger to get precise, continuous control. Works as follows: ''' (remapped) shortbound_trigger_action''': Positive decimal number Takes the number of the engine to be controlled, starting with 0 . As RoR only supports one engine per vehicle at the moment, always put 0 here. ''' (remapped) longbound_trigger_action''': Positive decimal number Takes the number of the function you want to control: 0 : Clutch 1 : Brake 2 : Accelerator 3 : RPM Control (not available at the moment) 4 : Shift Up (use no \"t\"-trigger here). Will shift up on short and longbound. 5 : Shift Down (use no \"t\"-trigger here). Will shift down on short and longbound. boundary_timer (optional) : Positive real number ; default = 1.0 ; Represents the time a boundarycheck is disabled for trigger switches ( option s ) to avoid lockup. triggers ;id1, id2, short, long, shortbound action, longbound action, options ; a trigger between node 11 and 109 triggering commandkey 13 ( ctrl-F1) while in shortbound -10% of original length ; and commandkey 14 (ctrl-F2) when in longbound +10% of original length 11, 109, 0.100, 0.100, 13, 14 ; a trigger between using command boundaries, does exactly the same then the one above 11, 109, 0.900, 1.100, 13, 14, c ; a trigger blocked at startup, needs to be released by a triggerblocker once to work as a normal trigger, ; good for simple robotic programming 11, 109, 0.900, 1.100, 13, 14, cx ; special case triggers: cmdkeyblocker, triggerblocker, triggerswitch ; a commandkeyblocker blocking commandkeys when active, 15 (ctrl-F3) at shortbound and 16 (ctrl-F4) at longbound. 11, 109, 0.900, 1.100, 15, 16, cb ; a commandkeyblocker blocking one commandkey when active, 15 (ctrl-F3) at shortbound and at longbound. 11, 109, 0.900, 1.100, 15, -1, cb ; a triggerblocker blocking the following triggers from checking, blocking 5 at shortbound and releasing 4 at longbound, ; Most times it will block and release the same amount of triggers, but its good for robotics programming to set separate amounts in some cases. 11, 109, 0.900, 1.100, 5, 4, cB ; a triggerswitch switching commandkeys when active, also for user inputs, will switch F1 to F2 and vice versa every time it hits short or longbound, ; release timer is set to 1 second by default, before it can be triggered again. 11, 109, 0.900, 1.100, 1, 2, cs ; a triggerswitch switching commandkeys when active, also for user inputs, will switch F1 to F2 and vice versa every time it hits short or longbound, ; release timer is set to 3 seconds. 11, 109, 0.900, 1.100, 1, 2, cs 3.0 ; an engine trigger, controlling the accelerator (option \"2\") of engine nr. 0. Will give zero throttle in initial position (shortbound), full throttle at longbound, and a linear crossover in between. 11, 109, 1.000, 1.500, 0, 2, ctE Lockgroups \u00b6 This section defines lockgroups for nodes. It has to be AFTER the nodes section Lockgroup Default = -1 , all nodes can be locked by standard hooks with no special lockgroup set Important: Special lockgroup : 9999 skip the node from any locking attempts POSITIVE lockgroups are free to use, the negative range is reserved for RoR built in standard lock-setups. lockgroups ;lockgroup, nodeIDs ; node 5 added to lockgroup 1 1, 5 ;nodes 6, 7, 9 added to lockgroup 2 2, 7, 6, 9 Performance boost option (needs to be BEFORE the nodes section): lockgroup_default_nolock This will set all nodes to 9999 (deny locking) of the truck by default. Any lockgroups defined later in the truck will override this setting for the specified node. Allows you to define exactly where standard hooks can lock to your truck and boost performance a lot when autolock hooks are used. Its recommended to use this option as default. Hooks \u00b6 This section defines special options for hooknodes setup in the nodes section. It has to be placed after the nodes section. id : A node number to identify the hooknode the options apply to. The node number needs to exist and it has to be a hooknode with option h options : no order needed, just place what you need, here is a list of possible options: hookrange: The range a hook scans for a valid node to lock to, Default: 0.4 speedcoef: The speed a hook pulls the node to lock into locking position. Default: 1.0 maxforce: The force limit where a locking attempt is canceled. Default: 100000000.0 hookgroup: The hookgroup a hook belongs to. Standard hook: -1 (Default), Reserved for autolock: -2 , any special hookgroup for triggered hooks -3 or less. Only signed integer are valid. Keyword variants: hookgroup / hgroup lockgroup: The lockgroup a hook belongs to. Lock everything: -1 (Default), all other numbers the hook will lock only to a node with the same lockgroup set. Only signed integer are valid. Keyword variants: lockgroup / lgroup Lockgroup 9999 is reserved for nodes that are skipped while locking attempts. Do NOT use lockgroup 9999 with a hook. timer: Delay timer for autolocking hooks before they attempt to relock. Default: 5.0 . Only positive settings are valid self-lock: This hook can lock to the truck its placed on too. Keyword variants: self-lock / selflock / self_lock auto-lock: This hook will lock automatically to valid nodes in range. Keyword variants: auto-lock / autolock / auto_lock: nodisable: When the force limit defined by maxforce is exceed the locking attempt will NOT disable the linkage beam, but the hook node will stop pulling the node to lock. Works similar to ties then. Variants: nodisable / no-disable / no_disable shortlimit : Minimum range in meters the hook will pull the node to lock to. Default = 0.0 . Keyword variants: shortlimit / short_limit norope : Linkage between hook and node to be locked will act like a beam and not like a rope. Variants: norope / no-rope / no_rope visible : Linkage between hook and node will be visible while locking process and locked. Variants: visible / vis hooks ; id, options ;standard hook, increased scanrange 144, hookrange: 2.15 ;as above, but will cancel locking attempt if pulling force exceeds 100k 145, hookrange: 2.15, maxforce: 100000 ;triggered hook, locks 50% faster, is autlocking with a delay-timer of 7.5 seconds, belongs to hookgroup 12 ( for tiggers with option ''h'' or ''H'' ) and will only lock to nodes with lockgroup 2 set 146, speedcoef: 1.5, auto-lock, timer: 7.5, hookgroup: -12, lockgroup: 2 Standard hooks toggle with L , autolock and triggered hooks detach with ALT+L manually. Hooks with hookgroups < -2 can only be locked automatically or by a trigger. Slide Nodes \u00b6 These are nodes which can slide freely along a 'rail', which is a sequence of connected beams. It's a simple constraining mechanism that introduces new possibilities into RoR and simplifies many existing mechanical structures. There are 2 ways to define a rail: * To specify it in slidenodes section as a second parameter. To specify it in railgroup section and reference it in slidenodes using railgroup_id parameter. A slidenode without a rail is invalid, naturally. Parameters: slide_node : Node number/name ; A node to become slide-node. rail_nodes ( sequence ) (optional) : Comma-separated list of nodes ; default = none, expects railgroup_id: to be used ; Nodes forming a rail the node can slide along. Each two consecutive nodes from this list must have a beam defined between them; for example a list containing 7, 8, 9, 10 would require beams 7 - 8 , 8 - 9 , 9 - 10 to be defined. s (spring_rate) (optional) : Real number prefixed with 's' or 'S' ; default = 9000000 ; Force that holds the node to the rail (in N/m). Write as: s10.98 b (break_force) (optional) : Real number prefixed with 'b' or 'B' ; default = infinity (never) ; Force at which the node will separate from the rail (in N). Write as: b10.98 t (tolerance) (optional) : Real number prefixed with 't' or 'T' ; default = 0 ; Distance from the rail before rail forces are applied to the node. g (railgroup_id) (optional) : Positive decimal prefixed with 'g' or 'G' ; default = none , expects rail_nodes: to be used. ; railgroup defining a rail. Write as: g2 r (attachment_rate) (optional) : [ Version 0.4+ ] Real number prefixed with 'r' or 'R' ; default = disabled ; Attachment rate in seconds. Write as: r2.3 d (max_attachment_distance) (optional) : [ Version 0.4+ ] Real number prefixed with 'd' or 'D' ; default = 0.1 ; Maximum attachment Distance in meters. Write as: d0.23 q (quantity) (optional) : [ Version 0.4+ ] Real number prefixed with 'q' or 'Q' ; default = infinity ; Ignored by parser. Original meaning: number of beams the node can slide along. c (attachment_constraints) (optional) : [ Version 0.4+ ] Two character string: [c|C] + [a|f|s|n] ; default = none a : Attach all. f : Attach foreign. s : Attach self. n : Attach none. slidenodes ;id, node id list 1, 7, 8, 9, 10 slidenodes ;id, node id list, spring, break, tolerance 1, 7, 8, 9, 10, s9000, b10000, t0.1 slidenode_connect_instantly \u00b6 To be documented. Rail Groups \u00b6 Allows specifying a separate rail which can be linked to slidenode(s) later. Parameters: rail_group_id : Positive decimal number ; ID of this railgroup. rail_nodes ( sequence ) : Comma-separated list of [nodes/node-ranges] ; Nodes forming a rail the node can slide along. Each two consecutive nodes from this list must have a beam defined between them; for example a list containing 7, 8, 9, 10 would require beams 7 - 8 , 8 - 9 , 9 - 10 to be defined. Ranges are supported (for example: 1-10 ) railgroups ;railgroupID, node id list 1, 7, 8, 9, 10 slidenodes ;id, railgroupID 1, g1 To create a looped rail group, simply make the last node of the list the same as the first node of the list. Please note that all segments must have beams defined. railgroups ;railgroupID, node id list 1, 7, 8, 9, 7 slidenodes ;id, railgroupID 1, g1 Detacher_group \u00b6 This section defines group of the beams that are deleted if one beam in this group breaks. Very useful for detaching parts of the truck like bumpers, doors, wheels etc. falling of the truck when crashing. All kinds of beams can be set to a detacher_group except wheel generation section, these one will always be \"default\" to avoid deleting the axle of the wheel which results in a crash. Valid detacher group numbers: any positive or negative integer Valid end lines: detacher_group 0 , detacher_group end Group 0 its the default setting and means no group set and is used to end groups. Use positive group numbers for master beams and negative ones for minor beams. A master detacher-beam breaking will brake all beams with the sames group number and all minor beams with the same negative group number (abs(detacher_group)). A minor beam will not break any other beams at all, its just set to break with a group of beams if a master detacher-beam in its group breaks. beams detacher_group 1 0, 1 detacher_group 0 2, 4 3, 5 detacher_group 1 6, 8 7, 9 10, 12 detacher_group 2 11, 13 detacher_group 0 22, 14 detacher_group -1 16, 17 detacher_group 0 This will add beams 0,1 + 6,8 + 7,9 + 10,12 to group 1 , beam 16,17 to group 1(minor) and beam 11,13 to group 2 . Breaking beam 16,17 will not break any other beam. Breaking beam 6,8 i.e, will break and disable beams 0,1 + 7,9 + 10,12 + 16,17 too in the same simulation cycle. Ropes \u00b6 Ropes are special beams that have no compression strength (they can shorten easily) but have standard extension strength, like a cable or a chain. They have also another peculiarity: the second node can \"grab\" the nearest reachable ropable node with the CTRL+L key. Standard use is to use a chassis node as the first node, and a \"free\" node as the second node (free as in not attached by any other beam). The best example of this are the chains of the Multibennes truck. Option: i for invisible [ Version 0.38.18+ ] ropes ;order is important: root->end 116,134 130,136, i 116,135 130,137 Fixes \u00b6 Fixes are nodes that are fixed in place. That means that once put in place in the terrain, they will never move, whatever happens. This is useful for making fixed scenery elements from beams, like bridges. Just add the node number that you want to fix. fixes 2 3 12 Minimass \u00b6 This sets the minimum node mass. Useful for very light vehicles with lots of nodes (i.e. small airplanes). Notes: Without this section, the minimum node weight is 50 kilograms. When using a very low minimass, i.e. below 10 , you should use a low damping value in the Beam defaults in your beams section Nodes with a load weight ( l ) value below the value set in minimass will default to the minimass value. Minimass can be overridden by set_default_minimass . minimass 10.0 Set_default_minimass \u00b6 [ Version 2020.01+ ] This section allows nodes to override the minimum node weight, either the value set in minimass or the default 50kg if not using minimass. This is very useful if you already have a light vehicle tuned for a certain minimass value and you need to add a lighter node than what is set in your minimass value. It is placed in the nodes section, the new minimum weight will be applied to all following nodes. Example: nodes ;standard 50kg nodes 0, 0.54, 0, -0.567, n 1, 0.54, 0.18, -0.567, n 2, 0.54, 0, -0.4536, n ;set nodes 3-5 minimum weight to 2kg set_default_minimass 2 3, 0.54, 0.18, -0.4536, n 4, 2.1, 0.2, -0.567, n 5, 2.1, 0.2, -0.4536, n ;reset to default set_default_minimass 50 Note: When adding light nodes to a vehicle which features heavy nodes, you may have to lower the beam defaults spring/damping values to accommodate for the lighter weight! Ties \u00b6 Ties are special beams that have no compression strength (they can shorten easily) but have standard extension strength, like a cable or a chain. Like ropes, ties grab the nearest reachable ropable node with the O key. But there is a twist: unlike ropes, they disappear when not attached (because they have no extremity node at rest) and they automatically shorten until the extension forces reaches a threshold. They are very useful to solidly strap a load to a chassis. Parameters: Root node : Node number/name ; The root node (the starting point of the beam) Max. reach length : Real number ; The maximum reach length Auto shorten rate : Real number ; The rate of auto-shortening Min. length : Real number ; The shortest length possible (proportional to original length; 1.0 means no shortening) Max. length : Real number ; The greatest length possible (proportional to original length; 1.0 means no extension; recommended you keep it as 1.0 ). Options (optional) : String ; default = n n : Visible (default) i : Invisible s : [ Version 2020.01+ ] Prevents self locking. Max. stress (optional) : Real number ; default = 12000 ; The force (in Newtons) when the ties stop to shorten. Group (optional) : Positive decimal number ; default = none ties ;root, max len, rate, short, long (, flag, max_stress, group) 58, 1.5, 0.5, 0.3, 1.0 62, 1.5, 0.5, 0.3, 1.0 59, 1.5, 0.5, 0.3, 1.0 63, 1.5, 0.5, 0.3, 1.0, n, 5000, 2 Ropables \u00b6 This section lists the nodes that can be caught by ropes or ties. Good use is to define some ropable nodes at the front and back of the truck to allow towing the truck. ropables ;node-id, group, multilock 0, 0, 0 1, -1 The group and multilock arguments are only available in RoR 0.36.3 and later. Group: Default: -1 = all groups. Multilock: 0 =disable, 1 =enable: This specifies if this ropable can be locked by many ties/ropes. Particles \u00b6 This enables/disables a particle cannon in the game (with the G key). particles ;source, back reference, particle_system_name 19, 5, tracks/particles/water1 19, 5, tracks/particles/waterGreen 16, 3, tracks/particles/water1 16, 3, tracks/particles/waterRed (You can create your own particle. A template can be found in Rigs of Rods\\resources\\particles.zip\\water.particle ) Torque Curve \u00b6 Torque curves affect the behavior of the engine. This section allows you to assign predefined or user-defined torque curve to a truck. It can be used in 2 ways: Usage #1: Predefined curve \u00b6 curve_name : Torque curve name ; default = default ; Predefined options are: default , diesel , turbodiesel , gas , turbogas , wheelloader , compacttractor , tractor , hydrostatic . torquecurve turbogas Usage #2: Defining custom curve \u00b6 power : Real number ; RPM where the power begins torque_percentage : Real number ; Power as a percent of total torque specified in section \"engine\" parameter #3 \"Torque\" (0 = 0%, 0.5 = 50%, 1.5 = 150%) It's suitable to define the torque to the engine RPM set in the engine definition plus 25% ( multiply the value with 1.25) to get the overrev area defined. The following example would be good for a maximum engine RPM set to 2800: torquecurve 0, 0.00 1000, 0.79 1500, 0.90 2000, 0.97 2500, 0.99 3000, 0.90 3500, 0.77 Engine dying in idle and first gear? Just define a single higher peak value where you want the engine to idle... like adding: ... 700, 0.2 800, 0.6 900, 0.4 ... to the example above in the right spot will result the engine idle a little bit higher then 800 rpm in first gear. The example to the left shows a screenshot of a torquecurve made for a small diesel engine: Idle: ~600 RPM, Max @ 1900 RPM, slight and constant torque increase over the used RPM bandwidth, hard torque drop off in the over-rev area. Cruise Control \u00b6 This section offers options to the cruise control feature (activated by pressing space bar): lower limit : Sets the minimum speed cruise control can be activated. Unit is meters per second (divide kph by 3.6 . Example: 36 kph/ 3.6 = 10 mps) auto brake : If activated, the vehicle brakes if velocity is faster than set in cruise control. 0 =auto brake off, 1 =auto brake on ;cruisecontrol lowlimit autobrake cruisecontrol 10 1 In the example above, minimum speed for cruise control to be activated is 10 mps ( 36 kph). The auto brake feature is activated. Speedlimiter \u00b6 Limits the speed of a vehicle. If the speed is above the limit, the vehicle will not accelerate any further. Insert the limit in meters per second (divide kph by 3.6 . Example: 36 kph/ 3.6 = 10 mps) ;speedlimiter <speed in m/s> speedlimiter 10 In the example above, the maximum speed of the vehicle is 10 mps ( 36 kph), it will not accelerate any further. Axles \u00b6 This section defines axles on a vehicle, allowing more accurate distribution of torque among the wheels. The axle section introduces open differentials, and spooled (aka locked) differentials. They are toggled with the W key. By adding axles to your vehicle file you override the propulsed property for the tires. Only wheels connected to an axle are powered, if multiple axles are defined the axles are interconnected in a locked manner. If no axle section is defined the old model of equal power distribution is used. Because the axle sections looks up already defined wheels, it must be defined AFTER the wheels have been defined. The axle section is different from other sections in that it is broken into properties. Properties are not order dependent. Currently the available properties are: w1(<node1> <node2>) - This defines which wheel the axle is attached to, <node1> and <node2> Refer to the node1 and node2 as defined in the wheel section w2(<node1> <node2>) - Wheel 2, same as w1, this is the second wheel attached to the axle. w1 and w2 are interchangeable. d(type) - Defines the available differential types for this axle. the list of axles is cycled through in the order specified, differential types maybe specified more than once. Each differential type is specified by a single letter, the letters are not to be separated by spaces or any other character. If no differentials are specified the axles will default to opened and locked. Available differential types o - Open l - Locked (wheels locked together regardless of torque input) s - Split evenly (each wheel gets equal torque regardless of wheel speed) v - Viscous [ Version 2020.01+ ] (applies locking force based on the amount of torque) Sample axle section: axles ; axle 1 w1(1 2), w2(3 4), d(ol) ; axle 2 w1(5 6), w2(7 8), d(l) Interaxles \u00b6 In [ Version 2020.01+ ] and above you can define inter axle differentials on a vehicle, allowing more accurate distribution of torque among the axles. They are toggled with CTRL+W . Parameters: axle_1 : The number of the first axle, with the first defined axle starting at 1 . axle_2 : The number of the second axle, with the first defined axle starting at 1 . d(type) : Similar to the axles section Sample interaxles section: interaxles ; axle_1, axle_2, d(type) 2, 3, d(vlso) Transfercase \u00b6 In [ Version 2020.01+ ] and above you can add a transfer case on a vehicle. Parameters: axle_1 : The number of the first axle, the one which is always driven. axle_2 : The number of the second axle, the one which is only driven in 4WD mode. 2wd_mode : Allows/disallows 2WD mode. 2wd_lo_mode : Allows/disallows 2WD Lo mode. gear_ratio(s) : Alternate gear ratios in Lo mode. If none are specified, Lo mode will be disabled. Notes: Requires an axles section defined first! SHIFT+W switches between 2WD/4WD mode. If alternate gear ratios are specified, ALT+W switches between Hi/Lo mode. Sample transfercase section: ;Basic transfer case, no alternate ratio(s) transfercase ;default driven axle, alternate axle, has 2wd mode, has 2wd lo mode 1, 2, 1, 0 ;Transfer case with alternate ratio(s) transfercase ;default driven axle, alternate axle, has 2wd mode, has 2wd lo mode, alternate ratio(s) 2, 1, 1, 0, 4.11, 3.1, 2.72 Wheeldetachers \u00b6 [ Version 0.4.7.0+ ] this section allows you to disable power to a wheel when a detacher_group breaks. wheeldetachers ;wheel_id, detacher_group 0, 1 1, 2 Parameters: wheel_id : Real number ; The wheel number, with the first defined wheel starting at 0 . detacher_group : Real number ; The d etacher_group number. Example usage: beams ;front right wheel set_beam_defaults 12500000, 28600, 1860000, 6968000 detacher_group 1 1, 2, i 3, 4, i 5, 6, i 7, 8, i detacher_group 0 ;front left wheel detacher_group 2 9, 10, i 11, 12, i 13, 14, i 15, 16, i detacher_group 0 meshwheels ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, side, meshname material 0.35, 0.21, 0.5, 14, 1, 2, 9999, 1, 1, 18, 200.0, 300000.0, 2000.0, l, dodgechargerwheel.mesh dodgechargerband 0.35, 0.21, 0.5, 14, 3, 4, 9999, 1, 1, 26, 200.0, 300000.0, 2000.0, r, dodgechargerwheel.mesh dodgechargerband wheeldetachers ;wheel_id, detacher_group 0, 1 1, 2 Collisionboxes \u00b6 In RoR 0.4.0.5 and above you can define collisionboxes. In earlier versions of RoR, there was only one bounding box for truck activation per object, which was defined by the outermost nodes. With collisionboxes, you get the ability to define the nodes that should be used for the activation bounding box calculation. It is also possible to define multiple bounding boxes, for example to exclude some areas from activation. Syntax: collisionboxes ;node id list box 1 48, 58, 59, 67 ;node id list box 2 5, 6 ... ;node id list box n ... Collisionboxes can give you a huge performance increase in situations where many beam objects would have been activated before, for example a container crane with many containers underneath. Rescuer \u00b6 rescuer This single keyword placed in the truck file will make the truck a rescuer, like the Scania Wrecker. These vehicles can be entered by pressing R . Look & Feel \u00b6 Managedmaterials \u00b6 Managed materials helps you to use complex material effects (for example reflective materials like chromes, dynamic damage materials) without having to deal with the technical complexity of writing a shader for Ogre3D. Rigs of Rods comes with a set of standard shader effects, and with the Managedmaterial section you can pick the effect you want and adapt it for your vehicle. The shader library will grow with time, so the set of effects available in this section will grow with time. The generic format of this section is: Material name - The name of the material you are creating. You can use this material for any of your meshes (flexmeshes, props, etc.). This material name must not be defined anywhere else (for example in a .material file). Effect name - The name of the effect you want to use. Valid names are defined below. Effect parameters - A variable number of parameters, depending on the effect your are using. See below for the description. Do not use a comma to separate parameters in a managedmaterial section! Also, you must declare your managed material before they are used. That means that the managedmaterial section should come before the flexmesh, props, wheels, or any section that will use this material. Currently available effects: flexmesh_standard - This effect defines an opaque, reflective and damageable material for flexmeshes. This will work only for flexmeshes! It takes 3 parameters: A standard texture name: this is the base, undamaged texture. (The diffuse map.) A damaged texture name (or - if no damage texture): Should be similar to the standard texture, but with damage. A specular map texture name (or - if no specular map texture): a greyscale image that maps the \"shininess\" of the material, from dark for matte to white for chromed. Technically this isn't a specular map but a reflectivity map. flexmesh_transparent - This effect defines a semi-transparent, reflective and damageable material for flexmeshes. This will work only for flexmeshes! It takes 3 parameters: A standard texture name: this is the base, undamaged texture. The alpha channel of this texture is used to define transparency. (The diffuse map.) A damaged texture name (or - if no damage texture): Should be similar to the standard texture, but with damage. A specular map texture name (or - if no specular map texture): A greyscale image that maps the \"shininess\" of the material, from dark for matte to white for chromed. Again, technically this isn't a specular map but instead a reflectivity map. mesh_standard - This effect defines an opaque, reflective material for any mesh (e.g. wheel rims, props, etc.) It takes 2 parameters: a standard texture name: This is the base texture. a specular map texture name (or - if no specular map texture): A greyscale image that maps the \"shininess\" of the material, from dark for matte to white for chromed. mesh_transparent - This effect defines a semi-transparent, reflective material for any mesh (e.g. windows) It takes 2 parameters: a standard texture name: This is the base, undamaged texture. The alpha channel of this texture is used to define transparency. a specular map texture name (or - if no specular map texture): A greyscale image that maps the \"shininess\" of the material, from dark for matte to white for chromed. WARNING: Your texture file names must not start with - . The parser would treat the - as \"no texture placeholder\" and ignore the rest. Examples: managedmaterials ;new_material effect parameters... mainbody flexmesh_standard mytruckbody.png mytruckbody-dmg.png mytruckbody-spec.png windows flexmesh_transparent mytruckbody.png mytruckbody-dmg.png mytruckbody-spec.png wheels mesh_standard mytruckwheels.png mytruckwheels-spec.png A note about shaders for power-users: You can still use your own, non managed, Cg shaders by manually defining your .material , .program and .cg . Consult the Ogre3D documentation for more details. If you think you have made a good shader that can be helpful to other modders, submit it to GitHub for inclusion to the managedmaterial library of RoR. Set_managedmaterials_options \u00b6 This specifies options for all FOLLOWING managed material lines. Parameters: doublesided : 0 (single sided) or 1 (double sided) ; default = 0 (single sided) ; . Determines if the mesh should be visible from both sides or not. IMPORTANT: This parameter treats 1 as \"yes\" and anything else as \"no\". This is required for backwards compatibility. ; set_managedmaterials_options doublesided set_managedmaterials_options 1 Flares \u00b6 Flares allow you to add lights to your truck. They work as light sources in OGRE and will illuminate other objects (if enabled in settings). See also: Flares Tutorial Required parameters: Reference node : Node ID ; Node which defines origin of flare-placement coordinate system X axis node : Node ID ; Node which defines X-axis of flare-placement coordinate system Y axis node : Node ID ; Node which defines Y-axis of flare-placement coordinate system Flare X offset : Real number ; Flare position on X axis in % of distance from ref-node to X-node Flare Y offset : Real number ; Flare position on Y axis in % of distance from ref-node to Y-node Optional parameters: Type : Character ; default = f (headlight) ; Type of flare. f (default mode when not stated): Headlight. b : Brakelight. l : Left blinker. r : Right blinker. R : Reverse light (on when driving in R gear) u : User controlled light. (i.e. fog light) (see control numbers) Control number : Integer ; default = -1 For u flares, enter value 1-10: 1 would be CTRL+1 , 2 would be CTRL+2 , and so on. For other flare types, enter -1. Special value: 12 - Parking brake indicator (not working in version 2021.04) Blink delay (ms) : Integer ; default = -2 ; Delay between on/off change, in milliseconds. A value of 500 means that the light is 500ms on and 500ms off. Use a value of 0 to create a non-blinking light. Special value: -1 to use the default value of 500ms. Special value: -2 non-blinking light except blinkers, which will have default 500ms. Flare size : Real number ; default = -1 ; This determines how big the flare will be. Reasonable values are between 0.1 and 5 ( 0.1 = 10% of default size). If the size is smaller then 0 , then the flare will be independent of the camera angle. (So the flare does not get smaller when you move the camera) Material Name : String ; default = 'default' ; This field determines what material should be used for the flare display. If you want to use the standard material, use default . Please note that there is not comma between the material name and the size argument. You can use tracks/aimflare to position your flare. Examples: flares ;RefNode, X, Y, OffsetX, OffsetY, Type, ControlNumber, BlinkDelay, size MaterialName ;example for a most default one: 51, 1, 79, 0.23, 0.50, b, -1, 0, -1 default ;example for a custom brake light 51, 1, 79, 0.23, 0.50, b, -1, 300, 0.2 myTruck/MyBrakeFlare ;example for a user controlled Fog Light (toggled by CTRL+1) 51, 1, 79, 0.23, 0.50, u, 1, 0, 0.3 myTruck/MyFogFlare Flares2 \u00b6 Flares2 are the same as normal flares, except that they add an offset-z argument in between: flares2 ;RefNode, X, Y, OffsetX, OffsetY, OffsetZ, Type, ControlNumber, BlinkDelay, size MaterialName 51, 1, 79, 0.23, 0.50, 0.50, b, -1, 300, 0.2 myTruck/MyBrakeFlare Materialflarebindings \u00b6 See also: Flares Tutorial This can bind a material to a flare, so that the material changes with the flare's on/off status. The format is as follows: flare number : Counting starts from zero. Just count down your flares in the flares section to find the correct number. material name : The material that you want to change. It must contain one technique, one pass and a special Texture Unit State (see below for an example) flares 51,1,79, 0.23, 0.50, b, -1, 300, 0.2 myTruck/MyBrakeFlare materialflarebindings 1, myBrakeMaterial The material must use an animated texture, as shown below: material myBrakeMaterial { technique { pass { texture_unit { anim_texture truck_brake_material.png 2 0 } } } } Put the off-state of the brakelight into the file truck_brake_material_0.png and the on-state into truck_brake_material_1.png . The 2 and 0 at the end should not be changed. This section should be after the flares section and before the props and flexbodies section in order for the lights to work properly. COMPATIBILITY NOTE: Parameters #1 and #2 can also be separated by just space, the parser will silently accept it. Props \u00b6 This allows you to \"stick\" any 3D mesh to a triangle of points of a truck. You can use it to stick air intakes, horns, seats, dashboard, bumpers, whatever to the truck. Note that there will be no collision detection with these objects. Like flares, they use a vector coordinate system instead of normal right-angle coordinates. Props are positioned relative to 3 nodes of the chassis: One node is the reference node, and the two others define a base (x,y). Props are positioned relative to the reference node by adding proportions of the vectors ref->X, ref->Y, with the normal being used as well. Parameters are: reference_node : Node number/name ; The base node, used to define the coordinate system x_direction_node : Node number/name ; The node that defines the X direction (this can be visualized as a line pointing from the reference node to this node) y_direction_node : Node number/name ; The node that defines the Y direction (this can be visualized as a line pointing from the reference node to this node) x_offset : Real number ; The amount the prop should be moved in the X direction from the reference node . The distance it is moved depends on the distance between the Reference node and the '''X direction node '''(it's proportional): (0) leaves the prop on the reference node, (1) moves it all the way to the X direction node , and (0.5) puts the prop half-way between the two y_offset : Real number ; The amount the prop should be moved in the Y direction from the reference node . Like the X direction offset , the amount it is proportional to the distance between the reference node and the Y direction node . z_offset : Real number ; Imagine a surface which the X and Y directions pass straight through. If looking along that surface is the forwards direction, then this field moves the prop straight up. Unlike the X direction offset and the Y direction offset , the amount for the straight up offset is measured in meters x_axis_rotation : Real number ; The amount the prop should be rotated about the X axis y_axis_rotation : Real number ; The amount the prop should be rotated about the Y axis z_axis_rotation : Real number ; The amount the prop should be rotated about the 'straight up' axis mesh_name_or_special_prop : String (may start with a keyword) ; The name of the Ogre3D mesh object used for the prop. If the mesh name starts with one of the following keywords, it will have special behavior: \"dashboard\" : A custom dashboard + steering wheel mesh. See below. \"dashboard-rh\" : A custom dashboard +steering wheel mesh on right side. See below. \"leftmirror\" : Left rear view mirror. \"rightmirror\" : Right rear view mirror. \"seat\" : Driver's seat: Positions the driver character and turns translucent if appropriate. Skins the prop using material driversseat . Note: if multiple \"seat[2]\" props are defined, the first one is the driver's seat. \"seat2\" : Driver's seat: Same as \"seat\" except it doesn't force the driversseat material. Note: if multiple \"seat[2]\" props are defined, the first one is the driver's seat. \"beacon\" : A beacon. Color and flare material are adjustable (default = orange) \"redbeacon\" : A red beacon which flashes red. Fixed color and flare material. \"lightbar\" : Police lightbar beacon, flashes red and blue (fixed). Also marks the vehicle as \"police car\" and sets up some special sounds and controls. \"spinprop\" : Plane propeller. Please note that if you want to stick wheel meshes on a wheel, the third node has to be taken from one of the outer segments. props ;ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh 93, 95, 92, 0.50, 0.37, 0.0, 90, 0, 0, airintake.mesh Note: The X offset and the Y offset should logically between 0 and 1 , or if the body flexes too much the prop will not stick to the body correctly. The coordinate system is actually really similar to 'normal coordinates', but it allows the angle between the two axes (ie. the angle between the X node , the Reference node , and the Y node ) to be any value, not just 90 degrees. If that angle can be made to be 90 degrees, then the weird coordinate system will turn into 'normal coordinates'. This can be used to make prop placement easier. For 0.38.8 and later: You can set the cameramode in which the prop should be shown: ; -2 = all the time, -1 = external only, >=0 cinecam number prop_camera_mode -1 You can disable shadows of the last specified flexbody: disable_flexbody_shadows [ Version 0.35+ ] Disables shadow casting of the last prop to improve complex truck FPS. disable_prop_shadow COMPATIBILITY NOTE: Parameters #9 \"Z rotation\" and #10 \"Mesh name\" can be delimited by just space. Parser will emit a warning. Special Prop: Dashboard \u00b6 Steering wheel [ Version 0.35+ ] Here you can see the standard reference nodes, and offset for the dashboard. Then, there is the steering wheel mesh, and its offsets. Parameters: reference_node : Node number/name ; Like ordinary prop x_direction_node : Node number/name ; Like ordinary prop y_direction_node : Node number/name ; Like ordinary prop x_offset : Real number ; Like ordinary prop y_offset : Real number ; Like ordinary prop z_offset : Real number ; Like ordinary prop x_axis_rotation : Real number ; Like ordinary prop y_axis_rotation : Real number ; Like ordinary prop z_axis_rotation : Real number ; Like ordinary prop mesh_1 : String with keyword \"dashboard\" ; Mesh1: See rules below; MUST contain keyword dashboard mesh_2 : String ; Mesh2: See rules below dashboard_x_offset (optional) : Real number ; default = -0.67 dashboard_y_offset (optional) : Real number ; default = -0.61 dashboard_z_offset (optional) : Real number ; default = 0.24 max_turn_angle_degrees (optional) : Real number ; default = 160 Examples: ; NOTE: Lines starting with ; are comments ; No optional parameters: The default wheel. ; Param mesh#1 must contain \"dashboard\" keyword and point to a valid mesh. ; Param mesh#2 is ignored, can contain a placeholder string. ; ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh#1 mesh#2 xoffset, yoffset, zoffset, rotationangle 72, 71, 74, 0.50, 1.0, -0.05, 0, 0, 0, my-dashboard.mesh ; ------------------------------------------------------- ; BAD EXAMPLE: Params \"Mesh#2, X, Y, Z\" only take effect if they are all present. The following line has the same effect like line above (Z offset is missing)! ; Param mesh#1 must contain \"dashboard\" keyword and point to a valid mesh. ; Param mesh#2 is ignored ; Params X, Y, Z are ignored because Z is missing. ; ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh#1 mesh#2 xoffset, yoffset, zoffset, rotationangle 72, 71, 74, 0.50, 1.0, -0.05, 0, 0, 0, my-dashboard.mesh ~~~ -0.67, -0.61, ; ------------------------------------------------------- ; Params \"X, Y, Z\" are present: an example for a custom one with 720 degree: ; Param mesh#1 must contain \"dashboard\" keyword and point to a valid mesh. ; Param mesh#2 must contain a mesh name. ; ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh#1 mesh#2 xoffset, yoffset, zoffset, rotationangle 72, 71, 74, 0.50, 1.0, -0.05, 0, 0, 0, my-dashboard.mesh my-wheel.mesh -0.67, -0.51, 0.14, 720 Special Prop: Beacon \u00b6 Change the beacon's color and flare material [ Version 0.35+ ] If you want to use you own mesh as beacon it should be named beacon-<somename>.mesh, e.g. beacon-blue.mesh The only difference between this and a standard beacon is the flarematerialname e.g. tracks/redbeaconflare which sets the color of the light, and the RGB value of the flash (The last three numbers), that sets the color of the light that is reflected from objects when the beacon lights them. NOTE: All special parameters are required, otherwise none of them will take effect. Parameters: reference_node : Node number/name ; Like ordinary prop x_direction_node : Node number/name ; Like ordinary prop y_direction_node : Node number/name ; Like ordinary prop x_offset : Real number ; Like ordinary prop y_offset : Real number ; Like ordinary prop z_offset : Real number ; Like ordinary prop x_axis_rotation : Real number ; Like ordinary prop y_axis_rotation : Real number ; Like ordinary prop z_axis_rotation : Real number ; Like ordinary prop beacon_mesh_name : String with keyword \"beacon\" ; The beacon mesh; MUST contain keyword beacon flare_material_name : String ; Material to use for the flare flare_color_red : Real number ( 0 - 1 ) ; Intensity ( 0 = full dark, 1 = full bright) . This color will be mixed with color of the flare texture. If the texture is white, all coloring is specified this way. flare_color_green : Real number ( 0 - 1 ) ; Intensity ( 0 = full dark, 1 = full bright). This color will be mixed with color of the flare texture. If the texture is white, all coloring is specified this way. flare_color_blue : Real number ( 0 - 1 ) ; Intensity ( 0 = full dark, 1 = full bright). This color will be mixed with color of the flare texture. If the texture is white, all coloring is specified this way. Examples: ; NOTE: Lines starting with ; are comments ;ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh flareMaterialName colorRed, colorGreen, colorBlue ; the default beacon would be: 19, 73, 16, 0.1, 0.1, 0, 90, 0, 0, beacon.mesh tracks/beaconflare 1, 0.5, 0 ; the red beacon would be: 19, 73, 16, 0.1, 0.1, 0, 90, 0, 0, beacon.mesh tracks/redbeaconflare 1, 0, 0 ; example for a custom beacon: 19, 73, 16, 0.1, 0.1, 0, 90, 0, 0, beacon.mesh tracks/greenflare 0, 1, 0 Add_animation \u00b6 This directive adds an animation to last defined prop. Up to 10 rotations and offsets depending on different sources can be used on one prop. Parameters: Ratio : Real number ; A coefficient for the animation, prop degree if used with mode: rotation and propoffset if used with*' mode: offset*'. Lower limit : Real number ; Empty value = 0 ; The lower limit for the animation, remember to use a negative value when source can be negative (as in wheel steering.) Use 0 for both options to get default limits (Full circle rotation ( -180/+180\u00b0) or -10/+10 for offsets. Limits always apply to the props' spawning position. Upper limit : Real number ; Empty value = 0 ; Upper Limiter for movement, remember to use a positive value when source can be negative (as in wheel steering.). Use 0 for both options to get default limits ( Full circle rotation (-180/+180\u00b0) or -10/+10 for offsets. Limits always apply to the props' spawning position. (Attributes) : { Key: options } pairs ; Parameter consisting of name, colon, and | - delimited list of options. source: Source type(s) joined with | ; A list of sources to use, it is recommended to use only 1 per add_animation line, though multiple sources are possible too. mode: Mode type(s) joined with | ; A list of modes to use, multiple modes are valid event: Key event string ; An optional input, only needed for source: event . It determines the keypress event to catch for the animation autoanimate (optional) : \"autoanimate\" keyword ; rotation or offset is applied as long as source is not 0. Useful for driveshafts, fans, etc. \"noflip\" (optional) : \"noflip\" keyword ; a prop will flip to the opposite limit when a limit is reached, with this mode it just stops at - \"bounce\" (optional) : \"bounce\" keyword ; a prop will flip to the opposite limit when a limit is reached, with this mode it just rebound at the set limit. Only useful with mode: noflip \"eventlock\" (optional) : \"eventlock\" keyword ; will lock a toggled event in its current status, useful for switches and status levers. Only works with mode:event and a correct defined event: source: airspeed - This prop animates with the actual speed (not speedometer indicated speed) for any vehicle. vvi - This prop animates with the vehicle's vertical velocity. altimeter100k - This prop animates with the vehicle's altitude up to 100,000 feet. altimeter10k - This prop animates with the vehicle's altitude up to 10,000 feet, at which point it will revert back to its original length. altimeter1k - This prop animates with the vehicle's altitude up to 1,000 feet, at which point it will revert back to its original length. These three animators can be used to create altimeters with three needles or similar objects/ aoa - This prop animates with the dashboard's angle of attack. flap - This prop animates with the flap setting on the vehicle. airbrake - This prop animates with the airbrake setting on the vehicle. roll - This prop animates with the vehicle's roll. It will flip at 180 degrees roll to -180 degrees roll. This option can be used for an automatic trim feature. pitch - This prop animates with the vehicle's pitch. It will flip back at 180 degrees pitch to -180 degrees pitch. This option can be used for an automatic trim feature. throttle1 - This prop animates with the throttle setting of an aircraft's first engine. This option can be used for thruster mechanics. Valid sources include throttle1 , throttle2 , etc. etc. up to throttle8 . rpm1 - This prop animates with the RPM of an aircraft's first engine. This option can be used for thruster mechanics. Valid sources include rpm1 , rpm2 , etc. etc. up to rpm8 . aerotorq1 - This prop animates with the torque of an aircraft's first engine. Note that this only works for propeller engines, because torque is not applicable to jets. Valid sources include aerotorq1 , aerotorq2 , etc. etc. up to aerotorq8 . aeropit1 - This prop animates with the pitch of an aircraft's first engine. Note that this only makes sense with propeller engines, pitch is not applicable to jets. Valid sources include aeropit1 , aeropit2 , etc. etc. up to aerotorq8 . aerostatus1 - This prop animates with the On/Off/Fire status of an aircraft's first engine. Valid sources include aerostatus1 , aerostatus2 , etc. etc. up to aerostatus8 . brakes - This prop animates with the vehicle's brake status. accel - This prop animates with the vehicle's accelerator status. clutch - This prop animates with the vehicle's clutch status. speedo - This prop animates with the speedometer indication. It scales with the guisetting speedometer. (It is best to use it even if there is no custom overlay dashboard; it simplifies the adjustment a lot.) tacho - This prop animates with the vehicle's RPM. It scales with guisetting tachometer. (It is best use it even if there is no custom overlay dashboard; simplifies the adjustment a lot.) turbo - This prop animates with the vehicle's turbocharger PSI. parking - This prop animates with the vehicle's parking brake status. shifterman1 - H-shift left/right ( Reverse | 1-2 | 3-4 | 5-6...11-12 as positions, scales with engine settings (maxGear) shifterman2 - H-shift forth/back animator Reverse-2-6-8-10-12 | 1-3-5-7-9-11 as positions sequential - sequential shift ( i.e for tiptronic or wheel shift pedals), can be used for commands too (no settable limits then) shifterlin - for auto transmission animations or gearselect indicators (special limits rules apply for this one, see below!) torque - current engine torque heading - This prop animates with the current heading of the truck. difflock - This prop animates with the difflock status of the truck (It only works when differentials are present in the truck.) rudderboat - This prop animates with the steering hydro on boats. throttleboat - This prop animates with the throttle status on boats. steeringwheel - This prop animates with the steering status for trucks. aileron - This prop animates with the aileron status for airplanes. elevator - This prop animates with the elevator status for airplanes. rudderair - This prop animates with the rudder status for airplanes. permanent - This is a permanent source, which is always active when you are in the truck. event - A source triggered by a keypress, needs exactly one defined event. Specials: Limits do not apply for mode:sequential . In this case the options are the F-Keynumbers of the command-movement you want to catch. Option 0, 0 with mode:sequential provides a shift_up/shift_down animation for a sequential shifter. Look into the Examples. mode: x-rotation - Rotate around the x-axis, in some cases special rules apply here see below (gimbal lock) y-rotation - Rotate around the y-axis, in some cases special rules apply here see below (gimbal lock) y-rotation - Rotate around the y-axis, in some cases special rules apply here see below (gimbal lock) x-offset - Offset along the x-axis y-offset - Offset along the y-axis z-offset - Offset along the z-axis event: rorkeypressevent - All RoR keypress events. ( A list of valid RoR events .) How to use: It's best to test is a prop that has no rotations or offsets set on a node triangle like this: n1, 0, 1, 0 n2, 0, 1, 1 n3, 0, 0, 0 Add the add_animation line AFTER the prop in your prop section that you want to animate: Sources add_animation 200, 0, 0, source: steeringwheel, mode: x-rotation ;Prop now animated by steeringwheel input. ;Refer to the '''source:''' list above for the different sources avail. add_animation 10, 1, 2, source: sequential, mode: y-rotation add_animation 10, 3, 4, source: sequential, mode: x-rotation ;a joystick animation related to F1-F4 ( look below for the GIMBAL LOCK issue!) add_animation 0.02, 1, 0, source: sequential, mode: y-offset ;button animation getting pressed on F1 add_animation 10, 0, 0, source: sequential, mode: y-offset ;sequential shifter reacting to shift up/down Modes add_animation 145, 0, 0, source: airspeed, mode: x-rotation ;Airspeed indicator needle rotating x axis add_animation 145, 0, 0, source: airspeed, mode: y-rotation ;Airspeed indicator needle rotating y axis add_animation 145, 0, 0, source: airspeed, mode: z-offset ;Airspeed indicator sliding z axis add_animation -90, 0, 0, source: pitch , mode: y-rotation add_animation 180, 0, 0, source: roll, mode:x-rotation ;virtual attitude indicator (artificial horizon)( look below for the GIMBAL LOCK issue!) Events add_animation 45, 0, 0, source: event, mode: x-rotation, event: TRUCK_TOGGLE_CONTACT ;Prop will rotate 45\u00b0 x-axis when the starter key is pressed. ;There is only one event allowed with '''mode:event''' add_animation 45, 0, 0, source:event, mode:x-rotation, eventlock, event:TRUCK_TOGGLE_CONTACT add_animation 45, 0, 0, source:event, mode:x-rotation, event:TRUCK_STARTER ;This rotates the prop related to ignition status and additional 45\u00b0 when the starter is pressed ;It is valid to stack up to 10 animations of any kind to one single prop. Autoanimation add_animation 0.005, 0, 0, source: permanent, mode: x-offset, autoanimate ;It will animate the related prop on the x-offset add_animation -0.005, 0, 0, source: permanent, mode: x-offset, autoanimate ;Moving direction changed. add_animation -0.005, 0, 0, source: permanent, mode: x-offset, autoanimate, noflip ;Will stop now at the limit and not flip anymore. So now it just moves one direction and thats it. add_animation -0.005, 0, 0, source: permanent, mode: x-offset, autoanimate, noflip, bounce ;Will start moving left / right itself just according to the default limits add_animation -0.005, -5, 20, source: permanent, mode: x-offset, autoanimate, noflip, bounce ;Will start moving left / right itself just according to the user custom limits. ;Keep in mind: for rotation and offset, first limits needs to be <=0 second >=0 ;Limits are like prop offsets for offsets, default ( opt1=opt2=0) limit is +-10 add_animation -0.005, 15, 20, source: permanent, mode: x-offset, autoanimate, noflip, bounce ;The prop will jump instantly at start and bounce between that limits, which might be a bit confusing. add_animation -0.005, 15, 20, source: permanent, mode: x-rotation, autoanimate ;Rotating instead of sliding. All the settings for offsets can be used with rotation too. ;Limits are in degree for rotations, default ( opt1=opt2=0) limit is +-180\u00b0 ( a full circle) GIMBAL LOCK To avoid axis corruption when rotating props: - Always place your prop with a y-rotation of 0 or 180\u00b0 . If you need to align your prop in another way, rotate the mesh in your mesh-editor! To avoid axis corruption when rotating multiple props: - Use only the x and y axis together, skip z. If you need 3 axis rotation, do the z-axis with a n/b-rotator as the base for your prop definition nodes. Gimbal lock Flexbodies \u00b6 Flexbodies are pretty much the same as props. The only difference between them is that flexbodies deform. You can declare several flexbodies. Each must be composed of the two lines (prop-like line and forset line). (sub-section) \"Prop-like\" \u00b6 The first line of this section is exactly the same format as on the props section. Parameters: reference_node : Node number/name ; The base node, used to define the coordinate system. x_direction_node : Node number/name ; The node that defines the X direction (this can be visualized as a line pointing from the reference node to this node) y_direction_node : Node number/name ; The node that defines the Y direction (this can be visualized as a line pointing from the reference node to this node) x_offset : Real number <0 - 1> ; The amount the prop should be moved in the X direction from the reference_node . y_offset : Real number <0 - 1> ; The amount the prop should be moved in the Y direction from the reference_node . z_offset_meters : Real number ; Moves the flexbody \"straight up\". Unlike the x_offset and the y_offset , the distance is measured in meters. x_axis_rotation : Real number ; The amount the flexbody should be rotated about the X axis y_axis_rotation : Real number ; The amount the flexbody should be rotated about the Y axis z_axis_rotation : Real number ; The amount the flexbody should be rotated about the 'straight up' axis mesh_name : String ; The name of the Ogre3D mesh object used for the flexbody. (sub-directive) forset \u00b6 As next, a line beginning with the word forset follows. Behind the word forset , you declare all nodes used for the deformation of the mesh (ranges are supported). node_list : List of node{number/name/range} ; List of nodes to use for deforming the flexbody. These nodes should be outer nodes of the vehicle, those that are close to the mesh. Notes about backwards compatibility: If you use a node range [A-B], RoR will tolerate if node B doesn't exist (warning will be emitted). If you enter multiple commas ,, between forset entries, parser will ignore it silently. If there's a comma after last element, parser will ignore it silently. Accepted separators between keyword \"forset\" and node ranges are: whitespace, comma , , colon : , or nothing at all (lines like forset12,34,56 will be correctly evaluated as forset 12, 34, 56 ) for backwards compatibility. (sub-directive) disable_flexbody_shadow \u00b6 (optional) [ Version 0.38.8+ ] No parameters. Disables shadow casting of the last flexbody to improve complex truck FPS. (sub-directive) flexbody_camera_mode \u00b6 (optional) [ Version 0.38.8+ ] Sets the cameramode in which the flexbody should be shown: mode : Decimal number default = -2 (always visible) ; Flexbody visibility: -2 = all the time (default), -1 = external only, >= 0 cinecam number flexbodies ;ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh 3, 4, 19, 0, 0, 0.027, 90, 0, 90, dodgecharger.mesh forset 0-16, 23-24, 31, 54-125 disable_flexbody_shadow ; -2 = all the time, -1 = external only, >=0 cinecam number flexbody_camera_mode -1 Note: It's important to keep an eye on the number of vertices of your meshes. Not that there is a hard limit, but beyond 10000 vertices there could be a noticeable slowdown. As reference: the Dodge Charger mesh is about 4000 vertices. Submesh \u00b6 Defines the collision surface of the truck; see required subsection cab and option c It may also generate textured mesh to visualize the truck; see optional subsection texcoords (sub-section) cab \u00b6 Specifies a series of triangles. Order of nodes defines orientation - the side with counterclockwise winding will be 'front' (or 'positive'), the other 'rear' (or 'negative'). If texcoords are used, only the 'front' side will be visible, the 'rear' side will be see-through (or black if you use backmesh ). node_1 : Node number ; First point of collision triangle. node_2 : Node number ; Second point of collision triangle. node_2 : Node number ; Third point of collision triangle. options (optional) : String n : Placeholder. Does nothing. c : This triangle will be a contact triangle that can contact with contacters nodes. Deprecated aliases: p , u . b : This triangle will be part of a buoyant hull. Deprecated aliases: D , F , S . s : This triangle will be part of a buoyant hull, mouse dragging will be disabled. r : This triangle will be part of a buoyant hull, mouse dragging only. (sub-section) texcoords \u00b6 Specifies texture coordinates (also called 'UV coordinates') for cab triangles. Only triangles with all 3 texcoords are displayed. The texture is specified in globals section. node : Node number ; Node representing a vertex in the resulting geometry. u : Real number 0.0 - 1.0 ; The U texture coordinate: Position of this vertex on the X axis of the image. v : Real number 0.0 - 1.0 ; The V texture coordinate: Position of this vertex on the Y axis of the image. (sub-directive) backmesh \u00b6 No params. If added, the triangles' backsides (see texcoords ) will be black instead of see-through. ;cabin top submesh texcoords 75, 0.172, 0.334 76, 0.172, 0.665 77, 0.291, 0.334 78, 0.291, 0.665 cab 75,76,78 75,78,77 ;cabin back submesh texcoords 77, 0.291, 0.334 78, 0.291, 0.665 53, 0.422, 0.334 54, 0.422, 0.665 6, 0.422, 0.334 8, 0.422, 0.665 cab 77,78,54 77,54,53 53,54,8,c 53,8,6,c backmesh Example of invisible collision submesh for a flexbody vehicle ( texcoords section is not used): ;front bumper submesh cab 126,121,127,c 132,126,127,c 133,132,127,c 125,120,121,c 126,125,121,c ... set_collision_range \u00b6 set_collision_range is 0.02 as default value, and defines the maximum range ( 2 cm) around a truck's collision triangles that collisions start to happen. By increasing it, for example to 0.04 , penetrations become a lot more difficult. set_collision_range 0.02 submesh_groundmodel \u00b6 Specifies groundmodel should be used for the trucks contactive submeshes. It has module-wide effect; it only needs to be defined once per file. Parameter: groundmodel_name : String ; default = concrete ; The groundmodel to use. See also Groundmodel Description File ;submesh_groundmodel groundModelName submesh_groundmodel rock Exhausts \u00b6 This replaces the x or y node options. The factor parameter should be \"1\", because it is not used yet. The material should be \"default\" if no user-created one is made. (You could create your own particle emitter based on the default one: data/smoke.particle). Remember: The direction node is behind the ref node! exhausts ;ref node, direction node, factor material 103, 99, 1 default 105, 98, 1 default Sections \u00b6 This section allows you to have different options selectable from the vehicle spawner menu. Almost any section ( managedmaterials , engine , props , flexbodies , etc) can be used with this. sectionconfig 0 lowspeed sectionconfig 0 highspeed section 0 lowspeed engine 1000.000000, 1500.000000, 5000.000000, 2.000000, 10.850000, 9.520000, 6.560000, -1.000000 end_section section 0 highspeed engine 1000.000000, 15000.000000, 5000.000000, 2.000000, 10.850000, 9.520000, 6.560000, -1.000000 end_section Guisettings \u00b6 By using this section you can set some parameters of the Truck GUI. This can be helpful if you're building a vehicle that has a relatively higher or lower speed than average. Format: keyword value dashboard : [ Version 0.38.66+ ] Custom HUD layout that should be used for this truck. You can use multiple lines. texturedashboard : [ Version 0.38.66+ ] Custom HUD layout that should be used for the RTT for this truck. You can use multiple lines. RTT means Real Time-generated Texture, you can use it as material for your custom dashboard mesh. interactiveOverviewMap : [ Version 0.36+ ] ; off / simple / zoom - Enables/disables the activation of the interactive map for the truck. Legacy parameters (not affecting the v0.4 custom HUD system). Will be restored or removed soon. tachoMaterial : String ; default = tracks/Tacho ; The name of the tachometer face material. (must be defined in a material file). speedoMaterial : String ; default = tracks/Speedo ; The name of the speedometer face material. (must be defined in a material file). speedoMax : Positive decimal number ; default = 140 ; The highest number that is on the speedometer (kph). (values 10-32000) Speedometer needle goes from -140\u00b0 to 140\u00b0. useMaxRPM : 0 or 1 ; default = 0 ; [Yes/No] Whether or not to use the max rpm (in the engine section) as the highest number on the tachometer. Note that your actual max rpm is MaxRPM+20%. Do not include the 20% on your tachometer or it will be inaccurate. Tachometer needle is from -120\u00b0 to 120\u00b0. helpMaterial : String ; default = tracks/black ; The help material (a picture that shows command instructions). NOTE: This value overrides settings from section \"help\" Example: guisettings interactiveOverviewMap zoom dashboard dash_test.layout dashboard dash_test2.layout texturedashboard dashGauges.layout ; legacy settings tachoMaterial tracks/MyTacho speedoMaterial tracks/MySpeedo speedoMax 80 useMaxRPM 1 Set_skeleton_settings \u00b6 Inline-section; modifies the skeleton display (activated by pressing K ) of the truck. Has module-wide effect; only needs to be issued once per file. Parameters: visibility_range_in_meters (nullable) : Real number ; default = 150 ; Empty value = -1 beam_thickness_in_meters (optional) (nullable) : Real number ; default = 0.01 (1 centimeter) ; Empty value = -1 Examples: Beams visible from 150 meters away, beams are 1 centimeter in width (default values): set_skeleton_settings 150, 0.01 2km sight range with 9 centimeter wide beams: set_skeleton_settings 2000, 0.09 Videocamera \u00b6 The videocamera section describes how to set up multiple mirrors and extra cameras like a backup-camera for a truck or hook-camera for a crane. Both, cameras and mirrors, use the same technique, cameras just add a reflective calculation and flip (mirror) the image generated. Parameters: reference_node : Node number/name ; The node where the camera is placed. This is your reference node. Any existing node## is valid. left_node : Node number/name ; The Z-reference of the camera, should be exactly right of the reference node when the camera points forward to the trucks front. Any existing node## is valid. bottom_node : Node number/name ; The Y-reference of the camera, should be exactly below the reference node when the camera points forward to the trucks front. Any existing node## is valid. alt_reference_node (nullable) : Node number/name ; Empty value = -1 ; The alternative cam position node. It replaces the reference node for position but not for orientation. Good to setup mirrors and cams with just one extra node to an existing truck. Important for mirrors, read below! Any existing node## is valid. alt_orientation_node (nullable) : Node number/name ; Empty value = -1 ; The alternative camera orientation node. If set, it skips any camera orientation calculation and makes the cam permanent look at the set node. Good for hooks moving up and down. Any existing node## is valid. offset_x (nullable) : Real number ; Empty value = 0 ; X-offset from reference or alternative cam position node. Works like props offsets, relates to the plane of Node 1-3 as frustum and moves the cam proportional forth and back on its roll-axis. offset_y (nullable) : Real number ; Empty value = 0 ; Y-offset from reference or alternative cam position node. Works like props offsets, relates to the plane of Node 1-3 as frustum and moves the cam up and down in meters on its rotation-axis. offset_z (nullable) : Real number ; Empty value = 0 ; Z-offset from reference or alternative cam position node. Works like props offsets, relates to the plane of Node 1-3 as frustum and moves the cam proportional left and right on its pitch-axis. rotation_x (nullable) : Real number ; Empty value = 0 ; Optional camera X-rotation. Works like props rotation, relates to the plane of Node 1-3 as frustum. Adjust camera orientation without moving nodes. rotation_y (nullable) : Real number ; Empty value = 0 ; Optional camera Y-rotation. Works like props rotation, relates to the plane of Node 1-3 as frustum. Adjust camera orientation without moving nodes. Avoid the gimbal lock, using Y-rotation is not recommended together with other axis. rotation_z (nullable) : Real number ; Empty value = 0 ; Optional camera Z-rotation. Works like props rotation, relates to the plane of Node 1-3 as frustum. Adjust camera orientation without moving nodes. fov : Real number, valid: 0.01 -179.9 ; Camera field of view. texture_width : Positive decimal, must be power of 2 ; X-resolution of the texture generated. Valid: any value^2 (POW) (see below for explanation), recommended maximum 256 , watch your FPS. texture_height : Positive decimal, must be power of 2 ; Y-resolution of the texture generated. Valid: any value^2 (POW) (see below for explanation), recommended maximum 256 , watch your FPS. min_clip_distance : Real number ; Minimum distance in meters of objects to be rendered Valid: 0.1 - value<maxclipdistance. Useful to blend out things that should not be displayed. Good to tune FPS. max_clip_distance : Real number Maximum distance in meters of objects to be rendered Valid: value>minclipdistance - 32000 . Useful to blend out things that should not be displayed. Watch your FPS. camera_role : Decimal number ; Role aka function of the camera: -1 == camera, 0 == tracker camera (requires an alternative camera orientation node), 1 == mirrors. camera_mode : Decimal number, use -2 ; Camera switchoff state. Not supported yet, put a -2 in here. material : String ; The material the generated textured should be displayed on. Requires a prop (mesh) using this material to get any visual results. name : [ Version 0.38.63+ ] String ; Specify a name for this videocamera that might be used for the title of the renderwindow. Important : Videocameras only work with props . Place the videocamera section before loading any meshes that should display the material Its recommended that mirrors always use the alternative cam position node placed precise in the center of the mirror-mesh (the reflecting part) of the related mirror. Otherwise, reflective calculation might be wrong. Mirrors can use y-axis rotation presets for easy adjustment, to rotate x/z axis move the reference nodes accordingly to avoid gimbal lock, offset preset work too, but are not recommended to use. Wrong or not existing materials might make RoR crash while parsing the truck. Be accurate ! .material file material definition is strictly necessary and needs to match the material in the truck-file line. Material definition features a fall-back texture when camera is not active or not set. Just add a texture unit with a texture definition, it will be replaced with the generated texture when camera is setup correct and active automatically. Do NOT the set alternative camera orientation node to the same node## then your reference node or ( if used ) the alternative cam position node. Makes no sense and might crash. Samples: videocamera ;nref, nx, ny, ncam, nlookat, offx, offy, offz, rotx, roty, rotz, fov, texX, texY, minclip, maxclip, cRole, cMode, material ; camera with no offsets and rotations 43, 42, 1, -1, -1, 0.00, 0.00, 0.00, 0, 0, 0, 70, 256, 256, 0.10, 2500, -1, -2, video-camera1 ; camera with no offsets and rotations placed on an alternative camNode 43, 42, 1, 185, -1, 0.00, 0.00, 0.00, 0, 0, 0, 70, 256, 256, 0.10, 2500, -1, -2, video-camera1 ; tracker camera with no offsets and rotations placed on an alternative camNode 43, 42, 1, 185, 363, 0.00, 0.00, 0.00, 0, 0, 0, 70, 256, 256, 0.10, 2500, 0, -2, video-camera1 ; camera with offsets and rotations 42, 43, 1, 362, -1, -3.22, 1.20, 0.00, -45, 0, 0, 100, 128, 128, 0.01, 2500, -1, -2, video-camera1 ; camera with offsets and rotations placed on an alternative camNode (offsets apply from here) 42, 43, 1, 362, -1, -3.22, 1.20, 0.00, -45, 0, 0, 100, 128, 128, 0.01, 2500, -1, -2, video-camera1 ; mirror no offsets and rotations placed on an alternative camNode 43, 42, 1, 185, -1, 0.00, 0.00, 0.00, 0, 0, 0, 70, 256, 256, 0.10, 2500, 1, -2, video-camera1 Example mirror setup from the 1988 Audi UR-Quattro : (They are currently disabled) videocamera ;nref, nx, ny, ncam, nlookat, offx, offy, offz, rotx, roty, rotz, fov, texX, texY, minclip, maxclip, cRole, cMode, material ;left 317,308,315, 318, -1, 0, 2, 0, 0, 10, 0, 40, 400, 400, 0.1, 6000, 1, -2, Quattro_LM UV Mapped mirror mesh: You can use this texture to help UV map your mirror mesh: .material file: material Quattro_LM { technique { pass { texture_unit { texture vidscreen-disabled.png } } } } Node position reference: Make sure vidscreen-disabled.png is in your truck zip. Use your own texture and material names to avoid conflicts! You can enable videocamera debug in settings (Diagnostic tab) which activates helpful meshes which show position and orientation of the video-cameras set up: Notes: Any value 2^n (POW) means that you have to choose a number out of the following numbers: 2^0 = 1 2^1 = 2 2^2 = 4 2^3 = 8 2^4 = 16 2^5 = 32 2^6 = 64 2^7 = 128 2^8 = 256 2^9 = 512 2^10 = 1024 2^11 = 2048 2^12 = 4096 2^13 = 8192 Extcamera \u00b6 The extcamera command allows you to change the 3 rd person camera behavior. Currently, there are three modes you can use: The classic mode (also default if you do not use this command) extcamera classic The cinecam mode: it will rotate the camera around the cinecamera extcamera cinecam The node mode: it will rotate the camera around a specified node ;extcamera node <nodeid> ;for example: extcamera node 123 The final two modes are useful for a vehicle with detaching parts, so the camera is fixed in the view of the main vehicle. Camerarail \u00b6 In [ Version 0.39.7+ ] and above you can add a camerarail section to your beam objects. The camerarail generates a cSpline on base of the given nodes, on which you can move a camera. A new camera mode will be added ingame which is accessible with the \"c\"-button. Camera controls: Right-click: Rotate camera Right-click + CTRL (left) + move mouse left/right: Move camera on spline. Speed up with Shift or slow down with Alt . CTRL (left) + Shift + Space : Enable/disable auto-tracking Syntax: camerarail <node1> [node2] ... [node50] You can define up to 50 nodes per beam object. You can use one node several times. If the first node is the same as the last one, the spline will be closed and the camera can move on the rail continuously. Example: camerarail 5 6 7 8 5 If multiple beam objects, each with a camerarail section, are connected with hooks, the game will try to connect the splines. This way you can move the camera over multiple hooked vehicles without the need to switch the vehicle: Object A (active) - Object B (hooked) - Object C (hooked) The distance between the last camerarail node of one and the first camerarail node of another object needs to be under 5 meters. Sounds \u00b6 Since [ Version 0.36+ ] , vehicles can have custom sounds. By default, RoR uses a set of default sounds for your vehicle, but with the following sections you can customize these sounds. disabledefaultsounds \u00b6 Use this simple statement to disable all sounds that RoR automatically adds to your vehicle. This allows you to start from a clean slate, and add your custom sounds without interference from the automatically added sounds. Example : disabledefaultsounds Soundsources \u00b6 Adds a sound source to your vehicle. Parameters: node : Node number ; The place where your sound will come from. Doesn't support named nodes. sound_script_name : String ; Sound scripts are defined in soundscript files . You can use game-defined sound scripts or your own sound scripts. soundsources ;nodeID, sound 23, my_diesel 23, my_turbo 135, tracks/default_horn Soundsources2 \u00b6 Parameters: node : Node number ; The place where your sound will come from. Doesn't support named nodes. mode : Decimal number -2 : Global; enabled all the time -1 : Enabled in external camera only 0 (or higher) : Enabled for cinecamera number specified. Note: for backwards compatibility, the parser will read invalid values as 0 and emit a warning. sound_script_name : String ; Sound scripts are defined in soundscript files . You can use game-defined sound scripts or your own sound scripts. soundsources2 ;node, mode, sound 23, -2, my_diesel 23, -1, my_turbo 135, 0, tracks/default_horn List of default soundsources \u00b6 This is a list of all default soundsources separated by engine type This can be inserted in the file as is. Engine (Diesel) \u00b6 soundsources 1, tracks/default_diesel 1, tracks/default_force 1, tracks/default_starter 1, tracks/default_turbo 1, tracks/default_air_purge 1, tracks/default_horn 1, tracks/default_pump 1, tracks/default_screetch 1, tracks/default_brakes 1, tracks/default_parkbrakes 1, tracks/default_air 1, tracks/default_shift 1, tracks/default_break 1, tracks/default_creak 1, tracks/default_gear_slide 1, tracks/default_reverse_beep 1, tracks/default_turn_signal Engine (Gasoline) \u00b6 soundsources 1, tracks/default_car 1, tracks/default_starter 1, tracks/default_horn 1, tracks/default_pump 1, tracks/default_police 1, tracks/default_screetch 1, tracks/default_brakes 1, tracks/default_parkbrakes 1, tracks/default_shift 1, tracks/default_break 1, tracks/default_creak 1, tracks/default_gear_slide 1, tracks/default_turn_signal Airplane (Prop) \u00b6 soundsources 1, tracks/default_turboprop_start1 1, tracks/default_turboprop_lopower1 1, tracks/default_turboprop_hipower1 1, tracks/default_turboprop_start2 1, tracks/default_turboprop_lopower2 1, tracks/default_turboprop_hipower2 1, tracks/default_turboprop_start3 1, tracks/default_turboprop_lopower3 1, tracks/default_turboprop_hipower3 1, tracks/default_turboprop_start4 1, tracks/default_turboprop_lopower4 1, tracks/default_turboprop_hipower4 1, tracks/default_turboprop_start5 1, tracks/default_turboprop_lopower5 1, tracks/default_turboprop_hipower5 1, tracks/default_turboprop_start6 1, tracks/default_turboprop_lopower6 1, tracks/default_turboprop_hipower6 1, tracks/default_turboprop_start7 1, tracks/default_turboprop_lopower7 1, tracks/default_turboprop_hipower7 1, tracks/default_turboprop_start8 1, tracks/default_turboprop_lopower8 1, tracks/default_turboprop_hipower8 Airplane (Jet) \u00b6 soundsources 1, tracks/default_turbojet_start1 1, tracks/default_turbojet_lopower1 1, tracks/default_turbojet_hipower1 1, tracks/default_turbojet_afterburner1 1, tracks/default_turbojet_start2 1, tracks/default_turbojet_lopower2 1, tracks/default_turbojet_hipower2 1, tracks/default_turbojet_afterburner2 1, tracks/default_turbojet_start3 1, tracks/default_turbojet_lopower3 1, tracks/default_turbojet_hipower3 1, tracks/default_turbojet_afterburner3 1, tracks/default_turbojet_start4 1, tracks/default_turbojet_lopower4 1, tracks/default_turbojet_hipower4 1, tracks/default_turbojet_afterburner4 1, tracks/default_turbojet_start5 1, tracks/default_turbojet_lopower5 1, tracks/default_turbojet_hipower5 1, tracks/default_turbojet_afterburner5 1, tracks/default_turbojet_start6 1, tracks/default_turbojet_lopower6 1, tracks/default_turbojet_hipower6 1, tracks/default_turbojet_afterburner6 1, tracks/default_turbojet_start7 1, tracks/default_turbojet_lopower7 1, tracks/default_turbojet_hipower7 1, tracks/default_turbojet_afterburner7 1, tracks/default_turbojet_start8 1, tracks/default_turbojet_lopower8 1, tracks/default_turbojet_hipower8 1, tracks/default_turbojet_afterburner8 Airplane (Piston) \u00b6 soundsources 1, tracks/default_pistonprop_start1 1, tracks/default_pistonprop_lopower1 1, tracks/default_pistonprop_hipower1 1, tracks/default_pistonprop_start2 1, tracks/default_pistonprop_lopower2 1, tracks/default_pistonprop_hipower2 1, tracks/default_pistonprop_start3 1, tracks/default_pistonprop_lopower3 1, tracks/default_pistonprop_hipower3 1, tracks/default_pistonprop_start4 1, tracks/default_pistonprop_lopower4 1, tracks/default_pistonprop_hipower4 1, tracks/default_pistonprop_lopower5 1, tracks/default_pistonprop_hipower5 1, tracks/default_pistonprop_lopower6 1, tracks/default_pistonprop_hipower6 1, tracks/default_pistonprop_lopower7 1, tracks/default_pistonprop_hipower7 1, tracks/default_pistonprop_lopower8 1, tracks/default_pistonprop_hipower8 Marine (Large) \u00b6 1, tracks/default_marine_large Marine (Small) \u00b6 1, tracks/default_marine_small Aircraft \u00b6 Wings \u00b6 Please see this page for more information The wings parameters are: A Front left down node number B Front right down node number C Front left up node number D Front right up node number E Back left down node number F Back right down node number G Back left up node number H Back right up node number Texture X coordinate of the front left of the wing : in the texture defined in \"globals\" Texture Y coordinate of the front left of the wing : in the texture defined in \"globals\" Texture X coordinate of the front right of the wing : in the texture defined in \"globals\" Texture Y coordinate of the front right of the wing : in the texture defined in \"globals\" Texture X coordinate of the back left of the wing : in the texture defined in \"globals\" Texture Y coordinate of the back left of the wing : in the texture defined in \"globals\" Texture X coordinate of the back right of the wing : in the texture defined in \"globals\" Texture Y coordinate of the back right of the wing : in the texture defined in \"globals\" Type of control surface : see below Relative chord point at which starts the control surface (between 0.0 and 1.0) Minimum deflection of the control surface : in degrees (negative deflection) Maximum deflection of the control surface : in degree (positive deflection) Airfoil file to use coefficent (optional) Default is 1.0 (100%), setting any other positive number increases or decrease overall wing efficacy. Useful for precision flight characteristics tuning. The type of control surface is set by a single character, and defines how the control surface will move depending on pilot inputs. Available control surface types are: n = None a = Right aileron b = Left aileron f = Flap e = Elevator r = Rudder S = Stabilator with right hand axis (full body elevator), useful for e.g. a Mig25 T = Stabilator with left hand axis (full body elevator), useful for e.g. a Mig25 c = Right elevon (right aileron + elevator), useful for e.g. Concorde d = Left elevon (left aileron + elevator), useful for e.g. Concorde g = Right flaperon (right aileron + flap) h = Left flaperon (left aileron + flap) U = Taileron with right hand axis (full body elevator+aileron), useful for e.g. a F-15 V = Taileron with left hand axis (full body elevator+aileron), useful for e.g. a F-15 i = Right ruddervator (rudder + elevator), useful for V-tails like the Bonanza j = Left ruddervator (rudder + elevator), useful for V-tails like the Bonanza wings ;main wing 28,22,29,23,18,20,19,21, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, a, 0.75, -24, 24, NACA64.1.412.afl ; this wing is force efficacy reduced to 50% 26,28,27,29,16,18,17,19, 0.804, 0.711, 0.818, 0.617, 0.999, 0.711, 0.999, 0.617, f, 0.75, -30, 0, NACA64.1.412.afl 0.75 ; this wing is force efficacy upgraded to 300% ( equals 3 wings of the same type ) 90,26,25,27,14,16,15,17, 0.783, 0.844, 0.804, 0.711, 0.999, 0.844, 0.999, 0.711, f, 0.75, -30, 0, NACA64.3.618.afl 3.0 0,90,24,25, 4,14,13,15, 0.764, 0.933, 0.784, 0.844, 0.999, 0.933, 0.999, 0.844, f, 0.75, -30, 0, NACA64.3.618.afl 2, 0,46,24, 6, 4,12,13, 0.756, 0.999, 0.764, 0.933, 0.999, 0.999, 0.999, 0.933, n, 1.0, 0, 0, NACA0009.afl 44, 2,45,46,30, 6,31,12, 0.783, 0.844, 0.764, 0.933, 0.999, 0.844, 0.999, 0.933, f, 0.75, -30, 0, NACA64.3.618.afl 42,44,43,45,32,30,33,31, 0.804, 0.711, 0.783, 0.844, 0.999, 0.711, 0.999, 0.844, f, 0.75, -30, 0, NACA64.3.618.afl 40,42,41,43,34,32,35,33, 0.818, 0.617, 0.804, 0.711, 0.999, 0.617, 0.999, 0.711, f, 0.75, -30, 0, NACA64.1.412.afl 38,40,39,41,36,34,37,35, 0.555, 0.751, 0.509, 0.999, 0.752, 0.751, 0.752, 0.999, b, 0.75, -24, 24, NACA64.1.412.afl ;rudder 101,107,102,108,103,109,104,110, 0.017, 0.746, 0.087, 0.492, 0.262, 0.746, 0.204, 0.492, r, 0.56, -35, 35, NACA0009.afl 99,101,100,102,105,103,106,104, 0.017, 0.999, 0.132, 0.747, 0.262, 0.999, 0.253, 0.747, n, 1.0, 0, 0, NACA0009.afl ;elevators 144,154,146,155,142,152,105,153, 0.763, 0.457, 0.840, 0.244, 0.999, 0.457, 0.983, 0.244, e, 0.64, -33, 33, NACA0009.afl 145,144,147,146,143,142,106,105, 0.756, 0.999, 0.764, 0.933, 0.999, 0.999, 0.999, 0.933, n, 1.0, 0, 0, NACA0009.afl 150,145,151,147,148,143,149,106, 0.840, 0.244, 0.763, 0.457, 0.983, 0.244, 0.999, 0.457, e, 0.64, -33, 33, NACA0009.afl Special wing formats to reduce node/beam count and CPU load: (Use at own risk!) All examples lines refer to the node notation sample picture above. 'A' means Node A from that schematic diagram. They work, no idea if they produce more or less lift then a wing with defined thickness. Only use them for invisible wings with meshed props/flexbodies for the visual appearance and with a transparent material, skinning them results in an ugly visual appearance. Flarewing using 2 nodes For precise aviation flare placement you can use a wing defined with only 2 nodes. It has no aerodynamic influence at all It has an extremely low node/beam count -- Vital: Needs to be placed as first wing in the wings section. Use NACA0009.afl as the airfoil. wings A,B,A,B,A,B,A,B,0,0,0,0,0,0,0,0,n,0,0,0, NACA0009.afl Trim or main wing using 3 nodes -- Defines a wing using only 3 nodes. Placing this wing first in the wing section results in the aviation flares appearing on the nodes A,B ( red/green ) and E (white flash). Works horizontally and vertically. (As on the tail.) Low node/beam count wing for self built flaps, ailerons, elevators or trimwings, very easy to animate with a single hydro . Can be used with any active control surface and any afl-format Known Issues: Sometimes vertical tailfin wings work only one direction. If RoR crashes exchange node A and B with each other. wings A,B,A,B,E,E,E,E,0,0,0,0,0,0,0,0,n,0,0,0, NACA0009.afl Trim or main wing using 4 nodes -- Defines a wing using only 4 nodes. Placed first in the wing section results in the aviation flares appearing on the nodes A,B (red/green) and E,F (white flash) Works horizontally and vertically (As on the tail.) Low node/beam count wing for main wings Can be used with any active control surface and any afl-format. Known Issues: sometimes vertical tailfin wings work only one direction. If RoR crashes exchange node A,B and E,F with each other wings A,B,A,B,E,F,E,F,0,0,0,0,0,0,0,0,n,0,0,0, NACA0009.afl Airbrakes \u00b6 Airbrakes are a moving panel used to slow down an airplane (key bindings: 3 and 4 ). They are positioned similarly to props . These airbrakes can be easily added to a wing box, with noderef , nodex , nodey and nodea being the four upper nodes of a box. Parameters: reference_node : Node number/name ; The base node, used to define the coordinate system x_direction_node : Node number/name ; The node that defines the X direction (this can be visualized as a line pointing from the reference node to this node) y_direction_node : Node number/name ; The node that defines the Y direction (this can be visualized as a line pointing from the reference node to this node) additional_node : Node number/name ; An additional node to make the braking forces symmetric (they are applied to noderef , nodex , nodey and nodea ). x_offset : Real number <0 - 1> ; The amount the prop should be moved in the X direction from the reference node . The distance it is moved depends on the distance between the Reference node and the '''X direction node '''(it's proportional): (0) leaves the prop on the reference node, (1) moves it all the way to the X direction node , and (0.5) puts the prop half-way between the two y_offset : Real number <0 - 1> ; The amount the prop should be moved in the Y direction from the reference node . Like the X direction offset , the amount it is proportional to the distance between the reference node and the Y direction node . z_offset : Real number <0 - 1> ; Imagine a surface which the X and Y directions pass straight through. If looking along that surface is the forwards direction, then this field moves the prop straight up. Unlike the X direction offset and the Y direction offset , the amount for the straight up offset is measured in meters width : Real number ; Dimension of the panel height : Real number ; Dimension of the panel max_inclination_angle : Real number ; Maximum inclination angle texcoord_x1 : Real number <0 - 1> ; Texture coordinate. texcoord_y1 : Real number <0 - 1> ; Texture coordinate. texcoord_x2 : Real number <0 - 1> ; Texture coordinate. texcoord_y2 : Real number <0 - 1> ; Texture coordinate. lift_coefficient (optional) : Real number ; default = -1.0 airbrakes ;noderef, nodex, nodey, nodea, offsetx, offsety, offsetz, width, length, max angle, texcord x1, texcoord y1, texcoord x2, texcoord y2 95, 105, 113, 125, 0.2, 0.0, 0.0, 2.0, 3.0, 60.0, 0.044, 0.205, 0.124, 0.146 Turboprops \u00b6 The turboprops section defines the turboprop engines, and makes the truck a plane! It is important that this section comes AFTER the props section, because you will need to add a spinprop.mesh entry to the props before turboprops will work. One pale.mesh per propeller blade can also be added for visible blades. Easy, eh? Each prop blade is associated to a blade tip node, and you must ensure the blade nodes are correctly interconnected with beams so it will spin freely around its axis, while maintaining a rigid prop disc. See how the Antonov 12 is made. You can also make 2 or 3 blade props by putting a -1 instead of the blade tip node number(see the Twin Otter for example). Parameters are: reference_node : Node number/name ; Center of the prop axis_node : Node number/name ; Back of the prop blade_1_tip_node : Node number/name ; blade_2_tip_node : Node number/name ; blade_3_tip_node : Node number/name ; blade_4_tip_node : Node number/name ; turbine_power : Real number ; Power of the turbine (in kW) airfoil : String ; Airfoil of the blades turboprops 122,173,174,175,176,177, 3000.0, Clark-Y.afl 113,168,169,170,171,172, 3000.0, Clark-Y.afl 116,158,159,160,161,162, 3000.0, Clark-Y.afl 119,163,164,165,166,167, 3000.0, Clark-Y.afl Fusedrag \u00b6 The fusedrag section helps the correct modeling of the fuselage contribution to the aerodynamic drag of a plane. It also makes possible the \"masking\" of the aerodynamic contribution of an object loaded inside the plane. It models the fuselage as a big wing section, with an airfoil (usually a symmetrical airfoil like NACA0009 ). Fusedrag can also be used in road vehicles to aid top speed. The parameters are: Number of the front-most node of the fuselage Number of the rear-most node of the fuselage Approximate width of the fuselage Airfoil name fusedrag 131, 51, 4.0, NACA0009.afl autocalc Automatically calculates the width and height of the truck. Fusedrag area coefficient This is optional, default = \"1.0\" ( = 100% ) Smaller values will make your truck go faster. Airfoil name This is optional, default = NACA0009.afl fusedrag ;fusedrag calculated by truck width and height using NACA0009.afl airfoil 131, 51, autocalc ;fusedrag calculated by truck width and height using NACA0009.afl airfoil with coef 0.5 131, 51, autocalc, 0.5 ;fusedrag calculated by truck width and height using airfoil_name.afl airfoil with coef 1.75 131, 51, autocalc, 1.75 airfoil_name.afl Turbojets \u00b6 Defines a turbojet. Parameters: front_node : Node number/name ; A node at the air intake. back_node : Node number/name ; A node at the base of the nozzle. side_node : Node number/name ; A node at the side of the engine, for reference. is_reversable : Integer (yes/no) ; Boolean meaning: 0 is NO, anything else (including -1 ) is YES dry_thrust : Real number ; The thrust without afterburner (in kilonewtons). wet_thrust : Real number ; The total thrust with afterburner, or zero if it does not apply. front_diameter : 0 ; Unused. back_diameter : Real number ; The nozzle diameter. nozzle_length : Real number ; The length of the nozzle. This will automatically add a nozzle prop at the end of the engine, with the diameter and length specified. turbojets ;front_node, back_node, side_node, is_reversable, dry_thrust(kN), wet_thrust(kN), front_diameter, back_diameter, nozzle_length 272, 273, 277, 0, 73.5, 100.1, 1.2, 1.66, 0.73 274, 275, 276, 0, 3.5, 100.1, 1.2, 1.66, 0.73 Pistonprops \u00b6 Pistonprops act in almost the exact same way as turboprops minus two differences. The pitch is manually set and stays at a set value and it has a couplenode. Parameters: reference_node : Node number/name ; Center of the prop axis_node : Node number/name ; Back of the prop blade_1_tip_node : Node number/name ; blade_2_tip_node : Node number/name ; blade_3_tip_node : Node number/name ; blade_4_tip_node : Node number/name ; couple_node : Node number/name OR -1 ; It is unknown of what the couplenode does so it's recommended to leave it at -1 . turbine_power : Real number ; Power of the turbine (in kW) pitch : Real number ; airfoil : String ; Airfoil of the blades pistonprops ;ref, back, p1, p2, p3, p4, couplenode, power, pitch, propfoil 122, 173, 174, 175, 176, 177, -1, 3000.0, -10, Clark-Y.afl 113, 168, 169, 170, 171, 172, -1, 3000.0, -10, Clark-Y.afl 116, 158, 159, 160, 161, 162, -1, 3000.0, -10, Clark-Y.afl 119, 163, 164, 165, 166, 167, -1, 3000.0, -10, Clark-Y.afl Boats \u00b6 See: Boats Screwprops \u00b6 Screwprops are boats' propellers. Currently, steering is only done by thrust vectoring. The current syntax is prop node , back node , top node , power . screwprops ;prop node, back node, top node, power 88, 93, 91, 100000.0 89, 92, 90, 100000.0","title":"Truck file format"},{"location":"vehicle-creation/fileformat-truck/#truck-file-format","text":"\"Truck\" is a text-based file format which defines all physically simulated objects in the game, be it vehicles of any kind, machinery, loads or any other things. The name is historical - Rigs of Rods was originally a heavy truck simulator, other kinds of vehicles came later. Recognized filename extensions for this format are: .truck , .car , .boat , .airplane , .train , .machine , .trailer , .load , .fixed . Note the extension is only informative, the actual type of object is determined by file contents. The truckfile is divided into sections, each with defined purpose. Except the title, every section starts with a keyword. Order of sections matters (for example: cinecams requires beams). Comment lines can be inserted by putting ; or // at the beginning of the line.","title":"Truck file format"},{"location":"vehicle-creation/fileformat-truck/#building-philosophy","text":"See Vehicle Concepts to understand the building philosophy. I recommend using the following method for construction: Draw the blueprint of your truck on a piece drawing paper; mark the nodes, and write their number (starting with zero). Edit your truck file; put the title, globals, engine, cameras, nodes, and beams sections in. Run the game to see how it goes. If you forget some beams the truck will fold on itself! When the chassis seems to work well; add wheels, suspension, hydros, etc; And then test drive. When the truck is all working; do the bodywork and texture, and mark most beams as invisible (displaying too many beams has a large performance impact)","title":"Building Philosophy"},{"location":"vehicle-creation/fileformat-truck/#is-it-a-truck-plane-train-or-boat","text":"Before we start, let's ask an important question: Is it a truck, plane, train, or boat? Or what makes a truck a truck and a plane a plane and a train a train, or a boat a boat? Simple: A truck is a description file containing an engine section A plane is a description file containing a turboprops , turbojets , or pistonprops section A boat is a description file containing a screwprops section A train is a vehicle that drives on a rail (see Building rail vehicles ) Also, notice that: You should not combine more than one propulsion (eg have both an engine and a turboprops section in the same file) If you have no propulsion, then you are making a load, and the file extension should be .load You can have a wings section on a truck or a boat (e.g. to add aerodynamic spoilers for stability). You should have a fusedrag section on a plane to have a better aerodynamic modeling. A boat needs to have a hull which is defined in the submesh section.","title":"Is It a Truck, Plane, Train or Boat?"},{"location":"vehicle-creation/fileformat-truck/#light-cars","text":"Here a few recommendations for those who want to build a light car : RoR is optimized for heavy trucks, so you have to use some extra sections that help you create a realistic car: Use engoptions to reduce the engine inertia and set the engine type to c Use brakes to reduce braking force Use and abuse set_beam_defaults to soften the car body, or it will be too strong and springy, i.e. almost indestructible. Experiment with the engine section to use higher RPM and correct gear ratios. Lighten the wheels as much as possible. This is not very easy as they become unstable. Reducing the spring and damping of the wheels helps a lot. Suggested values for 100kg wheels: spring 150000 and damping 1000 . Use the dashboard-small.mesh prop as a dashboard. (unless you have a custom dashboard you want to use.)","title":"Light Cars"},{"location":"vehicle-creation/fileformat-truck/#documentation-style-guide","text":"Every keyword (directive, inline-section or section) which has parameters should have them listed in this manner: Required parameter : Data type ; default = VALUE ; Explanatory text. Example required parameter : Real number ; default = -1.0 ; Parameters are written as shown, followed by a colon. The data type should be easy to understand for a human, not technically accurate. Another required parameter : Positive decimal ; The \"default\" text can be omitted if the parameter has no default. The \"data type\" field should always be followed by semicolon. Optional parameter (optional) : Data type ; default = VALUE ; Optional parameters have \"(optional)\" text after them. Alternatively, the parameter list may be split into \"Required parameters\" list, followed by \"Optional parameters\" list, see 'flares'. Required nullable parameter (nullable) : Data type ; Empty value = -1 ; Parameters which must be entered but can contain \"empty value\" are described (nullable) and have \"Empty value\" section. New parameter (optional) : [ Version 0.4+ ] Data type ; Parameters with version requirements have a [ Version ] box. Options (optional) : String , default = none Options are enumerated as sub-list. a : What this option does. b : Another option c or C : Case insensitive option.","title":"Documentation style guide"},{"location":"vehicle-creation/fileformat-truck/#required-sections","text":"The game will not run without these sections. Every one of these sections must be present for a vehicle to work in the game!","title":"Required Sections"},{"location":"vehicle-creation/fileformat-truck/#title","text":"This is the only section not introduced by a keyword. It is the name of the truck, and it absolutely positively must be the first line of the file. My nice truck","title":"Title"},{"location":"vehicle-creation/fileformat-truck/#globals","text":"This section defines some global parameters. Those parameters are: dry mass - Real number ; The weight RoR will try to give the truck (affected by minimum node weight, see below). Weight is measured in kilograms. (For you people in non-metric countries, a kilogram is 2.2 pounds.) Load mass - Real number ; Total mass of all nodes marked with the option \"l\". Material name - String ; The name of the material that will be used to texture the truck's submesh. This material must be defined in a separate material file. globals ;dry mass, cargo mass, material 10000.0, 1000.0, tracks/semi","title":"Globals"},{"location":"vehicle-creation/fileformat-truck/#nodes","text":"This section begins the structural definition of the vehicle. Each line defines a node. Node number : Positive decimal number ; The first parameter is the node number. These numbers must be consecutive. Important: Do NOT use node 0 for any moving stuff like propellers, commands etc. It's the reference for some calculations in RoR and should be part of the rigid frame of your truck. X position (in meters) : Real number ; Node's X coordinate. Y position (in meters) : Real number ; Node's Y coordinate. Z position (in meters) : Real number ; Node's Z coordinate. Options (optional) : String ; default = none ; Node options. You can combine multiple flags. n : This node can be grabbed with the mouse. (Standard node) m [ Version 0.39.07+ ] : This node can't be grabbed with the mouse. (Useful for switching levers with the mouse.) f : This node will not produce sparks. (Useful for support feet or hand made wheels.) x : This node is the exhaust point. (requires a \"y\" node) (see the exhausts section) y : The exhaust reference point. This node should be placed opposite of the direction that you want the exhaust to come from. c : This node will not detect contact with ground. (Can be used for optimization on inner chassis parts, for instance.) h : This node is a hook point. (Like the hook on a crane, or a winch, or whatever.) RoR will create a beam between this Node and Node#0. If this is Node#0, it will link it to Node#1 (even if it isn't defined yet). e : This node is a terrain editing point (Like in the terrain editor truck. Not used as of version 0.4.0+) b : This node is assigned an extra buoyancy force (Experimental!) p [ Version 0.36.3+ ] : Disables particle effects for this node (Like dust.) L [ Version 0.36.3+ ] : Enables node settings logging into the ror.log for this node l : This node bears a part of the cargo load Load mass (in Kilograms) (optional, needs l flag) : Real number ; Overrides the load mass for this node. Only valid if used with l option. Please note that the load-nodes where you specify the mass explicitly are not calculated with the global load mass. So if you specify a custom mass on any load, you will also increase the mass on all other nodes if you do not decrease the global mass. NOTE: You can put a comment at the end of a node-line. nodes ;id, x, y, z, options ;main chassis 0, 0.00, 0.75, 0.66 1, 0.00, 0.75, 1.84 2, 0.63, 0.75, 0.66 3, 0.63, 0.36, 0.66, l 4, 0.63, 0.75, 1.84 5, 0.63, 0.36, 1.84, n 6, 1.48, 0.75, 0.66, l 7, 1.48, 0.00, 0.66 8, 1.48, 0.75, 1.84, c 9, 1.48, 0.00, 1.84, x 10, 2.33, 0.75, 0.66, y 11, 2.33, 0.00, 0.66 This section supports multiple options as argument. If you want a f and b node together you could write something like this: nodes 11, 2.33, 0.00, 0.66, fb This setting will set the node mass to 2000 kilograms: nodes 14, 1.36, 0.00, 1.97, l 2000 This setting will set the node as non-contactable and set the mass to 2000 kilograms: nodes 14, 1.36, 0.00, 1.97, cl 2000 You can debug your truck's node masses by enabling Debug actor mass in settings: Look into your RoR.log after spawning and you could see something like this: Node 0 : 3662 kg Node 1 : 1730 kg ... Node 13 : 1180 kg (normal load node: 6000 kg / 6 nodes) Node 14 : 1180 kg (normal load node: 6000 kg / 6 nodes) ... Node 136 : 5026 kg (overridden by node mass) Node 141 mass (20kg) too light. Resetting to minimass (50kg). ... TOTAL VEHICLE MASS: 32399 kg You can set any option property, loadweight, friction, volume, and surface-coefficients as default with set_node_defaults .","title":"Nodes"},{"location":"vehicle-creation/fileformat-truck/#nodes2","text":"Nodes2 use the same syntax as nodes, except the first argument can be any string instead of a number. After using a name for a node in the nodes2 section, you can use it for any node parsing throughout the rest of the file. valid characters for the string: a-z,A-Z,0-9, _ For example: nodes2 ; name, x, y, z, options ; main chassis 0, 0.00, 0.75, 0.66 1, 0.00, 0.75, 1.84 special_node, 0.63, 0.75, 0.66 3, 0.63, 0.36, 0.66,l 4, 0.63, 0.75, 1.84 another_one, 0.63, 0.36, 1.84 hook_node, 1.48, 0.75, 0.66,lh 50 We advise to use the following scheme for naming the nodes: function_section_name So for example a rear hook node could look like this: hook_rear_hook1 There is also a fallback in place which will resolve named nodes to normal node numbers. For example if you convert an existing truck to named nodes (nodes2) and don't want to replace all occurrences, just leave the numbers there, it will take them up as classic node numbers. Things to keep in mind: Transition from nodes to nodes2 is easy: just replace nodes with nodes2 , the numbers will act as the name strings Transition from nodes2 to nodes is impossible, since nodes rely on the linear numbering of nodes Only use node names without any special characters or spaces (only a-z, A-Z, 0-9, _, -) You don't need to convert all nodes to nodes2 with names, if a nodes2 named node is not found, it will fallback to using the number as classic node.","title":"Nodes2"},{"location":"vehicle-creation/fileformat-truck/#beams","text":"This section defines all the beams connecting nodes. Each line describes a beam. node_A : Node ID ; Connected node node_B : Node ID ; Connected node options (optional) : String ; default = empty v : Dummy option, does nothing. Beams are visible by default. i : This beam is invisible. r : This beam is a rope (no resistance to compression, but will deform/break when expanded) s : This beam is a support beam (no resistance to expansion, but will deform/break when compressed). Support beams have 1/10 th of the damping of the last set_beam_defaults setting extension_break_limit (optional) : Positive real number ; default = 4 * original length ; Only valid with option \" s \" TIP: Support beams are very useful for limiting movement of body panels like trunks, hoods, and doors from going inside the car while still allowing rotation without costly and complicated collisions. Default expansion break length is . User set break length factor is optional. Valid factors are > 0.0. . beams ;node1, node2, options 0, 1 2, 4 3, 5, i 6, 8, i 7, 9 10, 12, i 11, 13, i ; support beam, default extension break limit 11, 23, s ; visible support beam, user set extension break limit original spawn length * 12.5 11, 24, s 12.5 This section supports multiple options as argument. If you want a 'i' and 'r' node together you could write something like this: ;invisible rope 11, 13, ir ; invisible support beam, default extension break limit 11, 25, is ; invisible support beam, user set extension break limit original spawn length * 25 11, 26, si 25.0","title":"Beams"},{"location":"vehicle-creation/fileformat-truck/#cameras","text":"This section is important. It helps to position the truck in space, by defining a local direction reference. This is used to measure the pitch and the roll of the truck. It is also very important to orient the truck's cameras. The three parameters are node numbers. The first is the reference node and may be anywhere. The second must be behind the first (if you look at the front of the truck, it is hidden behind the first). The third must be at the left of the first (if you look to the right of the truck, it is hidden by the first). Correct relative placement of these nodes is important, or it may break the inside camera view. cameras ;center, back, left 0, 2, 1","title":"Cameras"},{"location":"vehicle-creation/fileformat-truck/#cinecam","text":"This defines the position of the in-truck camera. It is a special node suspended from eight chassis nodes. Required parameters: X,Y,Z position (in meters) : Real numbers ; Coordinates of the camera point. 8 node bindings : Node ID ; Nodes to which the camera point is bound. Optional parameters: beam spring : Real number ; Default=8000 beam damping : Real number ; Default=800 node weight (Kg) : Real number ; [ Version 2020.01+ ] Weight of the camera point. Default=20Kg Example: cinecam ; x, y, z, <---------8 bindings--------->, Opt: spring, damping, node-weight 0.66, 2.0, 1.8, 75, 76, 77, 78, 73, 74, 53, 54, 8000.0, 800.0, 20.0 Note: If you have multiple cinecams, you also need to have multiple cameras . You can simply duplicate the line per cinecam. Example: cameras ;center, back, left 0, 2, 1 0, 2, 1 0, 2, 1 cinecam ; x, y, z, <---------8 bindings--------->, Opt: spring, damping, node-weight 0.66, 2.0, 1.8, 75, 76, 77, 78, 73, 74, 53, 54, 8000.0, 800.0, 20.0 0.56, 1.0, 1.4, 74, 75, 76, 77, 72, 73, 52, 53, 8000.0, 800.0, 20.0 0.36, 2.5, 1.9, 70, 75, 73, 76, 74, 79, 53, 50, 8000.0, 800.0, 20.0","title":"Cinecam"},{"location":"vehicle-creation/fileformat-truck/#end","text":"This section will stop the parser. Everything after it will be ignored. Since [ Version 0.4.5.0 ] , it's optional. In previous versions it's STRICTLY REQUIRED - without it, the vehicle will crash the game. end","title":"End"},{"location":"vehicle-creation/fileformat-truck/#organizational-sections","text":"These sections are not required, but will make it easier to locate your file or work with. Do not use carets in your syntax, they are used to mark sections!","title":"Organizational Sections"},{"location":"vehicle-creation/fileformat-truck/#guid","text":"You should use the guid feature to allow RoR to recognize your truck uniquely. This section is required for skins . ;guid <GUID> guid 6daaee29-e462-4d99-96d2-4577294f7b10 You can generate some GUIDs here .","title":"GUID"},{"location":"vehicle-creation/fileformat-truck/#fileformatversion","text":"This tells RoR what version of RoR your truck is built for. Most trucks built today should use fileformatversion 3 Version 1 = Pre-RoR 0.32 Version 2 = RoR 0.32 - 0.35 Version 3 = Post-RoR 0.36 Leaving out this tag will result in version 1. fileformatversion 3","title":"Fileformatversion"},{"location":"vehicle-creation/fileformat-truck/#author","text":"author <Type> <AuthorID> <AuthorName> <Email> Type = Tells what the author referenced in the next section did. Recommended types to put: chassis, texture, support, etc. AuthorID = ID of the author's RoR Forum account. To get your ID, view your forum profile and check the number shown in the URL. For example: https://forum.rigsofrods.org/members/curiousmike.5831/ 5831 would be the ID. AuthorName = The author's username. Email = The author's e-mail. (optional) Each author requires a separate line. author chassis 4 heinz_peter heinz@mail.com author texture 123 forname_surname_othername someuser@mail.com author support 5487 otheruser otheruser@mail.com Please note: Do not use spaces in the type, authorname, or email. Instead, use an underscore ( _ ). In the game, the underscore will be replaced with a space.","title":"Author"},{"location":"vehicle-creation/fileformat-truck/#description","text":"description Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. end_description Pretty self-explanatory. Only the first 3 lines will get displayed in the Truck HUD. Do not put keywords in the description; they will mess up the truck file.","title":"Description"},{"location":"vehicle-creation/fileformat-truck/#fileinfo","text":"General info about the vehicle. Unique ID (nullable) : String ; default = -1 ; Empty value = -1 ; This field specifies the unique file ID (you get one by uploading it to the repository). Category ID (optional) (nullable) : Decimal number ; default = -1 ; Empty value = -1 ; This is the category number from the repository. It is recommended that you give your truck a category. File version (optional) : Decimal number ; default = 0 ; Version of the vehicle, read by users and the repository. For backwards compatibility, this field also accepts real number (a warning is reported). ; syntax: ;fileinfo <uniqueid>, <categoryid>, <fileversion> ; example: fileinfo 000UID, 107, 2 Available category IDs ;;; vehicles 108, Other Land Vehicles 146, Street Cars 147, Light Racing Cars 148, Offroad Cars 149, Fantasy Cars 150, Bikes 155, Crawlers 152, Towercranes 153, Mobile Cranes 154, Other cranes 107, Buses 151, Tractors 156, Forklifts 159, Fantasy Trucks 160, Transport Trucks 161, Racing Trucks 162, Offroad Trucks 110, Boats 113, Helicopters 114, Aircraft 117, Trailers 118, Other Loads ;;; terrains 129, Addon Terrains 859, Container 875, Submarine ;note: these categories are NOT in the repository: 5000, Official Terrains 5001, Night Terrains ;do not use category numbers above 9000! 9990, Unsorted 9991, All 9992, Fresh 9993, Hidden","title":"Fileinfo"},{"location":"vehicle-creation/fileformat-truck/#help","text":"NOTE: This section is not used as of version 0.39.5+ The help section gives the name of the material used for the help panel on the in-game dashboard. This material must be defined elsewhere in a material file. This is optional. (But it looks cool, so use it!) NOTE: This setting can be overridden by section \"guisettings\" help tracks/semihelp","title":"Help"},{"location":"vehicle-creation/fileformat-truck/#comments","text":"Comments are ignored by RoR. They are useful for telling users what things do in the truck file. Comments can be put anywhere by putting a semicolon ( ; ) as the first character of the line to be commented. You can also comment out several lines of text using this format: comment One morning, as Gregor Samsa was waking up from anxious dreams, he discovered that in bed he had been changed into a monstrous vermin. He lay on his armour-hard back and saw, as he lifted his head up a little, his brown, arched abdomen divided up into rigid bow-like sections. From this height the blanket, just about ready to slide off completely, could hardly stay in place. His numerous legs, pitifully thin in comparison to the rest of his circumference, flickered helplessly before his eyes. end_comment","title":"Comments"},{"location":"vehicle-creation/fileformat-truck/#hideinchooser","text":"Excludes the vehicle/load from being shown in the vehicle menu on top of the screen. Place the single keyword somewhere in the vehicle/load file. hideInChooser","title":"hideInChooser"},{"location":"vehicle-creation/fileformat-truck/#vehicle-specific","text":"The following sections define important vehicle parts, like wheels, shock absorbers, and the like.","title":"Vehicle-specific"},{"location":"vehicle-creation/fileformat-truck/#engine","text":"The engine section contains the engine parameters. Parameters are: Shift down RPM : Real number The engine speed at which the automatic transmission will shift down (gear 2 and up) or the clutch engages (driving off). Shift up RPM : Real number The engine speed at which the automatic transmission will shift up. Actual redline is this value x1.25. Torque : Real number Engine torque in newton-meters (N/m). The higher the value, the faster a truck will accelerate. RoR uses a flat torque model, usually correct for large intercooled turbo diesels. Global gear Ratio : Real number A global gear conversion ratio. (Final gear reduction ratio) Rear gear ratio : Real number Gear ratio of reverse. For every turn of the wheel the engine will have to turn this many times (not counting the differential ratio). Neutral gear ratio : Real number Gear ratio of neutral gear. 1.0 is a good one as it helps to distinguish between reverse and forward gears First gear ratio : Real number Gear ratio of 1 st gear. Second/etc gear ratio : Real number Gear ratio of all further gears. Note there must be between 1 and 21 forward gears. The final gear must be followed by a -1 value (parser will emit a warning if the terminator is missing). engine ;min rpm, max rpm, torque, differential, reverse, neutral, 1st, 2nd, 3rd, 4th, 5th, 6th... 1000.0, 1500.0, 8000.0, 2.00, 10.85, 10.00, 13.86, 9.52, 6.56, 5.48, 4.58, 3.83, 3.02, 2.53, 2.08, 1.74, 1.43, 1.20, 1.00, -1.0 One good source of practical gear ratios is Eaton Fuller . To see the ratios, click the name of the transmission and find \"Product Specifications Guide\". It's wise to make sure you can get into final gear. If your vehicle decelerates in a gear you may not have enough power, or the gear ratio may be too high.","title":"Engine"},{"location":"vehicle-creation/fileformat-truck/#engoption","text":"Engoption sets optional parameters to the engine. It is mainly used for car engines. Parameters are: Engine inertia : Real number , default = 10.0 . The default game value is correct for a large diesel engine. For smaller engines you probably want smaller values. 1.0 or 0.5 would be appropriate for small atmospheric engines, for instance. Engine type : One Character String , default = t . Valid types are t for truck engine and c for car engine. This parameter changes engine sound and other engine characteristics. Clutch Force (optional) : [ Version 0.36.2+ ] Real number , default = 10000 for trucks, 5000 for cars . Shift Time : (optional) : [ Version 0.36.2+ ] Positive real number , default = 0.2 seconds . Time (in seconds) that it takes to shift. Requires a defined clutch force parameter to work. Clutch Time (optional) : [ Version 0.36.2+ ] Positive real number , default = 0.5 seconds . Time (in seconds) the clutch takes to apply. Requires a defined clutch force parameter to work. Post Shift Time (optional) : [ Version 0.36.2+ ] Positive real number , default = 0.2 seconds . Time (in seconds) until full torque is transferred. Requires a defined clutch force parameter to work. Stall RPM (optional) : [ Version 0.4.0.7+ ] Real number , default = 300 . RPM where the engine will stall. Idle RPM (optional) : [ Version 0.4.0.7+ ] Real number , default = 800 . Idle RPM the engine should attempt to maintain. Max Idle Mixture (optional) : [ Version 0.4.0.7+ ] Real number , default = 0.1 . Defines the maximum amount of throttle the truck will use to maintain the idle RPM. Min Idle Mixture (optional) : [ Version 0.4.0.7+ ] Real number , default = 0.0 . Defines the minimum amount of throttle the truck will use to maintain the idle RPM. Braking torque (optional) : [ Version 2020.01+ ] Real number , default = engine_torque / 5 . Defines the amount of engine braking when you let go of the throttle. engoption ;inertia, type, clutchforce, shifttime, clutchtime, postshifttime, stallRPM, idleRPM, maxIdleMixture, minIdleMixture 0.5, c, 5000.0, 0.75, 0.9, 0.75, 500, 700, 0.25, 0.06 ;sample shift timings for a mid size truck PROTIP: Use the \"Engine inertia\" value to make the engine start faster. With a value of 0.1, the engine will start instantly. With a value of 10, the engine requires about 30 seconds of cranking before it starts. Values between 1 and 3.5 are great for vehicles that you drive frequently, or race vehicles and the like that you want to start fast. However, using a higher value makes it harder to stall the engine. Making something to tow a lot of weight? Raise it up to 9 or 10 and it won't really stall, ever. (With values over 10, it may not start at all, so be careful.)","title":"Engoption"},{"location":"vehicle-creation/fileformat-truck/#engturbo","text":"Engine's Turbo settings: When defining this on your truck file, you do not need to put \"t\" type of vehicle in the engoptions. There are 2 version of this section: Using Version 1 you have more control over the power added to the engine, but this can end up in unrealistic simulation if the values aren't correctly chosen. Turbo is always giving 20 PSI at max rpm. (Which isn't realistic.) Using Version 2 you have less control over the power added, but you can end up with a realistic simulation depending on the maxPSI value. Version 1: (Not recommended) type : Positive real number ; Turbo's simulation version, leave it as 1 for this type of simulation. inertiaFactor : Positive real number ; Turbo's inertia, how much time it will take for the turbo to spool up. Big turbos tend to have Values between 2 and 6, while small turbos are between 0.1 and 1. numTurbo : Real number <0 - 4> ; The number of turbos in the engine. No effects for the moment. additionalTorque Positive real number ; Torque in Nm that will be added at max turbo rpm. engine_rpm_op ; (optional) ; Positive real number ; default = 0 ; Engine's RPM at which turbo will start to spool up. engturbo ;type, inertiaFactor, numTurbo, additionalTorque, engine_rpm_op 1, 0.2, 1, 430, 3200 Version 2: type : Positive real number ; Turbo's simulation version, leave it as 2 for this type of simulation. inertiaFactor : Positive real number ; Turbo's inertia, how much time it will take for the turbo to spool up. Big turbos tend to have Values between 2 and 6, while small turbos are between 0.1 and 1. numTurbo : Real number <0 - 4> ; The number of turbos in the engine. No effects for the moment. maxPSI ; Positive real number ; Max PSI the turbo will give. for each 14.7 psi added, the power out is multiplied per 2. (This is not perfect, but it is theoretical) engine_rpm_op ; (optional) ; Positive real number ; default = 0 ; Engine's RPM at which turbo will start to spool up. BOV ; (optional) ; Boolean <0= disabled, 1= enabled> ; default = 0 ; Enable blow off valve. BOV_minPSI ; (optional) ; Positive real number ; default = 11 ; Minimum PSI at which the blow off valve starts to operate. wastegate ; (optional) ; Boolean <0= disabled, 1= enabled> ; default = 0 ; Enables or disable the wastegate. wastegate_maxpsi ; (optional) ; Positive real number ; default = 20 ; maxPSI on which the wastegate will limit the turbo. wastegate_threshold ; (optional) ; Positive real number ; default = 0 ; Wastegate's threshold. (Optimal values between 0.01 and 0.1) antilag ; (optional) ; Boolean <0= disabled, 1= enabled> ; default = 0 ; Enables or disable the anti-lag system. antilag_chance ; (optional) ; Positive real number <min = 0, max = 1> ; default = 0.9975 ; Random number which calculates the chances of the anti lag's combustion. The lower the number, the more the chances. (Optimal values between 0.95 and 0.99) antilag_minRPM ; (optional) ; Positive real number ; default = 3000 ; Minimum engine's RPM on which the anti lag system start to work. antilag_power ; (optional) ; Positive real number ; default = 170 ; Power factor which will be used to sustain the turbo's spinning while anti lag is working. engturbo ;type, inertiaFactor, numTurbos, maxPSI, rpm_op, bov, bov_minPSI, wastegate, wastegate_maxpsi, wastegate_threshold, antilag, antilag_chance, antilag_minRPM, antilag_power 2, 4, 1, 35, 3500, 1, 11, 1, 32, 0.02, 1, 0.9985, 3000, 250","title":"Engturbo"},{"location":"vehicle-creation/fileformat-truck/#brakes","text":"Parameters: Default braking force : Real number ; default = 30000 ; This allows you to change the default braking force value. The default is 30000, which is generally too high a value for smaller cars and trucks. Parking brake force (optional) : [ Version 0.36.3+ ] Real number ; default = (brake_force * 2) ; brakes ; brake_force, [park_brake_force] 20000, 15000","title":"Brakes"},{"location":"vehicle-creation/fileformat-truck/#antilockbrakes","text":"AntiLockBrakes settings: regulating_force : Positive real number from range <1 - 20> ; Valid range 1 (no regulation) - 20 (max regulation). Any other value is clamped to the <1 - 20> interval. min_speed : Positive real number ; The speed-limit where the anti-lock-brakes system gets active pulse/sec (optional) : Positive decimal number <1 - 2000> mode (optional) : mode: MODES JOINED WITH & ON : System is active at spawn OFF : System is inactive at spawn NODASH : No dashboard indicator NOTOGGLE : The system cannot be turned on/off and stays ON or OFF ;AntiLockBrakes regulation-force, minspeed, pulse/sec, mode AntiLockBrakes 12, 15, 2000, mode: ON & NODASH Examples of MODE settings: System is activated at spawn with no dashboard indicator: mode: ON & NODASH System is activated at spawn and can NOT be shut off: mode: ON & NOTOGGLE System is activated at spawn, no dashboard indicator and can NOT be shut off mode: ON & NODASH & NOTOGGLE System deactivated at spawn and no dashboard indicator: mode: OFF & NODASH In game, you can toggle the anti-lock brakes on/off with SHIFT+B Anti-lock Brakes do NOT have any impact on your parking brake behavior.","title":"AntiLockBrakes"},{"location":"vehicle-creation/fileformat-truck/#tractioncontrol","text":"NOTE: wheelslip and fade_speed have been made obsolete with version 2020.01 (see: https://github.com/RigsOfRods/rigs-of-rods/commit/57dfbba4f16431e7b6db878223d86a17f97a92ce ) In game, you can toggle the traction control on/off with SHIFT+V Parameters: regulating_force : Positive real number from range <1 - 20> ; Valid range 1 (no regulation) - 20 (max regulation). Any other value is clamped to the <1 - 20> interval. wheelslip : Positive real number ; Allowed wheel-slip in percentage of the actual speed. fade_speed (optional) : Positive real number ; The speed where the allowed wheel-slip doubles (use low settings for drifter setups) pulse/sec (optional) : Positive real number from range <1 - 2000> ; Any other value is clamped to the <1 - 2000> interval. options (optional) : String ; ON : System spawns activated OFF : System spawns deactivated NODASH : Hides dashboard indicator NOTOGGLE : System cannot be turned on/off and remains in original state. Valid modes: ON : System is activate at spawn ON & NODASH : System is activate at spawn and no dashboard indicator ON & NOTOGGLE : System is activate at spawn and can NOT be shut off ON & NODASH & NOTOGGLE : System is activate at spawn, no dashboard indicator and can NOT be shut off OFF : System deactivated at spawn OFF & NODASH : System deactivated at spawn and no dashboard indicator ;TractionControl regulation-force, wheelslip, fadespeed, pulse/sec, mode TractionControl 6, 0.01, 100, 2000, mode: ON","title":"TractionControl"},{"location":"vehicle-creation/fileformat-truck/#slopebrake","text":"NOTE: This section has been made obsolete with 0.4.6.0 (see: https://github.com/RigsOfRods/rigs-of-rods/commit/523c02f854853cc5159d4aacdd41cf1e73dff5dd ) This section fixes the bug, where trucks slowly roll down a slope no matter how much brake-force is applied. SlopeBrake settings: regulating force : Positive real number from range <0 - 20>; Valid range 0 (no regulation) - 20 (max regulation) attach-angle : Positive real number from range <1 - 45>; Valid range any positive integer 1 - 45. The angle where the slope brake tries to activate at full force release-angle : Positive real number from range <5 - 45>; Valid range any positive integer 5 - 45. Adds to attach-angle. The angle where the slope brake will reset and restart when it was not able to keep the wheel from spinning. Use small numbers here. ;SlopeBrake regulating force, attach-angle, release-angle SlopeBrake 10, 5, 12","title":"SlopeBrake"},{"location":"vehicle-creation/fileformat-truck/#wheels","text":"This section is important: it defines the wheels! Parameters are: Radius - Real number ; The radius of the wheel, in meters. Width (ignored) - Real number ; Use any number (must be present for compatibility), wheel width is auto-calculated from distance between node1 and node2. number of rays - Real number ;The number of 'pie pieces' that make up the wheel. For reference, 3 makes the wheel triangular, and 4 makes the wheel square. Recommended values are between 10 and 16 . Node 1 - Node number or name ;The node on the axle where the one side of the wheel starts. Node 2 - Node number or name ;The node on the axle where one side of the wheel ends. To clarify, if you imagine a beam that goes right through the middle of the wheel along the axis of rotation, Node 1 and Node 2 would be at the intersection between one side of the wheel and the beam and the intersection between other side of the wheel and the beam. Rigidity Node - Node number or name ; The number of a special rigidity node (see explanation about Axle Rigidity ). Use 9999 if there is no rigidity node. Wheel Braking - Positive real number from range <0 - 4>; 0 for unbraked wheels, 1 for braked wheels. For directional braking, as found in airplanes, use 2 for a left wheel, 3 for a right wheel. In 0.37+, 4 is used for a wheel with a footbrake, but no parking brake. Wheel Drive - Positive real number from range <0 - 2>; 0 for undriven wheels, 1 for wheels driven forwards, 2 for wheels driven backwards Reference arm node - Node number or name ; The reference arm node for the wheel. This is where reaction torque is applied to the chassis. Set it to a node in front of the wheel for more traction and behind the wheel for less traction. Setting the reference arm node to the same node as Node 1 or Node 2 gets rid of the effects of the Reference Arm Node. Mass - Real number ; Mass of the wheel, in kilograms. Springiness - Real number ; The stiffness of the wheel, somewhat equivalent to tire pressure. Having too much spring will make the steering wheels bounce back and forth during understeer, sending vibrations through the entire vehicle. Damping - Real number ; The rebound rate of the wheel Materials - String ; Face material and band material. (no comma between them) If you don't have a custom material, use tracks/wheelface for the face and tracks/wheelband1 for a single wheel or tracks/wheelband2 for dual mounted wheels. wheels ;radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, facemat bandmat 0.54, -1, 12, 35, 36, 9999, 1, 0, 3, 200.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband1 0.54, -1, 12, 37, 38, 9999, 1, 0, 5, 200.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband1 0.54, -1, 12, 39, 40, 41, 1, 1, 25, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 0.54, -1, 12, 41, 42, 40, 1, 1, 23, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 Notes: Wheel breaking strength is set by the last Beam defaults in the truck file before the wheels section. This can help the wheel to go faster before it breaks. The order in which the wheels are declared is important: each consecutive pair of wheels is grouped into an axle. A truck cannot have an odd number of powered wheels, since one wheel would not be in a pair. If this happens, the odd wheel will not move.","title":"Wheels"},{"location":"vehicle-creation/fileformat-truck/#wheels2","text":"This section improves wheels by simulating both wheel tires and rims. The player is able to set tire pressure via key input. Rim radius - Real number The radius of the wheel rim in meters Tyre radius - Real number The radius of the tire in meters, measured from the center of the wheel. Width - Real number Use any number (must be present for compatibility), wheel width is auto-calculated from distance between node1 and node2. Number of rays - Real number The number of 'pie pieces', or corners, that make up the wheel. For reference, 3 makes the wheel triangular, and 4 makes the wheel square. Recommended values are between 10 and 16 . Node 1 - Node number/name The node where the wheel starts. Node 2 - Node number/name The node where the wheel ends. (See Wheels for an explanation of how this works.) Rigidity Node - Node number/name The number of a special rigidity node (see Axle Rigidity explanation ). Use 9999 if there is no rigidity node. Wheel Braking - Positive real number from range <0 - 4>; 0 for unbraked wheels, 1 for braked wheels. For directional braking, as found in airplanes, use 2 for a left wheel, 3 for a right wheel. In 0.37+, 4 is used for a wheel with a footbrake, but no parking brake. Wheel Drive - Positive real number from range <0 - 2>; 0 for an undriven wheel, 1 for a wheel driven forwards, 2 for a wheel driven backwards. Reference arm node - Node number/name The reference arm node for the wheel. This is where reaction torque is applied to the chassis. Set it to a node in front of the wheel for more traction and behind the wheel for less traction. Mass - Real number Mass of the wheel in kilograms. Rim springiness - Real number The stiffness of the wheel rim. Rim damping - Real number The rebound rate of the wheel rim. Tyre springiness - Real number The stiffness of the tire. Tyre damping - Real number The rebound rate of the tire. Materials - String Face material and band material. (no comma between them) If you don't have a custom material, use tracks/wheelface for the face and tracks/wheelband1 for a single wheel or tracks/wheelband2 for dual mounted wheels. wheels2 ;radius, radius2, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, rim spring, rim damping, simple spring, simple damping, facemat bandmat 0.335, 0.625, -1, 12, 44, 45, 9999, 1, 1, 3, 280.0, 900000.0, 200.0, 400000.0, 2000.0, tracks/daffwheelface tracks/dafwheelband 0.335, 0.625, -1, 12, 46, 47, 9999, 1, 1, 5, 280.0, 900000.0, 200.0, 400000.0, 2000.0, tracks/daffwheelface tracks/dafwheelband 0.335, 0.625, -1, 12, 48, 49, 50, 1, 1, 31, 280.0, 900000.0, 200.0, 200000.0, 2000.0, tracks/dafrwheelface tracks/dafwheelband 0.335, 0.625, -1, 12, 50, 51, 49, 1, 1, 33, 280.0, 900000.0, 200.0, 200000.0, 2000.0, tracks/dafrwheelface tracks/dafwheelband 0.335, 0.625, -1, 12, 52, 53, 54, 1, 1, 31, 280.0, 900000.0, 200.0, 200000.0, 2000.0, tracks/dafrwheelface tracks/dafwheelband 0.335, 0.625, -1, 12, 54, 55, 53, 1, 1, 33, 280.0, 900000.0, 200.0, 200000.0, 2000.0, tracks/dafrwheelface tracks/dafwheelband","title":"Wheels2"},{"location":"vehicle-creation/fileformat-truck/#meshwheels","text":"Mesh wheels allows you to do very nice wheels. It takes an Ogre3D mesh of a rim (the rim only, without the tire!). The mesh should be centered, and of the right size for the wheel you want to do: its outer diameter should be the same as the \"rim_radius\" parameter, and its width should be the same as the distance between node1 and node2. The other parameters are similar to the wheels section, though there are a few differences. The side value should be l or r depending on the side of the wheel, and the final parameters are the mesh name and the material for the tire. The mapping of the texture should look something like this: Here is an example picture of a rim mesh, as it should be modeled. The tire geometry is added dynamically afterward by the game, and will flex like a real tire. meshwheels ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, side, meshname material 0.35, 0.21, 0.5, 14, 32, 33, 34, 1, 1, 18, 200.0, 300000.0, 2000.0, l, dodgechargerwheel.mesh dodgechargerband 0.35, 0.21, 0.5, 14, 34, 35, 33, 1, 1, 26, 200.0, 300000.0, 2000.0, r, dodgechargerwheel.mesh dodgechargerband 0.35, 0.21, 0.5, 14, 44, 45, 9999, 1, 0, 53, 200.0, 350000.0, 2000.0, l, dodgechargerwheel.mesh dodgechargerband 0.35, 0.21, 0.5, 14, 46, 47, 9999, 1, 0, 50, 200.0, 350000.0, 2000.0, r, dodgechargerwheel.mesh dodgechargerband","title":"Meshwheels"},{"location":"vehicle-creation/fileformat-truck/#meshwheels2","text":"This section works exactly the same way as meshwheels, except one difference. The tread of the wheel you generate does use the meshwheels section spring and damping ratios while the rim will use the ones from the set_beam_defaults . It enables you to make quite soft and flexing wheels, which have a lot lateral grip and are very reliable and predictable in comparison to normal meshwheels. Very useful for flex body tires, since the nodeflip-bug is mostly gone with this used the right way. Use set_beam_defaults . that make sense for rims (high spring, low damping) while the tires itself can be soft and have high damping values: set_beam_defaults 700000, 350, 60000000, 80000000 ;set_beam_defaults for the rim meshwheels2 ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, tirespring, tiredamping, side, meshname material 0.660, 0.315, 0.375, 12, 27, 26, 38, 4, 1, 22, 100.0, 150000.0, 1500.0, r, my-rim.mesh my-tire-material","title":"Meshwheels2"},{"location":"vehicle-creation/fileformat-truck/#flexbodywheels","text":"This section works exactly the same way then meshwheels2, except 2 differences: There is a contactive rim generated and you can place a tire mesh which is converted to a flexbody by RoR. For now, the rim mesh is a prop. Might be upgraded to flexbody later. This one has complete new tire physics, so for now, happy testing, please give feedback. set_beam_defaults 100000, 350, 60000000, 80000000 flexbodywheels ;radius, rimradius, width, rays, n1, n2, ref-n, braked, propulsed, force-n, weight, tire-spring, tire-damp, rim-spring, rim-damp, rim-orientation, rim-mesh tire-mesh 0.50, 0.300, 0.300, 16, 13, 11, 9999, 1, 1, 19, 92.5, 4500.0, 300.0, 3000000, 350, r, testtruck-rim.mesh testtruck-wheel.mesh","title":"Flexbodywheels"},{"location":"vehicle-creation/fileformat-truck/#shocks","text":"Shocks can be seen as tunable beams, useful for suspensions. node_1 : Node number/name The node where the shock starts. node_2 : Node number/name The node where the shock ends. spring_rate : Real number The 'stiffness' of the shock. The higher the value, the less the shock will move for a given bump. damping : Real number The 'resistance to motion' of the shock. The best value is given by this equation: [ 2 * sqrt(suspended_mass * spring_rate) ] max_contraction : Real number The shortest length the shock can be, as a proportion of its original length. 0 means the shock will not be able to contract at all, 1 will let it contract all the way to zero length. If the shock tries to shorten more than this value allows, it will become as rigid as a normal beam. max_extension : Real number The longest length a shock can be, as a proportion of its original length. 0 means the shock will not be able to extend at all. 1 means the shock will be able to double its length. Higher values allow for longer extension. precompression : Real number Changes compression or extension of the suspension when the truck spawns. This can be used to \"level\" the suspension of a truck if it sags in game. The default value is 1.0 . options (optional) : String , default = no options (shock is visible) i : This shock is invisible (default is visible). l OR L : Stability active suspension for left side. r OR R : Stability active suspension for right side. n : Placeholder. Does nothing, parser ignores it silently. shocks ;critical damping=2*sqrt(mass*spring) ;id1, id2, spring, damping, shortbound, longbound, precomp, options 36, 6, 200000, 10000, 0.3, 0.3, 1.0 37, 8, 200000, 10000, 0.3, 0.3, 1.0, l 38, 2, 200000, 10000, 0.3, 0.3, 1.0, r","title":"Shocks"},{"location":"vehicle-creation/fileformat-truck/#shocks2","text":"Shocks can be seen as tunable beams, useful for suspensions. Parameters: node_1 : Node number/name The node where the shock starts. node_2 : Node number/name The node where the shock ends. spring_in_rate : Real number The 'stiffness' of the shock, applied when the shock is compressing. The higher the value, the less the shock will move for a given bump. damping_in_rate : Real number The 'resistance to motion' of the shock, applied when the shock is compressing. The best value is given by this equation: [ 2 * sqrt(suspended_mass * spring_rate) ] spring_in_progression_factor : Real number Progression factor for spring_in_rate. A value of 0 disables this option. 1...x as multipliers, example: [ maximum springrate == springrate + (factor*springrate) ] damping_in_progression_factor : Real number Progression factor for damp_in_rate. 0 = disabled, 1...x as multipliers, example: [ maximum dampingrate == springrate + (factor*dampingrate) ] spring_out_rate : Real number The 'stiffness' of the shock, applied when the shock is extending. The higher the value, the less the shock will move for a given bump. damping_out_rate : Real number The 'resistance to motion' of the shock, applied when the shock is extending. The best value is given by this equation: [ 2 * sqrt(suspended_mass * spring_rate) ] spring_out_progression_factor : Real number Progression factor for spring_out_rate. A value of 0 disables this option. 1...x as multipliers, example: [ maximum springrate == springrate + (factor*springrate) ] damping_out_progression_factor : Real number Progression factor for damp_out_rate. 0 = disabled, 1...x as multipliers, example: [ maximum dampingrate == springrate + (factor*dampingrate) ] max_contraction : Real number The shortest length the shock can be, as a proportion of its original length. 0 means the shock will not be able to contract at all, 1 will let it contract all the way to zero length. If the shock tries to shorten more than this value allows, it will become as rigid as a normal beam. max_extension : Real number The longest length a shock can be, as a proportion of its original length. 0 means the shock will not be able to extend at all. 1 means the shock will be able to double its length. Higher values allow for longer extension. precompression : Real number Changes compression or extension of the suspension when the truck spawns. This can be used to \"level\" the suspension of a truck if it sags in game. The default value is 1.0 . options (optional) : String , default = no options (shock is visible) i : This shock is invisible (default is visible). s : soft bump boundaries, use when shocks reach limiters too often and \"jumprebound\" (default is hard bump boundaries) m : metric values for shortbound/longbound applying to the length of the beam M : Absolute metric values for shortbound/longbound, settings apply without regarding to the original length of the beam. Use with caution, check RoR.log for errors. IMPORTANT : shocks2 needs at least 1500+ as a minimum damping value when using them as inbound/outbound only. (When your shocks2 truck bottoms out at spawn, damping is too low (or the springs don't support the weight of the truck) soft bump shocks need some boundary limit ( 5%+ ) to work proper as soft bump boundaries. You will find any errors in the RoR.log regarding to wrong values in 'M' setting or any other shock values. shocks2 ;invisible softbump shock, high value progressive for inbound, linear low values for outbound ;node1, node2, springin, dampin, progspringin, progdampin, springout, dampout, progspringout, progdampout, shortbound, longbound, precomp, options 45, 80, 22000, 2000, 5, 5, 2000, 1500, 0, 0, 0.8, 0.1, 1, is ;visible hardbump shock, high value progressive for inbound and outbound, boundaries apply metric in meters ;node1, node2, springin, dampin, progspringin, progdampin, springout, dampout, progspringout, progdampout, shortbound, longbound, precomp, options 45, 80, 22000, 2000, 15, 10, 22000, 2000, 15, 10, 0.5, 0.5, 1, m ;visible hardbump shock, high value progressive inbound only shock, boundaries apply metric as absolute values in meters ;node1, node2, springin, dampin, progspringin, progdampin, springout, dampout, progspringout, progdampout, shortbound, longbound, precomp, options 45, 80, 22000, 2000, 5, 5, 0, 0, 0, 0, 0.2, 2.5, 1, M Shockswapping help: This is an example how to get started with replacing shocks with shocks2. In this example, the shocks2 have exactly the same functionality then the original shocks. After adding the shocks2 delete the old shock and you are fine to tune/tweak your truck. shocks ;id1, id2, spring, damping, shortbound, longbound, precomp, options 36, 6, 200000, 10000, 0.3, 0.3, 1.0 shocks2 ;node1, node2, springin, dampin, progspringin, progdampin, springout, dampout, progspringout, progdampout, shortbound, longbound, precomp, options 36, 6, 200000, 10000, 0, 0, 200000, 10000, 0, 0, 0.3, 0.3, 1.0","title":"Shocks2"},{"location":"vehicle-creation/fileformat-truck/#shocks3","text":"[ Version 2020.01+ ] Shocks can be seen as tunable beams, useful for suspensions. Parameters: node_1 : Node number/name The node where the shock starts. node_2 : Node number/name The node where the shock ends. spring_in_rate : Real number The 'stiffness' of the shock, applied when the shock is compressing. The higher the value, the less the shock will move for a given bump. damping_in_rate : Real number The 'resistance to motion' of the shock, applied when the shock is compressing. The best value is given by this equation: [ 2 * sqrt(suspended_mass * spring_rate) ] damp_in_slow : Real number Damping factor for compression speeds below split_vel_in, example: [ damping == damp_in * damp_in_slow * vel ] split_vel_in : Real number Velocity threshold for the slow / fast compression speed damp_in_fast : Real number Damping factor for compression speeds above split_vel_in, example: [ damping == damp_ing * damp_in_slow * split_vel_ing + damp_in * damp_in_fast * (vel - split_vel_in) ] spring_out_rate : Real number The 'stiffness' of the shock, applied when the shock is extending. The higher the value, the less the shock will move for a given bump. damping_out_rate : Real number The 'resistance to motion' of the shock, applied when the shock is extending. The best value is given by this equation: [ 2 * sqrt(suspended_mass * spring_rate) ] damp_out_slow : Real number Damping factor for extension speeds below split_vel_out, example: [ damping == damp_out * damp_out_slow * vel ] split_vel_out : Real number Velocity threshold for the slow / fast extension speed damp_out_fast : Real number Damping factor for extension speeds above split_vel_out, example: [ damping == damp_out * damp_out_slow * split_vel_out + damp_out * damp_out_fast * (vel - split_vel_out) ] max_contraction : Real number The shortest length the shock can be, as a proportion of its original length. 0 means the shock will not be able to contract at all, 1 will let it contract all the way to zero length. If the shock tries to shorten more than this value allows, it will become as rigid as a normal beam. max_extension : Real number The longest length a shock can be, as a proportion of its original length. 0 means the shock will not be able to extend at all. 1 means the shock will be able to double its length. Higher values allow for longer extension. precompression : Real number Changes compression or extension of the suspension when the truck spawns. This can be used to \"level\" the suspension of a truck if it sags in game. The default value is 1.0 . options (optional) : String , default = no options (shock is visible) i : This shock is invisible (default is visible). m : metric values for shortbound/longbound applying to the length of the beam M : Absolute metric values for shortbound/longbound, settings apply without regarding to the original length of the beam. Use with caution, check RoR.log for errors. shocks3 ;node1, node2, springin(N/m), dampin(N/m/s), slowdampin, splitin(m/s), fastdampin, springout(N/m), dampout(N/m/s), slowdampout, splitout(m/s), fastdampout, shortbound, longbound, precomp, options 46, 55, 65000, 5800, 0.5, 1.2, 0.2, 65000, 1080, 0.5, 1.2, 0.2, 0.62, 0.00, 1.2, n","title":"Shocks3"},{"location":"vehicle-creation/fileformat-truck/#hydros","text":"The hydros section is concerned only with the steering actuators! They are beams which change their length depending on the steering of the truck. Hydros can use inertia . Parameters: node_1 : Node name or number The node where the hydro starts. node_2 : Node name or number The node where the hydro ends. lengthening_factor : Real number How much the hydro extends or contracts when a steering key is pressed (expressed as a proportion of the original length). Positive values extend when steering left and contract when steering right. Negative values do the reverse. options (optional) String , default = no options (hydro is visible) i : Makes the hydro invisible s : (Land vehicles) Disables the hydro at high speed (as seen sometimes with rear steering axles on large trucks) a : [ Version 0.36+ ] (Airplanes) This hydro is commanded by aileron input. r : [ Version 0.36+ ] (Airplanes) This hydro is commanded by rudder input. e : [ Version 0.36+ ] (Airplanes) This hydro is commanded by elevator input. u : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of aileron input and elevator input. v : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of inverse aileron input and elevator input. x : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of aileron input and rudder input. y : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of inverse aileron input and rudder input. g : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of elevator input and rudder input. h : [ Version 0.36+ ] (Airplanes) This hydro is commanded by the combination of inverse elevator input and rudder input. start_delay (optional) : Real number Inertia. stop_delay (optional) : Real number Inertia. start_function (optional) : String Inertia. stop_function (optional) : String Inertia. hydros ;node1, node2, factor, options 43, 37, -0.2 45, 37, 0.2 46, 36, 0.2, s 48, 36, -0.2, s","title":"Hydros"},{"location":"vehicle-creation/fileformat-truck/#animators","text":"The animator section concerns only Animators referring to game data! They are beams which change their length depending on the variables of the simulation. The parameters are: Node 1 - Node name or number The node where the animator starts. Required Node 2 - Node name or number The node where the animator ends. Required. lengthening factor - Real number A coefficient which specifies how much the animator moves. Required. Option string - String Required Options: vis - This creates a visible animator. ( It's not necessarily needed, but can help users read the truck file.) inv - This creates an invisible animator. airspeed - This animator extends or contracts with the actual speed (not speedometer indicated speed) for any vehicle. vvi - This animator extends or contracts with the vehicle's vertical velocity. altimeter100k - This animator extends or contracts with the vehicle's altitude up to 100,000 feet. altimeter10k - This animator extends or contracts with the vehicle's altitude up to 10,000 feet, at which point it will revert back to its original length. altimeter1k - This animator extends or contracts with the vehicle's altitude up to 1,000 feet, at which point it will revert back to its original length. These three animators can be used to create altimeters with three needles or similar objects, though for those small applications it is usually recommended that Add_animation be used. aoa - This animator extends or contracts with the dashboard's angle of attack. flap - This animator extends or contracts with the flap setting on the vehicle. airbrake - This animator extends or contracts with the airbrake setting on the vehicle. roll - This animator extends or contracts with the vehicle's roll. It will flip at 180 degrees roll to -180 degrees roll. This option can be used for an automatic trim feature. pitch - This animator extends or contracts with the vehicle's pitch. It will flip back at 180 degrees pitch to -180 degrees pitch. This option can be used for an automatic trim feature. throttle1 - This animator extends or contracts with the throttle setting of an aircraft's first engine. This option can be used for thruster mechanics. Valid sources include throttle1, throttle2, etc. etc. up to throttle8. rpm1 - This animator extends or contracts with the RPM of an aircraft's first engine. This option can be used for thruster mechanics. Valid sources include rpm1, rpm2, etc. etc. up to rpm8. aerotorq1 - This animator extends or contracts with the torque of an aircraft's first engine. Note that this only works for propeller engines, because torque is not applicable to jets. Valid sources include aerotorq1, aerotorq2, etc. etc. up to aerotorq8. aeropit1 - This animator extends or contracts with the pitch of an aircraft's first engine. Note that this only makes sense with propeller engines, pitch is not applicable to jets. Valid sources include aeropit1, aeropit2, etc. etc. up to aerotorq8. aerostatus1 - This animator extends with the On/Off/Fire status of an aircraft's first engine. Valid sources include aerostatus1, aerostatus2, etc. etc. up to aerostatus8. brakes - This animator extends or contracts with the vehicle's brake status. accel - This animator extends or contracts with the vehicle's accelerator status. clutch - This animator extends or contracts with the vehicle's clutch status. speedo - This animator extends or contracts with the speedometer indication. It scales with the guisetting speedometer. (It is best to use it even if there is no custom overlay dashboard; it simplifies the adjustment a lot.) tacho - This animator extends or contracts with the vehicle's RPM. It scales with guisetting tachometer. (It is best use it even if there is no custom overlay dashboard; simplifies the adjustment a lot.) turbo - This animator extends or contracts with the vehicle's turbocharger PSI. parking - This animator extends or contracts with the vehicle's parking brake status. shifterman1 - H-shift left right animator ( Reverse | 1-2 | 3-4 | 5-6...11-12 as positions, scales with engine settings (maxGear) shifterman2 - H-shift forth/back animator Reverse-2-6-8-10-12 | 1-3-5-7-9-11 as positions sequential - sequential shift animator ( i.e for tiptronic or wheel shift pedals), can be used for commands too ( no settable limits then ) shifterlin - for auto transmission animations or gearselect indicators torque - animator to simulate engine torque, useful in addition to wheel nodearms difflock - This animator extends or contracts with the difflock status of the truck (It only works when differentials are present in the truck.) rudderboat - This animator extends or contracts with the steering hydro on boats. throttleboat - This animator extends or contracts with the throttle status on boats. shortlimit - Adds shortbound movement limit to the animator, needs to be followed by a valid number. Limits are calculated in percentage like shocks. [ Version 0.38.24+ ] longlimit - Adds longbound movement limit to the animator, needs to be followed by a valid number. Limits are calculated in percentage like shocks. [ Version 0.38.24+ ] All options need to be connected by an vertical bar | , please refer to the example below. You can stack multiple options (like: airpseed | vvi | inv ), but it is not recommended and may result in weird behaviors. All animators are scaled to a maximum of -1/+1 as default coefficient, use the ratio setting to get the movement you want. Speed or force of the animators is NOT settable, though you can alter movement speed just with simple lever mechanics. The longer the lever arm, the slower the node will move. To tune your torque-animator to the needs of the truck, let it just work against a stiff shocks2 . The harder you make the shock, the more engine-rpm torque effect you get. Animators can use set_inertia_defaults . Inertia helps a lot to smooth instant movement like with shifters or airbrakes. animators ;node1, node2, factor, options 32, 26, 0.09, shifterlin | inv 5, 27, 0.10, accel | inv 5, 28, 0.10, brake | inv 5, 29, 0.10, clutch | inv 36, 41, -0.40, speedo | inv ;this one is visible 49, 3, -0.90, torque | vis ;this one is visible and has a short and a longbound limit 49, 3, -0.25, roll | vis | shortlimit: 0.02 | longlimit: 0.05","title":"Animators"},{"location":"vehicle-creation/fileformat-truck/#behavior","text":"These sections define behaviors for the vehicle, like command-operated hydraulics and modifications to how beams behave.","title":"Behavior"},{"location":"vehicle-creation/fileformat-truck/#commands","text":"The commands section describes the \"real\" hydros, that is, those you command with the function keys. They are like beams, but their length varies depending with the function keys you press. The parameters are: Node 1 : Node number/name ; The node where the command beam starts. Node 2 : Node number/name ; The node where the command beam ends. Rate of extension/contraction : Real number How fast the command beam moves. Maximum contraction : Real number The shortest length that the command beam will try to be, as a proportion of its initial length. Maximum extension : Real number The longest length the command beam will try to be, as a proportion of its initial length. Contraction key : Function key code (decimal number) A number representing the function key used to control the command beam. More than one can be controlled with the same key. (See below for the keymap.) Extension key : Function key code (decimal number) The key used to extend the command beam. Option flag (optional) : Single character i : Makes the command beam invisible. r : Makes the command behave like a rope or a winch (no compression strength). c : Makes the command beam auto-center: It will automatically return it to its starting position when a lengthening/shortening key is released. n : Placeholder, does nothing (useful as filler when you need to specify description) Description (optional) : String A text description that tells the user what the command beam does when the it is activated. This is shown by pressing CTRL+T ingame. There is no need to put a key in front of the text (like F1:_do_something) this will be done automatically! Writing \"hide\" will hide the command from the \"t-screen\". commands ;id1, id2, rate, short, long, keys, keyl, options description 10, 91, 0.1, 1.0, 7, 1, 2, i Death_machine 12, 93, 0.1, 1.0, 7, 1, 2, i 14, 90, 0.1, 1.0, 7, 1, 2 16, 92, 0.1, 1.0, 7, 1, 2 114, 122, 0.2, 1.0, 19, 3, 4 115, 123, 0.2, 1.0, 19, 3, 4, n Happy_butterfly_wings 126, 132, 0.1, 0.1, 1.0, 5, 6, r This is the default keymap: 1 = F1 2 = F2 3 = F3 etc. etc. 12 = F12 13 = CTRL+F1 14 = CTRL+F2 etc. etc. 24 = CTRL+F12 25 = ALT+F1 26 = ALT+F2 etc. etc. 36 = ALT+F12 37 = CTRL+ALT+F1 38 = CTRL+ALT+F2 etc. etc. 46 = CTRL+ALT+F10 Since RoR 0.4.0.5 it is possible to use up to 84 commands. The keymap changed because of that: 1 = F1 2 = F2 3 = F3 etc. etc. 12 = F12 13 = CTRL+F1 14 = CTRL+F2 etc. etc. 24 = CTRL+F12 25 = SHIFT+F1 26 = SHIFT+F2 etc. etc. 36 = SHIFT+F12 37 = ALT+F1 38 = ALT+F2 etc. etc. 46 = ALT+F10 49 = CTRL+SHIFT+F1 50 = CTRL+SHIFT+F2 etc. etc. 59 = CTRL+SHIFT+F11 61 = CTRL+ALT+F1 62 = CTRL+ALT+F2 etc. etc. 72 = CTRL+ALT+F12 73 = CTRL+SHIFT+ALT+F1 74 = CTRL+SHIFT+ALT+F2 etc. etc 84 = CTRL+SHIFT+ALT+F12 Note that some keymapped commands are by default assigned to Windows commands.. i.e. ALT+F4 closes the active window (in this case the RoR render window). It is best to avoid using those buttons if at all possible. If you hold F4 then hold/press ALT , the window should stay open and the command will work.","title":"Commands"},{"location":"vehicle-creation/fileformat-truck/#commands2","text":"Improved commands. Commands are beams which contract and extend when player presses the corresponding key combination. Since [ Version 0.36.2 ] you can specify an inertia function for your command. This reduces the swing of commands since they will operate smoothly with inertia. The parameters are: Node 1 : Node number/name ; The node where the command beam starts. Node 2 : Node number/name ; The node where the command beam ends. Shortening rate : Positive real number ; How fast the command beam shortens. Lengthening rate : Positive real number ; How fast the command beam lengthens. Maximum contraction : Positive real number ; The shortest length that the command beam will try to be, as a proportion of its initial length. Maximum extension : Positive real number ; The longest length the command beam will try to be, as a proportion of its initial length. Shortening key : Key code (decimal number) ; A number representing the function key needed to compress the command beam. More than one can be controlled with the same key. (see above for keymap) Lengthening key : Key code (decimal number) ; The key used to extend the command beam. Option flag(s) (optional) : n : Filler option, does nothing. i : Makes the command beam invisible. r : Makes the command beam behave like a rope or a winch. c : Makes the command beam auto-center: It will automatically return it to its starting position when a lengthening/shortening key is released. f : Stops the command moving faster when engine revs increase. p : Activates press-once functionality: A single press of a shortening/lengthening key will lengthen/shorten the command beam as much as possible. A second keypress of the key which started the command moving stops the automatic movement. o : is like p , but it will stop in the center position. Description (optional) : Placeholder = underscore '_' A text description that tells the user what the command beam does when it is activated. This is shown by pressing CTRL+T ingame. There is no need to put a key in front of the text (like F1:_do_something) this will be done automatically! Writing \"hide\" will hide the command from the \"t-screen\". Inertia: Start delay factor (optional) : [ Version 0.36.2+ ] ; Positive real number ; The delay upon command start. Note this isn't time in seconds, but are a factor (the lower the value, the more inertia there is) Inertia: Stop delay factor (optional) : [ Version 0.36.2+ ] ; Positive real number ; The delay upon command stop. Note this isn't time in seconds, but are a factor (the lower the value, the more inertia there is) Inertia: Start function (optional) : [ Version 0.36.2+ ] ; String ; Specifies what spline should be used for start. See diagram below. Inertia: Stop function (optional) : [ Version 0.36.2+ ] ; String ; Specifies what spline should be used for stop. See diagram below. Affects engine? (optional) : [ Version 0.4.0.5+ ] ; Positive real number ; default = 1.0 ; 0 means that moving this command won't affect engine RPM, so it is independent. Value larger than 0 specifies how much engine power will be needed for this command to move. Needs engine? (optional) : [ Version 0.4.0.5+ ] ; Boolean ; default = true ; value of \"true\" means that the command only works with a running engine. \"False\" means engine is not needed. commands2 ;id1, id2, rateShort, rateLong, short, long, keys, keyl, options Description 61, 113, 0.1, 0.5, 1.0, 4, 1, 2, of 62, 112, 0.1, 0.5, 1.0, 4, 1, 2, onf desc commands2 ;id1, id2, rateShort, rateLong, short, long, keyS, keyL, options description startDelay, stopDelay, startFunction stopFunction 115, 123, 0.10, 0.10, 1.00, 19.0, 3, 4, n First_Joint 0.5, 0.5, smoothcrane revprogressiv 127, 133, 0.10, 0.10, 1.00, 10.5, 5, 6, n Second_Joint 0.7, 0.5, smoothcrane revprogressiv 137, 147, 0.10, 0.10, 1.00, 10.5, 7, 8, n Third_Joint 0.7, 0.5, smoothcrane revprogressiv 143, 148, 0.05, 0.05, 0.50, 2.0, 9, 10, n Extremity_Joint 0.7, 0.5, smoothcrane revprogressiv commands2 ;id1, id2, rateShort, rateLong, short, long, keyS, keyL, options description startDelay, stopDelay, startFunction stopFunction affectEngine needsEngine 115, 123, 0.10, 0.10, 1.00, 19.0, 3, 4, n First_Joint 0.5, 0.5, smoothcrane revprogressiv 0 1 127, 133, 0.10, 0.10, 1.00, 10.5, 5, 6, n Second_Joint 0.7, 0.5, smoothcrane revprogressiv 0 0 137, 147, 0.10, 0.10, 1.00, 10.5, 7, 8, n Third_Joint 0.7, 0.5, smoothcrane revprogressiv 1 1 143, 148, 0.05, 0.05, 0.50, 2.0, 9, 10, n Extremity_Joint 0.7, 0.5, smoothcrane revprogressiv 1 0 Note: You may mix commands / commands2 sections, depending on what you want to use. Example: commands2 ;id1, id2, rateShort, rateLong, short, long, keyS, keyL, options description 61, 113, 0.1, 0.5, 1.0, 4, 1, 2, of 62, 112, 0.1, 0.5, 1.0, 4, 1, 2, onf Boom commands ;id1, id2, rate, short, long, keyS, keyL, options description 116, 124, 0.1, 1.0, 2.6, 3, 4 117, 125, 0.1, 1.0, 2.6, 3, 4, n Underlift commands2 ;id1, id2, rateShort, rateLong, short, long, keys, keyl, options Description 136, 116, 0.4, 4.4, 1.0, 10, 5, 6 136, 117, 0.4, 4.4, 1.0, 10, 5, 6","title":"Commands2"},{"location":"vehicle-creation/fileformat-truck/#set_inertia_defaults","text":"This command will set the defaults for all following commands, hydros, animators and rotators. start_delay : Real number , default = -1.0 . Entering value < 0 will reset all 4 values of this directive to defaults. stop_delay (optional) : Real number , default = -1.0 . Entering value < 0 will reset all 4 values of this directive to defaults. start_function (optional) : Inertia function name , default = none . stop_function (optional) : Inertia function name , default = none . ;set_inertia_defaults startDelay, stopDelay, startFunction stopFunction set_inertia_defaults 0.5, 0.5, smoothcrane revprogressiv ... set_inertia_defaults 0.7, 0.5, smoothcrane revprogressiv ... ; reset: set_inertia_defaults -1 NOTE: Both commas and spaces are accepted as delimiters between parameters.","title":"Set_inertia_defaults"},{"location":"vehicle-creation/fileformat-truck/#rotators","text":"Rotators are alternate commands(hydros) that allows you to do turntables, like in the base of a rotating crane. They use 10 reference nodes: 2 nodes to define the axis of rotation 4 nodes (must be a square, centered with the axis) to define the baseplate 4 nodes (again, a square, centered with the axis) to define the rotating plate. Then, in a similar way to commands, comes the rate of rotation, and the numbers of the left and right function keys. New in [ Version 0.4+ ] start_delay. Real, default 0.0 stop_delay. Real, default 0.0 start_function. stop_function. engine_coupling. Real, default 1.0 needs_engine. Boolean, default false Rotators can use inertia . The reference nodes for the baseplate and rotator plate must also match each other in order. (i.e. if you start at the front left for the base plate and work clockwise, do the same for the rotator plate!) See the example rotators code and attached picture. Both plates must be identical! rotators ;axis1, axis2, a1, a2, a3, a4, b1, b2 b3, b4, rate, keyleft, keyright, (Ver. 0.4+) start_delay, stop_delay, start_function, stop_function, engine_coupling, needs_engine 29, 30, 31, 32, 34, 33, 37, 38, 36, 35, 0.1, 1, 2, 1, 1, smooth, smooth, 0.5, true","title":"Rotators"},{"location":"vehicle-creation/fileformat-truck/#rotators2","text":"Same as rotators section, but more options that allow lightweight rotators, rotator force setting and tolerance (anti jitter) setting and correct description parsing. Additional options: Force : the rotating power of the rotator, default is 10000000 Tolerance : anti jitter setting for lightweight rotators, default is 0.0 . Rise gently to make your rotator spawn and rotate stable if needed Description : descriptive text visible in the t-screen rotators2 ;axis1, axis2, a1, a2, a3, a4, b1, b2 b3, b4, rate, keyleft, keyright, force, tolerance, description, (Ver. 0.4+) start_delay, stop_delay, start_function, stop_function, engine_coupling, needs_engine 29, 30, 31, 32, 34, 33, 37, 38, 36, 35, 0.1, 1, 2, 1000000, 0.025, Superstructure_left/right, 1, 1, smooth, smooth, 0.5, true","title":"Rotators2"},{"location":"vehicle-creation/fileformat-truck/#forwardcommands","text":"Forwards the command keys pressed while riding a truck to loads in close proximity. It is used to remote control the commands of a load. The load must have the \"importcommands\" tag. forwardcommands In 0.4.0.5 and above it is possible to toggle forwardcommands on/off for the current beam object. The standard button assignment for this is CTRL+SHIFT+F .","title":"Forwardcommands"},{"location":"vehicle-creation/fileformat-truck/#importcommands","text":"Enables a load to receive command keys from a manned vehicle in close proximity. The controlling vehicle must have the \"forwardcommands\" tag. The load only receives the keys that are pressed by the player, it must contain a commands section. Commands section for loads is defined in the same manner as in manned trucks. importcommands In 0.4.0.5 and above it is possible to toggle importcommands on/off for the current beam object. The standard button assignment for this is CTRL+SHIFT+I .","title":"Importcommands"},{"location":"vehicle-creation/fileformat-truck/#set_beam_defaults","text":"This is not a section, but a self-contained line that can be inserted anywhere in the truck file. It changes all the beams (and the hydros and ropes) declared after this line. You can use this line many times to make different groups of beams that have different characteristics (e.g. stronger chassis, softer cab, etc.). Parameters: Springiness : Real number ; Default: 9000000 ; The overall stiffness of a beam. The higher the value the stiffer the beam. Damping constant : Real number ; Default: 12000 ; The resistance to motion of a beam. Higher values make the beam less likely to deform. Deformation threshold constant : Real number ; Default: 400000 ; The amount of force that must be applied to a beam before it will not return to its original length. The lower the value, the easier it is to deform. Breaking threshold constant : Real number ; Default: 1000000 ; The amount of force that must be applied to a beam before it will break. Beam diameter : (optional) ; Real number ; Default: 0.05 (= 5cm) The visual size of a beam in meters. This setting only has a visual effect. Changing it does not modify how a truck will drive. Beam material (optional) ; String ; Default: tracks/beam ; The material used to color the beam. It must be defined in a separate .material file. Plastic deformation coefficient : (optional) ; Real number in range: 0.0 - 1.0 ; Default: 0.0 ; This defines how elastic the deformation of a beam is. It is explained in greater detail below. To use default values without having to type the numbers, use -1 in each field. Example: set_beam_defaults -1, -1, -1, -1 Or if you want to use the default values as a base: set_beam_defaults 9000000, 12000, 400000, 1000000, 0.05, tracks/beam, 0.0 Beware: Excessive spring will result in an unstable chassis. Increasing the damping will help with this, but excessive damping will crash RoR. Higher chassis mass may mitigate that problem if applicable. If you create a light car, you may want to reduce the spring, damping and deformation values to match the real, softer frame of a car, and also increase stability. Be aware that the current default values are \"overspringy\", or \"underdamped\" for stability reasons (that is why trucks often look too springy when they fall down a slope), but on softer designs you can correct this and have a better damping ratio. Missing beam textures may make RoR unstable. Example for a car: ;set_beam_defaults spring, damping, deform, break, diameter, material set_beam_defaults 3000000, 10000, 100000, 250000, 0.02, tracks/beamblack If you want to keep a rigid chassis base and drivetrain, you can do: beams ;base chassis and drivetrain with the default high-strength settings 1,2 2,3 ... 3,4 ;car body, softer setting set_beam_defaults 3000000, 10000, 100000, 250000 5,6 6,7 ... ;return to stronger defaults for the rest (e.g. hydros) set_beam_defaults -1, -1, -1, -1 ... If you want to to make something deform well (like for flexbodies), use these settings for the beam group you want to deform together with the global enable_advanced_deformation option to unleash unlimited beam physics for best results in crash deformation: ;set_beam_defaults spring, damping, deform, break, diameter, material, deform_coef set_beam_defaults 3000000, 10000, 100000, 250000, 0.02, tracks/beamblack, 0.9 The plastic deformation coefficient is 0.0 by default (elastic deformation). By setting it as property you can tune the related beam group to your needs. For example, if a cube made of nodes and beams is crashed to a wall, then the placement of the nodes are displaced, altering the original shape to an irregular one. This also affects the length of beams, if nodes are displaced, the beams may conform to a new shorter or longer length, and staying that way until another outside force is applied. Valid values: 0.0 - 1.0 , do not exceed that range! A plastic deformation coefficient setting of 0.0 is close to the original beam behavior of RoR 0.36.2 (quite elastic). 1.0 is close to the maximum plastic deformation you were able to reach with the former experimental enable_advanced_deformation patch. Never use a break setting lower then a deform setting! This will result in a beam breaking instantly when it starts deforming!","title":"Set_beam_defaults"},{"location":"vehicle-creation/fileformat-truck/#set_beam_defaults_scale","text":"This is not a section, but a self-contained line that can be inserted anywhere in the truck file. It changes the scale of all following set_beam_defaults lines to a certain factor: Springiness - Scale: 0-1 Damping constant - Scale: 0-1 Deformation threshold constant - Scale: 0-1 Breaking threshold constant - Scale: 0-1 The default is all 1 for all arguments. set_beam_defaults_scale 1, 1, 1, 1 Example that scales spring to 50%: set_beam_defaults_scale 0.5, 1, 1, 1 Take note: Unlike set_beam_defaults , you must always give all four arguments. Its not possible to leave some out. Any set_beam_defaults line that is scaled will output a line to RoR.log saying Due to using set_beam_defaults_scale, this set_beam_defaults was interpreted as ...","title":"Set_beam_defaults_scale"},{"location":"vehicle-creation/fileformat-truck/#set_node_defaults","text":"This is a directive which affects all nodes (including wheel and camera nodes) declared on lines below it. You can use this line many times to make different groups of nodes that have different characteristics (e.g. more grip for wheels, more surface drag for chassis nodes, etc.). The parameters are: loadweight : Real number ; Default: 0.0 ; The default loadweight mass applied to a node. Will be overridden by a per node definition (the option l ). Minimass calculation is unaffected. friction : Real number ; Default: 1.0 ; The amount to multiply the node's friction by. A setting of 2 will double the friction; a setting of 0 will create a frictionless node. volume : Real number ; Default: 1.0 ; The amount to multiply the node's buoyancy. A setting of 2 will double the buoyancy; a setting of 0 will create a non-buoyant node. This only applies when the node is in a fluid. surface : Real number ; Default: 1.0 ; The amount to multiply the node's surface by. A setting of 2 will double the surface; a setting of 0 will create a node with no surface. This only applies when the node is in a fluid. options : (optional) ; Options string ; Set any node-option property as default. You do not need to set the l property if a default loadweight is set. Important: Buoyancy volume and drag surface settings only have effect on fluids defined in ground_models.cfg (mud definitions), so right now they do not work with the standard RoR Water. To use default values without having to type the numbers, use \"-1\" in each field. For example: set_node_defaults -1, -1, -1, -1 Beware: Excessive friction, surface and volume will result in an unstable node/beam structure when driving in mud. If your wheels/truck explodes when driving from solid ground onto mud, lower the friction and/or volume setting. If a wheel cracks while in the mud, lower the volume and/or the surface setting. Syntax is set_node_defaults loadweight, traction, buoyancy, surface Mud tire example, unloaded, increased traction, higher buoyancy, higher drag surface and set to extra per node buoyancy: set_node_defaults -1, 1.1, 5, 1.25, b Chassis, loaded with 5 kg per node, reduced traction, no buoyancy, higher drag surface: set_node_defaults 5, 0.5, 0, 2 Tracks example, high traction, low buoyancy, low surface, loaded with 50 kg per node: set_node_defaults 50, 1.2, 0.3, 0.5 Steam boat paddlewheel, loaded with 75 kg per node, no traction, no buoyancy, high drag surface: set_node_defaults 75, 0, 0, 3 Contactless with default settings: set_node_defaults -1, -1, -1, -1, c The new L node option will help to understand and use set_node_defaults , p node option will boost fps even with tracked vehicles on slower computers. See: nodes","title":"Set_node_defaults"},{"location":"vehicle-creation/fileformat-truck/#enable_advanced_deformation","text":"This is not a section, but a self-contained line that can be inserted anywhere in the truck file. It changes the general beams deformation physics. Use this only once per truck file, it's a general activation and setting of advanced beam physics . Its recommended to place the enable_advanced_deformation before the first beams section in your truck-file. Truck file syntax: enable_advanced_deformation This will remove any limit and thresholds from the set_beam_defaults processing. Its recommended to use it for the development of properly deforming flexbody node\\beam structures.","title":"Enable_advanced_deformation"},{"location":"vehicle-creation/fileformat-truck/#rollon","text":"NOTE: This directive has no effect as of version 0.39.5+ Enables collision between wheels and the contactable textured surfaces of a truck. rollon","title":"Rollon"},{"location":"vehicle-creation/fileformat-truck/#contacters","text":"The contacters section lists the nodes that may contact with cab triangles. This concerns only contacts with other trucks or loads. You can easily omit this section at first. contacters 34 18 20 22 24 26 28 30 32","title":"Contacters"},{"location":"vehicle-creation/fileformat-truck/#triggers","text":"Triggers are special beams which trigger user-specified events when extended/contracted to a given bound. They have no physics attributes and can extend indefinitely. Parameters: Node 1 : Node number/name ; The node where the trigger beam starts. Node 2 : Node number/name ; The node where the trigger beam ends. contraction_trigger_limit : Real number ; The length when the shortkey command gets triggered extension_trigger_limit : Real number ; The length when the longkey command gets triggered shortbound_trigger_action : Positive or negative Decimal number ; On normal triggers without a special option this represents the command key to be triggered at shortbound (1 - 48 [ Version 0.4.0.7+ ] 1 - 84). For other trigger types, look below. longbound_trigger_action : Positive or negative Decimal number ; On normal triggers without a special option this represents the command key to be triggered at longbound (1 - 48 [ Version 0.4.0.7+ ] 1 - 84). For other trigger types, look below. options (optional) : String i : Makes the trigger beam invisible c : Set the boundary calculation to command-style, just for convenience x : Set the trigger to disabled on startup ( default = enabled ), will get useless after first activation by a triggerblocker b : Blocks other commandkeys, shortkey at shortbound, longkey at longbound. If longkey is set to -1 , shortkey will get blocked at short and at longbound. It does not block of manual user inputs, just triggers. B : Blocks other triggers when triggered, a number in shortkey represent the number of triggers to block at shortbound , a number in longkey the number of triggers to release at longbound. A : [ Version 0.38.23+ ] Same as the Blocker B , but inverted activation. Will block while between shotbound and longbound a number of triggers (shortkey) and release if not (longkey). s : Switches commandnumbers when triggered set in shortkey and longkey. Good to build wipers or similar, see examples h : [ Version 0.38.26+ ] You can use triggers to lock or unlock hookgroups ( only hookgroups <= -3 ); Unlocks hookgroups shortkey at shortbound and hookgroup longkey at longbound. H : [ Version 0.38.26+ ] You can use triggers to lock or unlock hookgroups ( only hookgroups <= -3 ); Locks hookgroups shortkey at shortbound and hookgroup longkey at longbound. t : [ Version 0.4.0.7+ ] Continuous trigger, delivers a value of 0 below and at shortbound, a value of 1 over and at longbound. Between these boundaries, this trigger will deliver a value between 0 and 1 (linear), depending on the current position. See \"engine trigger\" for details on how to use this. E : [ Version 0.4.0.7+ ] Engine trigger. This trigger gives you control over various vehicle driving functions. It is recommended to use this in combination with a t -trigger to get precise, continuous control. Works as follows: ''' (remapped) shortbound_trigger_action''': Positive decimal number Takes the number of the engine to be controlled, starting with 0 . As RoR only supports one engine per vehicle at the moment, always put 0 here. ''' (remapped) longbound_trigger_action''': Positive decimal number Takes the number of the function you want to control: 0 : Clutch 1 : Brake 2 : Accelerator 3 : RPM Control (not available at the moment) 4 : Shift Up (use no \"t\"-trigger here). Will shift up on short and longbound. 5 : Shift Down (use no \"t\"-trigger here). Will shift down on short and longbound. boundary_timer (optional) : Positive real number ; default = 1.0 ; Represents the time a boundarycheck is disabled for trigger switches ( option s ) to avoid lockup. triggers ;id1, id2, short, long, shortbound action, longbound action, options ; a trigger between node 11 and 109 triggering commandkey 13 ( ctrl-F1) while in shortbound -10% of original length ; and commandkey 14 (ctrl-F2) when in longbound +10% of original length 11, 109, 0.100, 0.100, 13, 14 ; a trigger between using command boundaries, does exactly the same then the one above 11, 109, 0.900, 1.100, 13, 14, c ; a trigger blocked at startup, needs to be released by a triggerblocker once to work as a normal trigger, ; good for simple robotic programming 11, 109, 0.900, 1.100, 13, 14, cx ; special case triggers: cmdkeyblocker, triggerblocker, triggerswitch ; a commandkeyblocker blocking commandkeys when active, 15 (ctrl-F3) at shortbound and 16 (ctrl-F4) at longbound. 11, 109, 0.900, 1.100, 15, 16, cb ; a commandkeyblocker blocking one commandkey when active, 15 (ctrl-F3) at shortbound and at longbound. 11, 109, 0.900, 1.100, 15, -1, cb ; a triggerblocker blocking the following triggers from checking, blocking 5 at shortbound and releasing 4 at longbound, ; Most times it will block and release the same amount of triggers, but its good for robotics programming to set separate amounts in some cases. 11, 109, 0.900, 1.100, 5, 4, cB ; a triggerswitch switching commandkeys when active, also for user inputs, will switch F1 to F2 and vice versa every time it hits short or longbound, ; release timer is set to 1 second by default, before it can be triggered again. 11, 109, 0.900, 1.100, 1, 2, cs ; a triggerswitch switching commandkeys when active, also for user inputs, will switch F1 to F2 and vice versa every time it hits short or longbound, ; release timer is set to 3 seconds. 11, 109, 0.900, 1.100, 1, 2, cs 3.0 ; an engine trigger, controlling the accelerator (option \"2\") of engine nr. 0. Will give zero throttle in initial position (shortbound), full throttle at longbound, and a linear crossover in between. 11, 109, 1.000, 1.500, 0, 2, ctE","title":"Triggers"},{"location":"vehicle-creation/fileformat-truck/#lockgroups","text":"This section defines lockgroups for nodes. It has to be AFTER the nodes section Lockgroup Default = -1 , all nodes can be locked by standard hooks with no special lockgroup set Important: Special lockgroup : 9999 skip the node from any locking attempts POSITIVE lockgroups are free to use, the negative range is reserved for RoR built in standard lock-setups. lockgroups ;lockgroup, nodeIDs ; node 5 added to lockgroup 1 1, 5 ;nodes 6, 7, 9 added to lockgroup 2 2, 7, 6, 9 Performance boost option (needs to be BEFORE the nodes section): lockgroup_default_nolock This will set all nodes to 9999 (deny locking) of the truck by default. Any lockgroups defined later in the truck will override this setting for the specified node. Allows you to define exactly where standard hooks can lock to your truck and boost performance a lot when autolock hooks are used. Its recommended to use this option as default.","title":"Lockgroups"},{"location":"vehicle-creation/fileformat-truck/#hooks","text":"This section defines special options for hooknodes setup in the nodes section. It has to be placed after the nodes section. id : A node number to identify the hooknode the options apply to. The node number needs to exist and it has to be a hooknode with option h options : no order needed, just place what you need, here is a list of possible options: hookrange: The range a hook scans for a valid node to lock to, Default: 0.4 speedcoef: The speed a hook pulls the node to lock into locking position. Default: 1.0 maxforce: The force limit where a locking attempt is canceled. Default: 100000000.0 hookgroup: The hookgroup a hook belongs to. Standard hook: -1 (Default), Reserved for autolock: -2 , any special hookgroup for triggered hooks -3 or less. Only signed integer are valid. Keyword variants: hookgroup / hgroup lockgroup: The lockgroup a hook belongs to. Lock everything: -1 (Default), all other numbers the hook will lock only to a node with the same lockgroup set. Only signed integer are valid. Keyword variants: lockgroup / lgroup Lockgroup 9999 is reserved for nodes that are skipped while locking attempts. Do NOT use lockgroup 9999 with a hook. timer: Delay timer for autolocking hooks before they attempt to relock. Default: 5.0 . Only positive settings are valid self-lock: This hook can lock to the truck its placed on too. Keyword variants: self-lock / selflock / self_lock auto-lock: This hook will lock automatically to valid nodes in range. Keyword variants: auto-lock / autolock / auto_lock: nodisable: When the force limit defined by maxforce is exceed the locking attempt will NOT disable the linkage beam, but the hook node will stop pulling the node to lock. Works similar to ties then. Variants: nodisable / no-disable / no_disable shortlimit : Minimum range in meters the hook will pull the node to lock to. Default = 0.0 . Keyword variants: shortlimit / short_limit norope : Linkage between hook and node to be locked will act like a beam and not like a rope. Variants: norope / no-rope / no_rope visible : Linkage between hook and node will be visible while locking process and locked. Variants: visible / vis hooks ; id, options ;standard hook, increased scanrange 144, hookrange: 2.15 ;as above, but will cancel locking attempt if pulling force exceeds 100k 145, hookrange: 2.15, maxforce: 100000 ;triggered hook, locks 50% faster, is autlocking with a delay-timer of 7.5 seconds, belongs to hookgroup 12 ( for tiggers with option ''h'' or ''H'' ) and will only lock to nodes with lockgroup 2 set 146, speedcoef: 1.5, auto-lock, timer: 7.5, hookgroup: -12, lockgroup: 2 Standard hooks toggle with L , autolock and triggered hooks detach with ALT+L manually. Hooks with hookgroups < -2 can only be locked automatically or by a trigger.","title":"Hooks"},{"location":"vehicle-creation/fileformat-truck/#slide-nodes","text":"These are nodes which can slide freely along a 'rail', which is a sequence of connected beams. It's a simple constraining mechanism that introduces new possibilities into RoR and simplifies many existing mechanical structures. There are 2 ways to define a rail: * To specify it in slidenodes section as a second parameter. To specify it in railgroup section and reference it in slidenodes using railgroup_id parameter. A slidenode without a rail is invalid, naturally. Parameters: slide_node : Node number/name ; A node to become slide-node. rail_nodes ( sequence ) (optional) : Comma-separated list of nodes ; default = none, expects railgroup_id: to be used ; Nodes forming a rail the node can slide along. Each two consecutive nodes from this list must have a beam defined between them; for example a list containing 7, 8, 9, 10 would require beams 7 - 8 , 8 - 9 , 9 - 10 to be defined. s (spring_rate) (optional) : Real number prefixed with 's' or 'S' ; default = 9000000 ; Force that holds the node to the rail (in N/m). Write as: s10.98 b (break_force) (optional) : Real number prefixed with 'b' or 'B' ; default = infinity (never) ; Force at which the node will separate from the rail (in N). Write as: b10.98 t (tolerance) (optional) : Real number prefixed with 't' or 'T' ; default = 0 ; Distance from the rail before rail forces are applied to the node. g (railgroup_id) (optional) : Positive decimal prefixed with 'g' or 'G' ; default = none , expects rail_nodes: to be used. ; railgroup defining a rail. Write as: g2 r (attachment_rate) (optional) : [ Version 0.4+ ] Real number prefixed with 'r' or 'R' ; default = disabled ; Attachment rate in seconds. Write as: r2.3 d (max_attachment_distance) (optional) : [ Version 0.4+ ] Real number prefixed with 'd' or 'D' ; default = 0.1 ; Maximum attachment Distance in meters. Write as: d0.23 q (quantity) (optional) : [ Version 0.4+ ] Real number prefixed with 'q' or 'Q' ; default = infinity ; Ignored by parser. Original meaning: number of beams the node can slide along. c (attachment_constraints) (optional) : [ Version 0.4+ ] Two character string: [c|C] + [a|f|s|n] ; default = none a : Attach all. f : Attach foreign. s : Attach self. n : Attach none. slidenodes ;id, node id list 1, 7, 8, 9, 10 slidenodes ;id, node id list, spring, break, tolerance 1, 7, 8, 9, 10, s9000, b10000, t0.1","title":"Slide Nodes"},{"location":"vehicle-creation/fileformat-truck/#slidenode_connect_instantly","text":"To be documented.","title":"slidenode_connect_instantly"},{"location":"vehicle-creation/fileformat-truck/#rail-groups","text":"Allows specifying a separate rail which can be linked to slidenode(s) later. Parameters: rail_group_id : Positive decimal number ; ID of this railgroup. rail_nodes ( sequence ) : Comma-separated list of [nodes/node-ranges] ; Nodes forming a rail the node can slide along. Each two consecutive nodes from this list must have a beam defined between them; for example a list containing 7, 8, 9, 10 would require beams 7 - 8 , 8 - 9 , 9 - 10 to be defined. Ranges are supported (for example: 1-10 ) railgroups ;railgroupID, node id list 1, 7, 8, 9, 10 slidenodes ;id, railgroupID 1, g1 To create a looped rail group, simply make the last node of the list the same as the first node of the list. Please note that all segments must have beams defined. railgroups ;railgroupID, node id list 1, 7, 8, 9, 7 slidenodes ;id, railgroupID 1, g1","title":"Rail Groups"},{"location":"vehicle-creation/fileformat-truck/#detacher_group","text":"This section defines group of the beams that are deleted if one beam in this group breaks. Very useful for detaching parts of the truck like bumpers, doors, wheels etc. falling of the truck when crashing. All kinds of beams can be set to a detacher_group except wheel generation section, these one will always be \"default\" to avoid deleting the axle of the wheel which results in a crash. Valid detacher group numbers: any positive or negative integer Valid end lines: detacher_group 0 , detacher_group end Group 0 its the default setting and means no group set and is used to end groups. Use positive group numbers for master beams and negative ones for minor beams. A master detacher-beam breaking will brake all beams with the sames group number and all minor beams with the same negative group number (abs(detacher_group)). A minor beam will not break any other beams at all, its just set to break with a group of beams if a master detacher-beam in its group breaks. beams detacher_group 1 0, 1 detacher_group 0 2, 4 3, 5 detacher_group 1 6, 8 7, 9 10, 12 detacher_group 2 11, 13 detacher_group 0 22, 14 detacher_group -1 16, 17 detacher_group 0 This will add beams 0,1 + 6,8 + 7,9 + 10,12 to group 1 , beam 16,17 to group 1(minor) and beam 11,13 to group 2 . Breaking beam 16,17 will not break any other beam. Breaking beam 6,8 i.e, will break and disable beams 0,1 + 7,9 + 10,12 + 16,17 too in the same simulation cycle.","title":"Detacher_group"},{"location":"vehicle-creation/fileformat-truck/#ropes","text":"Ropes are special beams that have no compression strength (they can shorten easily) but have standard extension strength, like a cable or a chain. They have also another peculiarity: the second node can \"grab\" the nearest reachable ropable node with the CTRL+L key. Standard use is to use a chassis node as the first node, and a \"free\" node as the second node (free as in not attached by any other beam). The best example of this are the chains of the Multibennes truck. Option: i for invisible [ Version 0.38.18+ ] ropes ;order is important: root->end 116,134 130,136, i 116,135 130,137","title":"Ropes"},{"location":"vehicle-creation/fileformat-truck/#fixes","text":"Fixes are nodes that are fixed in place. That means that once put in place in the terrain, they will never move, whatever happens. This is useful for making fixed scenery elements from beams, like bridges. Just add the node number that you want to fix. fixes 2 3 12","title":"Fixes"},{"location":"vehicle-creation/fileformat-truck/#minimass","text":"This sets the minimum node mass. Useful for very light vehicles with lots of nodes (i.e. small airplanes). Notes: Without this section, the minimum node weight is 50 kilograms. When using a very low minimass, i.e. below 10 , you should use a low damping value in the Beam defaults in your beams section Nodes with a load weight ( l ) value below the value set in minimass will default to the minimass value. Minimass can be overridden by set_default_minimass . minimass 10.0","title":"Minimass"},{"location":"vehicle-creation/fileformat-truck/#set_default_minimass","text":"[ Version 2020.01+ ] This section allows nodes to override the minimum node weight, either the value set in minimass or the default 50kg if not using minimass. This is very useful if you already have a light vehicle tuned for a certain minimass value and you need to add a lighter node than what is set in your minimass value. It is placed in the nodes section, the new minimum weight will be applied to all following nodes. Example: nodes ;standard 50kg nodes 0, 0.54, 0, -0.567, n 1, 0.54, 0.18, -0.567, n 2, 0.54, 0, -0.4536, n ;set nodes 3-5 minimum weight to 2kg set_default_minimass 2 3, 0.54, 0.18, -0.4536, n 4, 2.1, 0.2, -0.567, n 5, 2.1, 0.2, -0.4536, n ;reset to default set_default_minimass 50 Note: When adding light nodes to a vehicle which features heavy nodes, you may have to lower the beam defaults spring/damping values to accommodate for the lighter weight!","title":"Set_default_minimass"},{"location":"vehicle-creation/fileformat-truck/#ties","text":"Ties are special beams that have no compression strength (they can shorten easily) but have standard extension strength, like a cable or a chain. Like ropes, ties grab the nearest reachable ropable node with the O key. But there is a twist: unlike ropes, they disappear when not attached (because they have no extremity node at rest) and they automatically shorten until the extension forces reaches a threshold. They are very useful to solidly strap a load to a chassis. Parameters: Root node : Node number/name ; The root node (the starting point of the beam) Max. reach length : Real number ; The maximum reach length Auto shorten rate : Real number ; The rate of auto-shortening Min. length : Real number ; The shortest length possible (proportional to original length; 1.0 means no shortening) Max. length : Real number ; The greatest length possible (proportional to original length; 1.0 means no extension; recommended you keep it as 1.0 ). Options (optional) : String ; default = n n : Visible (default) i : Invisible s : [ Version 2020.01+ ] Prevents self locking. Max. stress (optional) : Real number ; default = 12000 ; The force (in Newtons) when the ties stop to shorten. Group (optional) : Positive decimal number ; default = none ties ;root, max len, rate, short, long (, flag, max_stress, group) 58, 1.5, 0.5, 0.3, 1.0 62, 1.5, 0.5, 0.3, 1.0 59, 1.5, 0.5, 0.3, 1.0 63, 1.5, 0.5, 0.3, 1.0, n, 5000, 2","title":"Ties"},{"location":"vehicle-creation/fileformat-truck/#ropables","text":"This section lists the nodes that can be caught by ropes or ties. Good use is to define some ropable nodes at the front and back of the truck to allow towing the truck. ropables ;node-id, group, multilock 0, 0, 0 1, -1 The group and multilock arguments are only available in RoR 0.36.3 and later. Group: Default: -1 = all groups. Multilock: 0 =disable, 1 =enable: This specifies if this ropable can be locked by many ties/ropes.","title":"Ropables"},{"location":"vehicle-creation/fileformat-truck/#particles","text":"This enables/disables a particle cannon in the game (with the G key). particles ;source, back reference, particle_system_name 19, 5, tracks/particles/water1 19, 5, tracks/particles/waterGreen 16, 3, tracks/particles/water1 16, 3, tracks/particles/waterRed (You can create your own particle. A template can be found in Rigs of Rods\\resources\\particles.zip\\water.particle )","title":"Particles"},{"location":"vehicle-creation/fileformat-truck/#torque-curve","text":"Torque curves affect the behavior of the engine. This section allows you to assign predefined or user-defined torque curve to a truck. It can be used in 2 ways:","title":"Torque Curve"},{"location":"vehicle-creation/fileformat-truck/#usage-1-predefined-curve","text":"curve_name : Torque curve name ; default = default ; Predefined options are: default , diesel , turbodiesel , gas , turbogas , wheelloader , compacttractor , tractor , hydrostatic . torquecurve turbogas","title":"Usage #1: Predefined curve"},{"location":"vehicle-creation/fileformat-truck/#usage-2-defining-custom-curve","text":"power : Real number ; RPM where the power begins torque_percentage : Real number ; Power as a percent of total torque specified in section \"engine\" parameter #3 \"Torque\" (0 = 0%, 0.5 = 50%, 1.5 = 150%) It's suitable to define the torque to the engine RPM set in the engine definition plus 25% ( multiply the value with 1.25) to get the overrev area defined. The following example would be good for a maximum engine RPM set to 2800: torquecurve 0, 0.00 1000, 0.79 1500, 0.90 2000, 0.97 2500, 0.99 3000, 0.90 3500, 0.77 Engine dying in idle and first gear? Just define a single higher peak value where you want the engine to idle... like adding: ... 700, 0.2 800, 0.6 900, 0.4 ... to the example above in the right spot will result the engine idle a little bit higher then 800 rpm in first gear. The example to the left shows a screenshot of a torquecurve made for a small diesel engine: Idle: ~600 RPM, Max @ 1900 RPM, slight and constant torque increase over the used RPM bandwidth, hard torque drop off in the over-rev area.","title":"Usage #2: Defining custom curve"},{"location":"vehicle-creation/fileformat-truck/#cruise-control","text":"This section offers options to the cruise control feature (activated by pressing space bar): lower limit : Sets the minimum speed cruise control can be activated. Unit is meters per second (divide kph by 3.6 . Example: 36 kph/ 3.6 = 10 mps) auto brake : If activated, the vehicle brakes if velocity is faster than set in cruise control. 0 =auto brake off, 1 =auto brake on ;cruisecontrol lowlimit autobrake cruisecontrol 10 1 In the example above, minimum speed for cruise control to be activated is 10 mps ( 36 kph). The auto brake feature is activated.","title":"Cruise Control"},{"location":"vehicle-creation/fileformat-truck/#speedlimiter","text":"Limits the speed of a vehicle. If the speed is above the limit, the vehicle will not accelerate any further. Insert the limit in meters per second (divide kph by 3.6 . Example: 36 kph/ 3.6 = 10 mps) ;speedlimiter <speed in m/s> speedlimiter 10 In the example above, the maximum speed of the vehicle is 10 mps ( 36 kph), it will not accelerate any further.","title":"Speedlimiter"},{"location":"vehicle-creation/fileformat-truck/#axles","text":"This section defines axles on a vehicle, allowing more accurate distribution of torque among the wheels. The axle section introduces open differentials, and spooled (aka locked) differentials. They are toggled with the W key. By adding axles to your vehicle file you override the propulsed property for the tires. Only wheels connected to an axle are powered, if multiple axles are defined the axles are interconnected in a locked manner. If no axle section is defined the old model of equal power distribution is used. Because the axle sections looks up already defined wheels, it must be defined AFTER the wheels have been defined. The axle section is different from other sections in that it is broken into properties. Properties are not order dependent. Currently the available properties are: w1(<node1> <node2>) - This defines which wheel the axle is attached to, <node1> and <node2> Refer to the node1 and node2 as defined in the wheel section w2(<node1> <node2>) - Wheel 2, same as w1, this is the second wheel attached to the axle. w1 and w2 are interchangeable. d(type) - Defines the available differential types for this axle. the list of axles is cycled through in the order specified, differential types maybe specified more than once. Each differential type is specified by a single letter, the letters are not to be separated by spaces or any other character. If no differentials are specified the axles will default to opened and locked. Available differential types o - Open l - Locked (wheels locked together regardless of torque input) s - Split evenly (each wheel gets equal torque regardless of wheel speed) v - Viscous [ Version 2020.01+ ] (applies locking force based on the amount of torque) Sample axle section: axles ; axle 1 w1(1 2), w2(3 4), d(ol) ; axle 2 w1(5 6), w2(7 8), d(l)","title":"Axles"},{"location":"vehicle-creation/fileformat-truck/#interaxles","text":"In [ Version 2020.01+ ] and above you can define inter axle differentials on a vehicle, allowing more accurate distribution of torque among the axles. They are toggled with CTRL+W . Parameters: axle_1 : The number of the first axle, with the first defined axle starting at 1 . axle_2 : The number of the second axle, with the first defined axle starting at 1 . d(type) : Similar to the axles section Sample interaxles section: interaxles ; axle_1, axle_2, d(type) 2, 3, d(vlso)","title":"Interaxles"},{"location":"vehicle-creation/fileformat-truck/#transfercase","text":"In [ Version 2020.01+ ] and above you can add a transfer case on a vehicle. Parameters: axle_1 : The number of the first axle, the one which is always driven. axle_2 : The number of the second axle, the one which is only driven in 4WD mode. 2wd_mode : Allows/disallows 2WD mode. 2wd_lo_mode : Allows/disallows 2WD Lo mode. gear_ratio(s) : Alternate gear ratios in Lo mode. If none are specified, Lo mode will be disabled. Notes: Requires an axles section defined first! SHIFT+W switches between 2WD/4WD mode. If alternate gear ratios are specified, ALT+W switches between Hi/Lo mode. Sample transfercase section: ;Basic transfer case, no alternate ratio(s) transfercase ;default driven axle, alternate axle, has 2wd mode, has 2wd lo mode 1, 2, 1, 0 ;Transfer case with alternate ratio(s) transfercase ;default driven axle, alternate axle, has 2wd mode, has 2wd lo mode, alternate ratio(s) 2, 1, 1, 0, 4.11, 3.1, 2.72","title":"Transfercase"},{"location":"vehicle-creation/fileformat-truck/#wheeldetachers","text":"[ Version 0.4.7.0+ ] this section allows you to disable power to a wheel when a detacher_group breaks. wheeldetachers ;wheel_id, detacher_group 0, 1 1, 2 Parameters: wheel_id : Real number ; The wheel number, with the first defined wheel starting at 0 . detacher_group : Real number ; The d etacher_group number. Example usage: beams ;front right wheel set_beam_defaults 12500000, 28600, 1860000, 6968000 detacher_group 1 1, 2, i 3, 4, i 5, 6, i 7, 8, i detacher_group 0 ;front left wheel detacher_group 2 9, 10, i 11, 12, i 13, 14, i 15, 16, i detacher_group 0 meshwheels ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, side, meshname material 0.35, 0.21, 0.5, 14, 1, 2, 9999, 1, 1, 18, 200.0, 300000.0, 2000.0, l, dodgechargerwheel.mesh dodgechargerband 0.35, 0.21, 0.5, 14, 3, 4, 9999, 1, 1, 26, 200.0, 300000.0, 2000.0, r, dodgechargerwheel.mesh dodgechargerband wheeldetachers ;wheel_id, detacher_group 0, 1 1, 2","title":"Wheeldetachers"},{"location":"vehicle-creation/fileformat-truck/#collisionboxes","text":"In RoR 0.4.0.5 and above you can define collisionboxes. In earlier versions of RoR, there was only one bounding box for truck activation per object, which was defined by the outermost nodes. With collisionboxes, you get the ability to define the nodes that should be used for the activation bounding box calculation. It is also possible to define multiple bounding boxes, for example to exclude some areas from activation. Syntax: collisionboxes ;node id list box 1 48, 58, 59, 67 ;node id list box 2 5, 6 ... ;node id list box n ... Collisionboxes can give you a huge performance increase in situations where many beam objects would have been activated before, for example a container crane with many containers underneath.","title":"Collisionboxes"},{"location":"vehicle-creation/fileformat-truck/#rescuer","text":"rescuer This single keyword placed in the truck file will make the truck a rescuer, like the Scania Wrecker. These vehicles can be entered by pressing R .","title":"Rescuer"},{"location":"vehicle-creation/fileformat-truck/#look-feel","text":"","title":"Look &amp; Feel"},{"location":"vehicle-creation/fileformat-truck/#managedmaterials","text":"Managed materials helps you to use complex material effects (for example reflective materials like chromes, dynamic damage materials) without having to deal with the technical complexity of writing a shader for Ogre3D. Rigs of Rods comes with a set of standard shader effects, and with the Managedmaterial section you can pick the effect you want and adapt it for your vehicle. The shader library will grow with time, so the set of effects available in this section will grow with time. The generic format of this section is: Material name - The name of the material you are creating. You can use this material for any of your meshes (flexmeshes, props, etc.). This material name must not be defined anywhere else (for example in a .material file). Effect name - The name of the effect you want to use. Valid names are defined below. Effect parameters - A variable number of parameters, depending on the effect your are using. See below for the description. Do not use a comma to separate parameters in a managedmaterial section! Also, you must declare your managed material before they are used. That means that the managedmaterial section should come before the flexmesh, props, wheels, or any section that will use this material. Currently available effects: flexmesh_standard - This effect defines an opaque, reflective and damageable material for flexmeshes. This will work only for flexmeshes! It takes 3 parameters: A standard texture name: this is the base, undamaged texture. (The diffuse map.) A damaged texture name (or - if no damage texture): Should be similar to the standard texture, but with damage. A specular map texture name (or - if no specular map texture): a greyscale image that maps the \"shininess\" of the material, from dark for matte to white for chromed. Technically this isn't a specular map but a reflectivity map. flexmesh_transparent - This effect defines a semi-transparent, reflective and damageable material for flexmeshes. This will work only for flexmeshes! It takes 3 parameters: A standard texture name: this is the base, undamaged texture. The alpha channel of this texture is used to define transparency. (The diffuse map.) A damaged texture name (or - if no damage texture): Should be similar to the standard texture, but with damage. A specular map texture name (or - if no specular map texture): A greyscale image that maps the \"shininess\" of the material, from dark for matte to white for chromed. Again, technically this isn't a specular map but instead a reflectivity map. mesh_standard - This effect defines an opaque, reflective material for any mesh (e.g. wheel rims, props, etc.) It takes 2 parameters: a standard texture name: This is the base texture. a specular map texture name (or - if no specular map texture): A greyscale image that maps the \"shininess\" of the material, from dark for matte to white for chromed. mesh_transparent - This effect defines a semi-transparent, reflective material for any mesh (e.g. windows) It takes 2 parameters: a standard texture name: This is the base, undamaged texture. The alpha channel of this texture is used to define transparency. a specular map texture name (or - if no specular map texture): A greyscale image that maps the \"shininess\" of the material, from dark for matte to white for chromed. WARNING: Your texture file names must not start with - . The parser would treat the - as \"no texture placeholder\" and ignore the rest. Examples: managedmaterials ;new_material effect parameters... mainbody flexmesh_standard mytruckbody.png mytruckbody-dmg.png mytruckbody-spec.png windows flexmesh_transparent mytruckbody.png mytruckbody-dmg.png mytruckbody-spec.png wheels mesh_standard mytruckwheels.png mytruckwheels-spec.png A note about shaders for power-users: You can still use your own, non managed, Cg shaders by manually defining your .material , .program and .cg . Consult the Ogre3D documentation for more details. If you think you have made a good shader that can be helpful to other modders, submit it to GitHub for inclusion to the managedmaterial library of RoR.","title":"Managedmaterials"},{"location":"vehicle-creation/fileformat-truck/#set_managedmaterials_options","text":"This specifies options for all FOLLOWING managed material lines. Parameters: doublesided : 0 (single sided) or 1 (double sided) ; default = 0 (single sided) ; . Determines if the mesh should be visible from both sides or not. IMPORTANT: This parameter treats 1 as \"yes\" and anything else as \"no\". This is required for backwards compatibility. ; set_managedmaterials_options doublesided set_managedmaterials_options 1","title":"Set_managedmaterials_options"},{"location":"vehicle-creation/fileformat-truck/#flares","text":"Flares allow you to add lights to your truck. They work as light sources in OGRE and will illuminate other objects (if enabled in settings). See also: Flares Tutorial Required parameters: Reference node : Node ID ; Node which defines origin of flare-placement coordinate system X axis node : Node ID ; Node which defines X-axis of flare-placement coordinate system Y axis node : Node ID ; Node which defines Y-axis of flare-placement coordinate system Flare X offset : Real number ; Flare position on X axis in % of distance from ref-node to X-node Flare Y offset : Real number ; Flare position on Y axis in % of distance from ref-node to Y-node Optional parameters: Type : Character ; default = f (headlight) ; Type of flare. f (default mode when not stated): Headlight. b : Brakelight. l : Left blinker. r : Right blinker. R : Reverse light (on when driving in R gear) u : User controlled light. (i.e. fog light) (see control numbers) Control number : Integer ; default = -1 For u flares, enter value 1-10: 1 would be CTRL+1 , 2 would be CTRL+2 , and so on. For other flare types, enter -1. Special value: 12 - Parking brake indicator (not working in version 2021.04) Blink delay (ms) : Integer ; default = -2 ; Delay between on/off change, in milliseconds. A value of 500 means that the light is 500ms on and 500ms off. Use a value of 0 to create a non-blinking light. Special value: -1 to use the default value of 500ms. Special value: -2 non-blinking light except blinkers, which will have default 500ms. Flare size : Real number ; default = -1 ; This determines how big the flare will be. Reasonable values are between 0.1 and 5 ( 0.1 = 10% of default size). If the size is smaller then 0 , then the flare will be independent of the camera angle. (So the flare does not get smaller when you move the camera) Material Name : String ; default = 'default' ; This field determines what material should be used for the flare display. If you want to use the standard material, use default . Please note that there is not comma between the material name and the size argument. You can use tracks/aimflare to position your flare. Examples: flares ;RefNode, X, Y, OffsetX, OffsetY, Type, ControlNumber, BlinkDelay, size MaterialName ;example for a most default one: 51, 1, 79, 0.23, 0.50, b, -1, 0, -1 default ;example for a custom brake light 51, 1, 79, 0.23, 0.50, b, -1, 300, 0.2 myTruck/MyBrakeFlare ;example for a user controlled Fog Light (toggled by CTRL+1) 51, 1, 79, 0.23, 0.50, u, 1, 0, 0.3 myTruck/MyFogFlare","title":"Flares"},{"location":"vehicle-creation/fileformat-truck/#flares2","text":"Flares2 are the same as normal flares, except that they add an offset-z argument in between: flares2 ;RefNode, X, Y, OffsetX, OffsetY, OffsetZ, Type, ControlNumber, BlinkDelay, size MaterialName 51, 1, 79, 0.23, 0.50, 0.50, b, -1, 300, 0.2 myTruck/MyBrakeFlare","title":"Flares2"},{"location":"vehicle-creation/fileformat-truck/#materialflarebindings","text":"See also: Flares Tutorial This can bind a material to a flare, so that the material changes with the flare's on/off status. The format is as follows: flare number : Counting starts from zero. Just count down your flares in the flares section to find the correct number. material name : The material that you want to change. It must contain one technique, one pass and a special Texture Unit State (see below for an example) flares 51,1,79, 0.23, 0.50, b, -1, 300, 0.2 myTruck/MyBrakeFlare materialflarebindings 1, myBrakeMaterial The material must use an animated texture, as shown below: material myBrakeMaterial { technique { pass { texture_unit { anim_texture truck_brake_material.png 2 0 } } } } Put the off-state of the brakelight into the file truck_brake_material_0.png and the on-state into truck_brake_material_1.png . The 2 and 0 at the end should not be changed. This section should be after the flares section and before the props and flexbodies section in order for the lights to work properly. COMPATIBILITY NOTE: Parameters #1 and #2 can also be separated by just space, the parser will silently accept it.","title":"Materialflarebindings"},{"location":"vehicle-creation/fileformat-truck/#props","text":"This allows you to \"stick\" any 3D mesh to a triangle of points of a truck. You can use it to stick air intakes, horns, seats, dashboard, bumpers, whatever to the truck. Note that there will be no collision detection with these objects. Like flares, they use a vector coordinate system instead of normal right-angle coordinates. Props are positioned relative to 3 nodes of the chassis: One node is the reference node, and the two others define a base (x,y). Props are positioned relative to the reference node by adding proportions of the vectors ref->X, ref->Y, with the normal being used as well. Parameters are: reference_node : Node number/name ; The base node, used to define the coordinate system x_direction_node : Node number/name ; The node that defines the X direction (this can be visualized as a line pointing from the reference node to this node) y_direction_node : Node number/name ; The node that defines the Y direction (this can be visualized as a line pointing from the reference node to this node) x_offset : Real number ; The amount the prop should be moved in the X direction from the reference node . The distance it is moved depends on the distance between the Reference node and the '''X direction node '''(it's proportional): (0) leaves the prop on the reference node, (1) moves it all the way to the X direction node , and (0.5) puts the prop half-way between the two y_offset : Real number ; The amount the prop should be moved in the Y direction from the reference node . Like the X direction offset , the amount it is proportional to the distance between the reference node and the Y direction node . z_offset : Real number ; Imagine a surface which the X and Y directions pass straight through. If looking along that surface is the forwards direction, then this field moves the prop straight up. Unlike the X direction offset and the Y direction offset , the amount for the straight up offset is measured in meters x_axis_rotation : Real number ; The amount the prop should be rotated about the X axis y_axis_rotation : Real number ; The amount the prop should be rotated about the Y axis z_axis_rotation : Real number ; The amount the prop should be rotated about the 'straight up' axis mesh_name_or_special_prop : String (may start with a keyword) ; The name of the Ogre3D mesh object used for the prop. If the mesh name starts with one of the following keywords, it will have special behavior: \"dashboard\" : A custom dashboard + steering wheel mesh. See below. \"dashboard-rh\" : A custom dashboard +steering wheel mesh on right side. See below. \"leftmirror\" : Left rear view mirror. \"rightmirror\" : Right rear view mirror. \"seat\" : Driver's seat: Positions the driver character and turns translucent if appropriate. Skins the prop using material driversseat . Note: if multiple \"seat[2]\" props are defined, the first one is the driver's seat. \"seat2\" : Driver's seat: Same as \"seat\" except it doesn't force the driversseat material. Note: if multiple \"seat[2]\" props are defined, the first one is the driver's seat. \"beacon\" : A beacon. Color and flare material are adjustable (default = orange) \"redbeacon\" : A red beacon which flashes red. Fixed color and flare material. \"lightbar\" : Police lightbar beacon, flashes red and blue (fixed). Also marks the vehicle as \"police car\" and sets up some special sounds and controls. \"spinprop\" : Plane propeller. Please note that if you want to stick wheel meshes on a wheel, the third node has to be taken from one of the outer segments. props ;ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh 93, 95, 92, 0.50, 0.37, 0.0, 90, 0, 0, airintake.mesh Note: The X offset and the Y offset should logically between 0 and 1 , or if the body flexes too much the prop will not stick to the body correctly. The coordinate system is actually really similar to 'normal coordinates', but it allows the angle between the two axes (ie. the angle between the X node , the Reference node , and the Y node ) to be any value, not just 90 degrees. If that angle can be made to be 90 degrees, then the weird coordinate system will turn into 'normal coordinates'. This can be used to make prop placement easier. For 0.38.8 and later: You can set the cameramode in which the prop should be shown: ; -2 = all the time, -1 = external only, >=0 cinecam number prop_camera_mode -1 You can disable shadows of the last specified flexbody: disable_flexbody_shadows [ Version 0.35+ ] Disables shadow casting of the last prop to improve complex truck FPS. disable_prop_shadow COMPATIBILITY NOTE: Parameters #9 \"Z rotation\" and #10 \"Mesh name\" can be delimited by just space. Parser will emit a warning.","title":"Props"},{"location":"vehicle-creation/fileformat-truck/#special-prop-dashboard","text":"Steering wheel [ Version 0.35+ ] Here you can see the standard reference nodes, and offset for the dashboard. Then, there is the steering wheel mesh, and its offsets. Parameters: reference_node : Node number/name ; Like ordinary prop x_direction_node : Node number/name ; Like ordinary prop y_direction_node : Node number/name ; Like ordinary prop x_offset : Real number ; Like ordinary prop y_offset : Real number ; Like ordinary prop z_offset : Real number ; Like ordinary prop x_axis_rotation : Real number ; Like ordinary prop y_axis_rotation : Real number ; Like ordinary prop z_axis_rotation : Real number ; Like ordinary prop mesh_1 : String with keyword \"dashboard\" ; Mesh1: See rules below; MUST contain keyword dashboard mesh_2 : String ; Mesh2: See rules below dashboard_x_offset (optional) : Real number ; default = -0.67 dashboard_y_offset (optional) : Real number ; default = -0.61 dashboard_z_offset (optional) : Real number ; default = 0.24 max_turn_angle_degrees (optional) : Real number ; default = 160 Examples: ; NOTE: Lines starting with ; are comments ; No optional parameters: The default wheel. ; Param mesh#1 must contain \"dashboard\" keyword and point to a valid mesh. ; Param mesh#2 is ignored, can contain a placeholder string. ; ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh#1 mesh#2 xoffset, yoffset, zoffset, rotationangle 72, 71, 74, 0.50, 1.0, -0.05, 0, 0, 0, my-dashboard.mesh ; ------------------------------------------------------- ; BAD EXAMPLE: Params \"Mesh#2, X, Y, Z\" only take effect if they are all present. The following line has the same effect like line above (Z offset is missing)! ; Param mesh#1 must contain \"dashboard\" keyword and point to a valid mesh. ; Param mesh#2 is ignored ; Params X, Y, Z are ignored because Z is missing. ; ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh#1 mesh#2 xoffset, yoffset, zoffset, rotationangle 72, 71, 74, 0.50, 1.0, -0.05, 0, 0, 0, my-dashboard.mesh ~~~ -0.67, -0.61, ; ------------------------------------------------------- ; Params \"X, Y, Z\" are present: an example for a custom one with 720 degree: ; Param mesh#1 must contain \"dashboard\" keyword and point to a valid mesh. ; Param mesh#2 must contain a mesh name. ; ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh#1 mesh#2 xoffset, yoffset, zoffset, rotationangle 72, 71, 74, 0.50, 1.0, -0.05, 0, 0, 0, my-dashboard.mesh my-wheel.mesh -0.67, -0.51, 0.14, 720","title":"Special Prop: Dashboard"},{"location":"vehicle-creation/fileformat-truck/#special-prop-beacon","text":"Change the beacon's color and flare material [ Version 0.35+ ] If you want to use you own mesh as beacon it should be named beacon-<somename>.mesh, e.g. beacon-blue.mesh The only difference between this and a standard beacon is the flarematerialname e.g. tracks/redbeaconflare which sets the color of the light, and the RGB value of the flash (The last three numbers), that sets the color of the light that is reflected from objects when the beacon lights them. NOTE: All special parameters are required, otherwise none of them will take effect. Parameters: reference_node : Node number/name ; Like ordinary prop x_direction_node : Node number/name ; Like ordinary prop y_direction_node : Node number/name ; Like ordinary prop x_offset : Real number ; Like ordinary prop y_offset : Real number ; Like ordinary prop z_offset : Real number ; Like ordinary prop x_axis_rotation : Real number ; Like ordinary prop y_axis_rotation : Real number ; Like ordinary prop z_axis_rotation : Real number ; Like ordinary prop beacon_mesh_name : String with keyword \"beacon\" ; The beacon mesh; MUST contain keyword beacon flare_material_name : String ; Material to use for the flare flare_color_red : Real number ( 0 - 1 ) ; Intensity ( 0 = full dark, 1 = full bright) . This color will be mixed with color of the flare texture. If the texture is white, all coloring is specified this way. flare_color_green : Real number ( 0 - 1 ) ; Intensity ( 0 = full dark, 1 = full bright). This color will be mixed with color of the flare texture. If the texture is white, all coloring is specified this way. flare_color_blue : Real number ( 0 - 1 ) ; Intensity ( 0 = full dark, 1 = full bright). This color will be mixed with color of the flare texture. If the texture is white, all coloring is specified this way. Examples: ; NOTE: Lines starting with ; are comments ;ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh flareMaterialName colorRed, colorGreen, colorBlue ; the default beacon would be: 19, 73, 16, 0.1, 0.1, 0, 90, 0, 0, beacon.mesh tracks/beaconflare 1, 0.5, 0 ; the red beacon would be: 19, 73, 16, 0.1, 0.1, 0, 90, 0, 0, beacon.mesh tracks/redbeaconflare 1, 0, 0 ; example for a custom beacon: 19, 73, 16, 0.1, 0.1, 0, 90, 0, 0, beacon.mesh tracks/greenflare 0, 1, 0","title":"Special Prop: Beacon"},{"location":"vehicle-creation/fileformat-truck/#add_animation","text":"This directive adds an animation to last defined prop. Up to 10 rotations and offsets depending on different sources can be used on one prop. Parameters: Ratio : Real number ; A coefficient for the animation, prop degree if used with mode: rotation and propoffset if used with*' mode: offset*'. Lower limit : Real number ; Empty value = 0 ; The lower limit for the animation, remember to use a negative value when source can be negative (as in wheel steering.) Use 0 for both options to get default limits (Full circle rotation ( -180/+180\u00b0) or -10/+10 for offsets. Limits always apply to the props' spawning position. Upper limit : Real number ; Empty value = 0 ; Upper Limiter for movement, remember to use a positive value when source can be negative (as in wheel steering.). Use 0 for both options to get default limits ( Full circle rotation (-180/+180\u00b0) or -10/+10 for offsets. Limits always apply to the props' spawning position. (Attributes) : { Key: options } pairs ; Parameter consisting of name, colon, and | - delimited list of options. source: Source type(s) joined with | ; A list of sources to use, it is recommended to use only 1 per add_animation line, though multiple sources are possible too. mode: Mode type(s) joined with | ; A list of modes to use, multiple modes are valid event: Key event string ; An optional input, only needed for source: event . It determines the keypress event to catch for the animation autoanimate (optional) : \"autoanimate\" keyword ; rotation or offset is applied as long as source is not 0. Useful for driveshafts, fans, etc. \"noflip\" (optional) : \"noflip\" keyword ; a prop will flip to the opposite limit when a limit is reached, with this mode it just stops at - \"bounce\" (optional) : \"bounce\" keyword ; a prop will flip to the opposite limit when a limit is reached, with this mode it just rebound at the set limit. Only useful with mode: noflip \"eventlock\" (optional) : \"eventlock\" keyword ; will lock a toggled event in its current status, useful for switches and status levers. Only works with mode:event and a correct defined event: source: airspeed - This prop animates with the actual speed (not speedometer indicated speed) for any vehicle. vvi - This prop animates with the vehicle's vertical velocity. altimeter100k - This prop animates with the vehicle's altitude up to 100,000 feet. altimeter10k - This prop animates with the vehicle's altitude up to 10,000 feet, at which point it will revert back to its original length. altimeter1k - This prop animates with the vehicle's altitude up to 1,000 feet, at which point it will revert back to its original length. These three animators can be used to create altimeters with three needles or similar objects/ aoa - This prop animates with the dashboard's angle of attack. flap - This prop animates with the flap setting on the vehicle. airbrake - This prop animates with the airbrake setting on the vehicle. roll - This prop animates with the vehicle's roll. It will flip at 180 degrees roll to -180 degrees roll. This option can be used for an automatic trim feature. pitch - This prop animates with the vehicle's pitch. It will flip back at 180 degrees pitch to -180 degrees pitch. This option can be used for an automatic trim feature. throttle1 - This prop animates with the throttle setting of an aircraft's first engine. This option can be used for thruster mechanics. Valid sources include throttle1 , throttle2 , etc. etc. up to throttle8 . rpm1 - This prop animates with the RPM of an aircraft's first engine. This option can be used for thruster mechanics. Valid sources include rpm1 , rpm2 , etc. etc. up to rpm8 . aerotorq1 - This prop animates with the torque of an aircraft's first engine. Note that this only works for propeller engines, because torque is not applicable to jets. Valid sources include aerotorq1 , aerotorq2 , etc. etc. up to aerotorq8 . aeropit1 - This prop animates with the pitch of an aircraft's first engine. Note that this only makes sense with propeller engines, pitch is not applicable to jets. Valid sources include aeropit1 , aeropit2 , etc. etc. up to aerotorq8 . aerostatus1 - This prop animates with the On/Off/Fire status of an aircraft's first engine. Valid sources include aerostatus1 , aerostatus2 , etc. etc. up to aerostatus8 . brakes - This prop animates with the vehicle's brake status. accel - This prop animates with the vehicle's accelerator status. clutch - This prop animates with the vehicle's clutch status. speedo - This prop animates with the speedometer indication. It scales with the guisetting speedometer. (It is best to use it even if there is no custom overlay dashboard; it simplifies the adjustment a lot.) tacho - This prop animates with the vehicle's RPM. It scales with guisetting tachometer. (It is best use it even if there is no custom overlay dashboard; simplifies the adjustment a lot.) turbo - This prop animates with the vehicle's turbocharger PSI. parking - This prop animates with the vehicle's parking brake status. shifterman1 - H-shift left/right ( Reverse | 1-2 | 3-4 | 5-6...11-12 as positions, scales with engine settings (maxGear) shifterman2 - H-shift forth/back animator Reverse-2-6-8-10-12 | 1-3-5-7-9-11 as positions sequential - sequential shift ( i.e for tiptronic or wheel shift pedals), can be used for commands too (no settable limits then) shifterlin - for auto transmission animations or gearselect indicators (special limits rules apply for this one, see below!) torque - current engine torque heading - This prop animates with the current heading of the truck. difflock - This prop animates with the difflock status of the truck (It only works when differentials are present in the truck.) rudderboat - This prop animates with the steering hydro on boats. throttleboat - This prop animates with the throttle status on boats. steeringwheel - This prop animates with the steering status for trucks. aileron - This prop animates with the aileron status for airplanes. elevator - This prop animates with the elevator status for airplanes. rudderair - This prop animates with the rudder status for airplanes. permanent - This is a permanent source, which is always active when you are in the truck. event - A source triggered by a keypress, needs exactly one defined event. Specials: Limits do not apply for mode:sequential . In this case the options are the F-Keynumbers of the command-movement you want to catch. Option 0, 0 with mode:sequential provides a shift_up/shift_down animation for a sequential shifter. Look into the Examples. mode: x-rotation - Rotate around the x-axis, in some cases special rules apply here see below (gimbal lock) y-rotation - Rotate around the y-axis, in some cases special rules apply here see below (gimbal lock) y-rotation - Rotate around the y-axis, in some cases special rules apply here see below (gimbal lock) x-offset - Offset along the x-axis y-offset - Offset along the y-axis z-offset - Offset along the z-axis event: rorkeypressevent - All RoR keypress events. ( A list of valid RoR events .) How to use: It's best to test is a prop that has no rotations or offsets set on a node triangle like this: n1, 0, 1, 0 n2, 0, 1, 1 n3, 0, 0, 0 Add the add_animation line AFTER the prop in your prop section that you want to animate: Sources add_animation 200, 0, 0, source: steeringwheel, mode: x-rotation ;Prop now animated by steeringwheel input. ;Refer to the '''source:''' list above for the different sources avail. add_animation 10, 1, 2, source: sequential, mode: y-rotation add_animation 10, 3, 4, source: sequential, mode: x-rotation ;a joystick animation related to F1-F4 ( look below for the GIMBAL LOCK issue!) add_animation 0.02, 1, 0, source: sequential, mode: y-offset ;button animation getting pressed on F1 add_animation 10, 0, 0, source: sequential, mode: y-offset ;sequential shifter reacting to shift up/down Modes add_animation 145, 0, 0, source: airspeed, mode: x-rotation ;Airspeed indicator needle rotating x axis add_animation 145, 0, 0, source: airspeed, mode: y-rotation ;Airspeed indicator needle rotating y axis add_animation 145, 0, 0, source: airspeed, mode: z-offset ;Airspeed indicator sliding z axis add_animation -90, 0, 0, source: pitch , mode: y-rotation add_animation 180, 0, 0, source: roll, mode:x-rotation ;virtual attitude indicator (artificial horizon)( look below for the GIMBAL LOCK issue!) Events add_animation 45, 0, 0, source: event, mode: x-rotation, event: TRUCK_TOGGLE_CONTACT ;Prop will rotate 45\u00b0 x-axis when the starter key is pressed. ;There is only one event allowed with '''mode:event''' add_animation 45, 0, 0, source:event, mode:x-rotation, eventlock, event:TRUCK_TOGGLE_CONTACT add_animation 45, 0, 0, source:event, mode:x-rotation, event:TRUCK_STARTER ;This rotates the prop related to ignition status and additional 45\u00b0 when the starter is pressed ;It is valid to stack up to 10 animations of any kind to one single prop. Autoanimation add_animation 0.005, 0, 0, source: permanent, mode: x-offset, autoanimate ;It will animate the related prop on the x-offset add_animation -0.005, 0, 0, source: permanent, mode: x-offset, autoanimate ;Moving direction changed. add_animation -0.005, 0, 0, source: permanent, mode: x-offset, autoanimate, noflip ;Will stop now at the limit and not flip anymore. So now it just moves one direction and thats it. add_animation -0.005, 0, 0, source: permanent, mode: x-offset, autoanimate, noflip, bounce ;Will start moving left / right itself just according to the default limits add_animation -0.005, -5, 20, source: permanent, mode: x-offset, autoanimate, noflip, bounce ;Will start moving left / right itself just according to the user custom limits. ;Keep in mind: for rotation and offset, first limits needs to be <=0 second >=0 ;Limits are like prop offsets for offsets, default ( opt1=opt2=0) limit is +-10 add_animation -0.005, 15, 20, source: permanent, mode: x-offset, autoanimate, noflip, bounce ;The prop will jump instantly at start and bounce between that limits, which might be a bit confusing. add_animation -0.005, 15, 20, source: permanent, mode: x-rotation, autoanimate ;Rotating instead of sliding. All the settings for offsets can be used with rotation too. ;Limits are in degree for rotations, default ( opt1=opt2=0) limit is +-180\u00b0 ( a full circle) GIMBAL LOCK To avoid axis corruption when rotating props: - Always place your prop with a y-rotation of 0 or 180\u00b0 . If you need to align your prop in another way, rotate the mesh in your mesh-editor! To avoid axis corruption when rotating multiple props: - Use only the x and y axis together, skip z. If you need 3 axis rotation, do the z-axis with a n/b-rotator as the base for your prop definition nodes. Gimbal lock","title":"Add_animation"},{"location":"vehicle-creation/fileformat-truck/#flexbodies","text":"Flexbodies are pretty much the same as props. The only difference between them is that flexbodies deform. You can declare several flexbodies. Each must be composed of the two lines (prop-like line and forset line).","title":"Flexbodies"},{"location":"vehicle-creation/fileformat-truck/#sub-section-prop-like","text":"The first line of this section is exactly the same format as on the props section. Parameters: reference_node : Node number/name ; The base node, used to define the coordinate system. x_direction_node : Node number/name ; The node that defines the X direction (this can be visualized as a line pointing from the reference node to this node) y_direction_node : Node number/name ; The node that defines the Y direction (this can be visualized as a line pointing from the reference node to this node) x_offset : Real number <0 - 1> ; The amount the prop should be moved in the X direction from the reference_node . y_offset : Real number <0 - 1> ; The amount the prop should be moved in the Y direction from the reference_node . z_offset_meters : Real number ; Moves the flexbody \"straight up\". Unlike the x_offset and the y_offset , the distance is measured in meters. x_axis_rotation : Real number ; The amount the flexbody should be rotated about the X axis y_axis_rotation : Real number ; The amount the flexbody should be rotated about the Y axis z_axis_rotation : Real number ; The amount the flexbody should be rotated about the 'straight up' axis mesh_name : String ; The name of the Ogre3D mesh object used for the flexbody.","title":"(sub-section) \"Prop-like\""},{"location":"vehicle-creation/fileformat-truck/#sub-directive-forset","text":"As next, a line beginning with the word forset follows. Behind the word forset , you declare all nodes used for the deformation of the mesh (ranges are supported). node_list : List of node{number/name/range} ; List of nodes to use for deforming the flexbody. These nodes should be outer nodes of the vehicle, those that are close to the mesh. Notes about backwards compatibility: If you use a node range [A-B], RoR will tolerate if node B doesn't exist (warning will be emitted). If you enter multiple commas ,, between forset entries, parser will ignore it silently. If there's a comma after last element, parser will ignore it silently. Accepted separators between keyword \"forset\" and node ranges are: whitespace, comma , , colon : , or nothing at all (lines like forset12,34,56 will be correctly evaluated as forset 12, 34, 56 ) for backwards compatibility.","title":"(sub-directive) forset"},{"location":"vehicle-creation/fileformat-truck/#sub-directive-disable_flexbody_shadow","text":"(optional) [ Version 0.38.8+ ] No parameters. Disables shadow casting of the last flexbody to improve complex truck FPS.","title":"(sub-directive) disable_flexbody_shadow"},{"location":"vehicle-creation/fileformat-truck/#sub-directive-flexbody_camera_mode","text":"(optional) [ Version 0.38.8+ ] Sets the cameramode in which the flexbody should be shown: mode : Decimal number default = -2 (always visible) ; Flexbody visibility: -2 = all the time (default), -1 = external only, >= 0 cinecam number flexbodies ;ref, x, y, offsetx, offsety, offsetz, rotx, roty, rotz, mesh 3, 4, 19, 0, 0, 0.027, 90, 0, 90, dodgecharger.mesh forset 0-16, 23-24, 31, 54-125 disable_flexbody_shadow ; -2 = all the time, -1 = external only, >=0 cinecam number flexbody_camera_mode -1 Note: It's important to keep an eye on the number of vertices of your meshes. Not that there is a hard limit, but beyond 10000 vertices there could be a noticeable slowdown. As reference: the Dodge Charger mesh is about 4000 vertices.","title":"(sub-directive) flexbody_camera_mode"},{"location":"vehicle-creation/fileformat-truck/#submesh","text":"Defines the collision surface of the truck; see required subsection cab and option c It may also generate textured mesh to visualize the truck; see optional subsection texcoords","title":"Submesh"},{"location":"vehicle-creation/fileformat-truck/#sub-section-cab","text":"Specifies a series of triangles. Order of nodes defines orientation - the side with counterclockwise winding will be 'front' (or 'positive'), the other 'rear' (or 'negative'). If texcoords are used, only the 'front' side will be visible, the 'rear' side will be see-through (or black if you use backmesh ). node_1 : Node number ; First point of collision triangle. node_2 : Node number ; Second point of collision triangle. node_2 : Node number ; Third point of collision triangle. options (optional) : String n : Placeholder. Does nothing. c : This triangle will be a contact triangle that can contact with contacters nodes. Deprecated aliases: p , u . b : This triangle will be part of a buoyant hull. Deprecated aliases: D , F , S . s : This triangle will be part of a buoyant hull, mouse dragging will be disabled. r : This triangle will be part of a buoyant hull, mouse dragging only.","title":"(sub-section) cab"},{"location":"vehicle-creation/fileformat-truck/#sub-section-texcoords","text":"Specifies texture coordinates (also called 'UV coordinates') for cab triangles. Only triangles with all 3 texcoords are displayed. The texture is specified in globals section. node : Node number ; Node representing a vertex in the resulting geometry. u : Real number 0.0 - 1.0 ; The U texture coordinate: Position of this vertex on the X axis of the image. v : Real number 0.0 - 1.0 ; The V texture coordinate: Position of this vertex on the Y axis of the image.","title":"(sub-section) texcoords"},{"location":"vehicle-creation/fileformat-truck/#sub-directive-backmesh","text":"No params. If added, the triangles' backsides (see texcoords ) will be black instead of see-through. ;cabin top submesh texcoords 75, 0.172, 0.334 76, 0.172, 0.665 77, 0.291, 0.334 78, 0.291, 0.665 cab 75,76,78 75,78,77 ;cabin back submesh texcoords 77, 0.291, 0.334 78, 0.291, 0.665 53, 0.422, 0.334 54, 0.422, 0.665 6, 0.422, 0.334 8, 0.422, 0.665 cab 77,78,54 77,54,53 53,54,8,c 53,8,6,c backmesh Example of invisible collision submesh for a flexbody vehicle ( texcoords section is not used): ;front bumper submesh cab 126,121,127,c 132,126,127,c 133,132,127,c 125,120,121,c 126,125,121,c ...","title":"(sub-directive) backmesh"},{"location":"vehicle-creation/fileformat-truck/#set_collision_range","text":"set_collision_range is 0.02 as default value, and defines the maximum range ( 2 cm) around a truck's collision triangles that collisions start to happen. By increasing it, for example to 0.04 , penetrations become a lot more difficult. set_collision_range 0.02","title":"set_collision_range"},{"location":"vehicle-creation/fileformat-truck/#submesh_groundmodel","text":"Specifies groundmodel should be used for the trucks contactive submeshes. It has module-wide effect; it only needs to be defined once per file. Parameter: groundmodel_name : String ; default = concrete ; The groundmodel to use. See also Groundmodel Description File ;submesh_groundmodel groundModelName submesh_groundmodel rock","title":"submesh_groundmodel"},{"location":"vehicle-creation/fileformat-truck/#exhausts","text":"This replaces the x or y node options. The factor parameter should be \"1\", because it is not used yet. The material should be \"default\" if no user-created one is made. (You could create your own particle emitter based on the default one: data/smoke.particle). Remember: The direction node is behind the ref node! exhausts ;ref node, direction node, factor material 103, 99, 1 default 105, 98, 1 default","title":"Exhausts"},{"location":"vehicle-creation/fileformat-truck/#sections","text":"This section allows you to have different options selectable from the vehicle spawner menu. Almost any section ( managedmaterials , engine , props , flexbodies , etc) can be used with this. sectionconfig 0 lowspeed sectionconfig 0 highspeed section 0 lowspeed engine 1000.000000, 1500.000000, 5000.000000, 2.000000, 10.850000, 9.520000, 6.560000, -1.000000 end_section section 0 highspeed engine 1000.000000, 15000.000000, 5000.000000, 2.000000, 10.850000, 9.520000, 6.560000, -1.000000 end_section","title":"Sections"},{"location":"vehicle-creation/fileformat-truck/#guisettings","text":"By using this section you can set some parameters of the Truck GUI. This can be helpful if you're building a vehicle that has a relatively higher or lower speed than average. Format: keyword value dashboard : [ Version 0.38.66+ ] Custom HUD layout that should be used for this truck. You can use multiple lines. texturedashboard : [ Version 0.38.66+ ] Custom HUD layout that should be used for the RTT for this truck. You can use multiple lines. RTT means Real Time-generated Texture, you can use it as material for your custom dashboard mesh. interactiveOverviewMap : [ Version 0.36+ ] ; off / simple / zoom - Enables/disables the activation of the interactive map for the truck. Legacy parameters (not affecting the v0.4 custom HUD system). Will be restored or removed soon. tachoMaterial : String ; default = tracks/Tacho ; The name of the tachometer face material. (must be defined in a material file). speedoMaterial : String ; default = tracks/Speedo ; The name of the speedometer face material. (must be defined in a material file). speedoMax : Positive decimal number ; default = 140 ; The highest number that is on the speedometer (kph). (values 10-32000) Speedometer needle goes from -140\u00b0 to 140\u00b0. useMaxRPM : 0 or 1 ; default = 0 ; [Yes/No] Whether or not to use the max rpm (in the engine section) as the highest number on the tachometer. Note that your actual max rpm is MaxRPM+20%. Do not include the 20% on your tachometer or it will be inaccurate. Tachometer needle is from -120\u00b0 to 120\u00b0. helpMaterial : String ; default = tracks/black ; The help material (a picture that shows command instructions). NOTE: This value overrides settings from section \"help\" Example: guisettings interactiveOverviewMap zoom dashboard dash_test.layout dashboard dash_test2.layout texturedashboard dashGauges.layout ; legacy settings tachoMaterial tracks/MyTacho speedoMaterial tracks/MySpeedo speedoMax 80 useMaxRPM 1","title":"Guisettings"},{"location":"vehicle-creation/fileformat-truck/#set_skeleton_settings","text":"Inline-section; modifies the skeleton display (activated by pressing K ) of the truck. Has module-wide effect; only needs to be issued once per file. Parameters: visibility_range_in_meters (nullable) : Real number ; default = 150 ; Empty value = -1 beam_thickness_in_meters (optional) (nullable) : Real number ; default = 0.01 (1 centimeter) ; Empty value = -1 Examples: Beams visible from 150 meters away, beams are 1 centimeter in width (default values): set_skeleton_settings 150, 0.01 2km sight range with 9 centimeter wide beams: set_skeleton_settings 2000, 0.09","title":"Set_skeleton_settings"},{"location":"vehicle-creation/fileformat-truck/#videocamera","text":"The videocamera section describes how to set up multiple mirrors and extra cameras like a backup-camera for a truck or hook-camera for a crane. Both, cameras and mirrors, use the same technique, cameras just add a reflective calculation and flip (mirror) the image generated. Parameters: reference_node : Node number/name ; The node where the camera is placed. This is your reference node. Any existing node## is valid. left_node : Node number/name ; The Z-reference of the camera, should be exactly right of the reference node when the camera points forward to the trucks front. Any existing node## is valid. bottom_node : Node number/name ; The Y-reference of the camera, should be exactly below the reference node when the camera points forward to the trucks front. Any existing node## is valid. alt_reference_node (nullable) : Node number/name ; Empty value = -1 ; The alternative cam position node. It replaces the reference node for position but not for orientation. Good to setup mirrors and cams with just one extra node to an existing truck. Important for mirrors, read below! Any existing node## is valid. alt_orientation_node (nullable) : Node number/name ; Empty value = -1 ; The alternative camera orientation node. If set, it skips any camera orientation calculation and makes the cam permanent look at the set node. Good for hooks moving up and down. Any existing node## is valid. offset_x (nullable) : Real number ; Empty value = 0 ; X-offset from reference or alternative cam position node. Works like props offsets, relates to the plane of Node 1-3 as frustum and moves the cam proportional forth and back on its roll-axis. offset_y (nullable) : Real number ; Empty value = 0 ; Y-offset from reference or alternative cam position node. Works like props offsets, relates to the plane of Node 1-3 as frustum and moves the cam up and down in meters on its rotation-axis. offset_z (nullable) : Real number ; Empty value = 0 ; Z-offset from reference or alternative cam position node. Works like props offsets, relates to the plane of Node 1-3 as frustum and moves the cam proportional left and right on its pitch-axis. rotation_x (nullable) : Real number ; Empty value = 0 ; Optional camera X-rotation. Works like props rotation, relates to the plane of Node 1-3 as frustum. Adjust camera orientation without moving nodes. rotation_y (nullable) : Real number ; Empty value = 0 ; Optional camera Y-rotation. Works like props rotation, relates to the plane of Node 1-3 as frustum. Adjust camera orientation without moving nodes. Avoid the gimbal lock, using Y-rotation is not recommended together with other axis. rotation_z (nullable) : Real number ; Empty value = 0 ; Optional camera Z-rotation. Works like props rotation, relates to the plane of Node 1-3 as frustum. Adjust camera orientation without moving nodes. fov : Real number, valid: 0.01 -179.9 ; Camera field of view. texture_width : Positive decimal, must be power of 2 ; X-resolution of the texture generated. Valid: any value^2 (POW) (see below for explanation), recommended maximum 256 , watch your FPS. texture_height : Positive decimal, must be power of 2 ; Y-resolution of the texture generated. Valid: any value^2 (POW) (see below for explanation), recommended maximum 256 , watch your FPS. min_clip_distance : Real number ; Minimum distance in meters of objects to be rendered Valid: 0.1 - value<maxclipdistance. Useful to blend out things that should not be displayed. Good to tune FPS. max_clip_distance : Real number Maximum distance in meters of objects to be rendered Valid: value>minclipdistance - 32000 . Useful to blend out things that should not be displayed. Watch your FPS. camera_role : Decimal number ; Role aka function of the camera: -1 == camera, 0 == tracker camera (requires an alternative camera orientation node), 1 == mirrors. camera_mode : Decimal number, use -2 ; Camera switchoff state. Not supported yet, put a -2 in here. material : String ; The material the generated textured should be displayed on. Requires a prop (mesh) using this material to get any visual results. name : [ Version 0.38.63+ ] String ; Specify a name for this videocamera that might be used for the title of the renderwindow. Important : Videocameras only work with props . Place the videocamera section before loading any meshes that should display the material Its recommended that mirrors always use the alternative cam position node placed precise in the center of the mirror-mesh (the reflecting part) of the related mirror. Otherwise, reflective calculation might be wrong. Mirrors can use y-axis rotation presets for easy adjustment, to rotate x/z axis move the reference nodes accordingly to avoid gimbal lock, offset preset work too, but are not recommended to use. Wrong or not existing materials might make RoR crash while parsing the truck. Be accurate ! .material file material definition is strictly necessary and needs to match the material in the truck-file line. Material definition features a fall-back texture when camera is not active or not set. Just add a texture unit with a texture definition, it will be replaced with the generated texture when camera is setup correct and active automatically. Do NOT the set alternative camera orientation node to the same node## then your reference node or ( if used ) the alternative cam position node. Makes no sense and might crash. Samples: videocamera ;nref, nx, ny, ncam, nlookat, offx, offy, offz, rotx, roty, rotz, fov, texX, texY, minclip, maxclip, cRole, cMode, material ; camera with no offsets and rotations 43, 42, 1, -1, -1, 0.00, 0.00, 0.00, 0, 0, 0, 70, 256, 256, 0.10, 2500, -1, -2, video-camera1 ; camera with no offsets and rotations placed on an alternative camNode 43, 42, 1, 185, -1, 0.00, 0.00, 0.00, 0, 0, 0, 70, 256, 256, 0.10, 2500, -1, -2, video-camera1 ; tracker camera with no offsets and rotations placed on an alternative camNode 43, 42, 1, 185, 363, 0.00, 0.00, 0.00, 0, 0, 0, 70, 256, 256, 0.10, 2500, 0, -2, video-camera1 ; camera with offsets and rotations 42, 43, 1, 362, -1, -3.22, 1.20, 0.00, -45, 0, 0, 100, 128, 128, 0.01, 2500, -1, -2, video-camera1 ; camera with offsets and rotations placed on an alternative camNode (offsets apply from here) 42, 43, 1, 362, -1, -3.22, 1.20, 0.00, -45, 0, 0, 100, 128, 128, 0.01, 2500, -1, -2, video-camera1 ; mirror no offsets and rotations placed on an alternative camNode 43, 42, 1, 185, -1, 0.00, 0.00, 0.00, 0, 0, 0, 70, 256, 256, 0.10, 2500, 1, -2, video-camera1 Example mirror setup from the 1988 Audi UR-Quattro : (They are currently disabled) videocamera ;nref, nx, ny, ncam, nlookat, offx, offy, offz, rotx, roty, rotz, fov, texX, texY, minclip, maxclip, cRole, cMode, material ;left 317,308,315, 318, -1, 0, 2, 0, 0, 10, 0, 40, 400, 400, 0.1, 6000, 1, -2, Quattro_LM UV Mapped mirror mesh: You can use this texture to help UV map your mirror mesh: .material file: material Quattro_LM { technique { pass { texture_unit { texture vidscreen-disabled.png } } } } Node position reference: Make sure vidscreen-disabled.png is in your truck zip. Use your own texture and material names to avoid conflicts! You can enable videocamera debug in settings (Diagnostic tab) which activates helpful meshes which show position and orientation of the video-cameras set up: Notes: Any value 2^n (POW) means that you have to choose a number out of the following numbers: 2^0 = 1 2^1 = 2 2^2 = 4 2^3 = 8 2^4 = 16 2^5 = 32 2^6 = 64 2^7 = 128 2^8 = 256 2^9 = 512 2^10 = 1024 2^11 = 2048 2^12 = 4096 2^13 = 8192","title":"Videocamera"},{"location":"vehicle-creation/fileformat-truck/#extcamera","text":"The extcamera command allows you to change the 3 rd person camera behavior. Currently, there are three modes you can use: The classic mode (also default if you do not use this command) extcamera classic The cinecam mode: it will rotate the camera around the cinecamera extcamera cinecam The node mode: it will rotate the camera around a specified node ;extcamera node <nodeid> ;for example: extcamera node 123 The final two modes are useful for a vehicle with detaching parts, so the camera is fixed in the view of the main vehicle.","title":"Extcamera"},{"location":"vehicle-creation/fileformat-truck/#camerarail","text":"In [ Version 0.39.7+ ] and above you can add a camerarail section to your beam objects. The camerarail generates a cSpline on base of the given nodes, on which you can move a camera. A new camera mode will be added ingame which is accessible with the \"c\"-button. Camera controls: Right-click: Rotate camera Right-click + CTRL (left) + move mouse left/right: Move camera on spline. Speed up with Shift or slow down with Alt . CTRL (left) + Shift + Space : Enable/disable auto-tracking Syntax: camerarail <node1> [node2] ... [node50] You can define up to 50 nodes per beam object. You can use one node several times. If the first node is the same as the last one, the spline will be closed and the camera can move on the rail continuously. Example: camerarail 5 6 7 8 5 If multiple beam objects, each with a camerarail section, are connected with hooks, the game will try to connect the splines. This way you can move the camera over multiple hooked vehicles without the need to switch the vehicle: Object A (active) - Object B (hooked) - Object C (hooked) The distance between the last camerarail node of one and the first camerarail node of another object needs to be under 5 meters.","title":"Camerarail"},{"location":"vehicle-creation/fileformat-truck/#sounds","text":"Since [ Version 0.36+ ] , vehicles can have custom sounds. By default, RoR uses a set of default sounds for your vehicle, but with the following sections you can customize these sounds.","title":"Sounds"},{"location":"vehicle-creation/fileformat-truck/#disabledefaultsounds","text":"Use this simple statement to disable all sounds that RoR automatically adds to your vehicle. This allows you to start from a clean slate, and add your custom sounds without interference from the automatically added sounds. Example : disabledefaultsounds","title":"disabledefaultsounds"},{"location":"vehicle-creation/fileformat-truck/#soundsources","text":"Adds a sound source to your vehicle. Parameters: node : Node number ; The place where your sound will come from. Doesn't support named nodes. sound_script_name : String ; Sound scripts are defined in soundscript files . You can use game-defined sound scripts or your own sound scripts. soundsources ;nodeID, sound 23, my_diesel 23, my_turbo 135, tracks/default_horn","title":"Soundsources"},{"location":"vehicle-creation/fileformat-truck/#soundsources2","text":"Parameters: node : Node number ; The place where your sound will come from. Doesn't support named nodes. mode : Decimal number -2 : Global; enabled all the time -1 : Enabled in external camera only 0 (or higher) : Enabled for cinecamera number specified. Note: for backwards compatibility, the parser will read invalid values as 0 and emit a warning. sound_script_name : String ; Sound scripts are defined in soundscript files . You can use game-defined sound scripts or your own sound scripts. soundsources2 ;node, mode, sound 23, -2, my_diesel 23, -1, my_turbo 135, 0, tracks/default_horn","title":"Soundsources2"},{"location":"vehicle-creation/fileformat-truck/#list-of-default-soundsources","text":"This is a list of all default soundsources separated by engine type This can be inserted in the file as is.","title":"List of default soundsources"},{"location":"vehicle-creation/fileformat-truck/#engine-diesel","text":"soundsources 1, tracks/default_diesel 1, tracks/default_force 1, tracks/default_starter 1, tracks/default_turbo 1, tracks/default_air_purge 1, tracks/default_horn 1, tracks/default_pump 1, tracks/default_screetch 1, tracks/default_brakes 1, tracks/default_parkbrakes 1, tracks/default_air 1, tracks/default_shift 1, tracks/default_break 1, tracks/default_creak 1, tracks/default_gear_slide 1, tracks/default_reverse_beep 1, tracks/default_turn_signal","title":"Engine (Diesel)"},{"location":"vehicle-creation/fileformat-truck/#engine-gasoline","text":"soundsources 1, tracks/default_car 1, tracks/default_starter 1, tracks/default_horn 1, tracks/default_pump 1, tracks/default_police 1, tracks/default_screetch 1, tracks/default_brakes 1, tracks/default_parkbrakes 1, tracks/default_shift 1, tracks/default_break 1, tracks/default_creak 1, tracks/default_gear_slide 1, tracks/default_turn_signal","title":"Engine (Gasoline)"},{"location":"vehicle-creation/fileformat-truck/#airplane-prop","text":"soundsources 1, tracks/default_turboprop_start1 1, tracks/default_turboprop_lopower1 1, tracks/default_turboprop_hipower1 1, tracks/default_turboprop_start2 1, tracks/default_turboprop_lopower2 1, tracks/default_turboprop_hipower2 1, tracks/default_turboprop_start3 1, tracks/default_turboprop_lopower3 1, tracks/default_turboprop_hipower3 1, tracks/default_turboprop_start4 1, tracks/default_turboprop_lopower4 1, tracks/default_turboprop_hipower4 1, tracks/default_turboprop_start5 1, tracks/default_turboprop_lopower5 1, tracks/default_turboprop_hipower5 1, tracks/default_turboprop_start6 1, tracks/default_turboprop_lopower6 1, tracks/default_turboprop_hipower6 1, tracks/default_turboprop_start7 1, tracks/default_turboprop_lopower7 1, tracks/default_turboprop_hipower7 1, tracks/default_turboprop_start8 1, tracks/default_turboprop_lopower8 1, tracks/default_turboprop_hipower8","title":"Airplane (Prop)"},{"location":"vehicle-creation/fileformat-truck/#airplane-jet","text":"soundsources 1, tracks/default_turbojet_start1 1, tracks/default_turbojet_lopower1 1, tracks/default_turbojet_hipower1 1, tracks/default_turbojet_afterburner1 1, tracks/default_turbojet_start2 1, tracks/default_turbojet_lopower2 1, tracks/default_turbojet_hipower2 1, tracks/default_turbojet_afterburner2 1, tracks/default_turbojet_start3 1, tracks/default_turbojet_lopower3 1, tracks/default_turbojet_hipower3 1, tracks/default_turbojet_afterburner3 1, tracks/default_turbojet_start4 1, tracks/default_turbojet_lopower4 1, tracks/default_turbojet_hipower4 1, tracks/default_turbojet_afterburner4 1, tracks/default_turbojet_start5 1, tracks/default_turbojet_lopower5 1, tracks/default_turbojet_hipower5 1, tracks/default_turbojet_afterburner5 1, tracks/default_turbojet_start6 1, tracks/default_turbojet_lopower6 1, tracks/default_turbojet_hipower6 1, tracks/default_turbojet_afterburner6 1, tracks/default_turbojet_start7 1, tracks/default_turbojet_lopower7 1, tracks/default_turbojet_hipower7 1, tracks/default_turbojet_afterburner7 1, tracks/default_turbojet_start8 1, tracks/default_turbojet_lopower8 1, tracks/default_turbojet_hipower8 1, tracks/default_turbojet_afterburner8","title":"Airplane (Jet)"},{"location":"vehicle-creation/fileformat-truck/#airplane-piston","text":"soundsources 1, tracks/default_pistonprop_start1 1, tracks/default_pistonprop_lopower1 1, tracks/default_pistonprop_hipower1 1, tracks/default_pistonprop_start2 1, tracks/default_pistonprop_lopower2 1, tracks/default_pistonprop_hipower2 1, tracks/default_pistonprop_start3 1, tracks/default_pistonprop_lopower3 1, tracks/default_pistonprop_hipower3 1, tracks/default_pistonprop_start4 1, tracks/default_pistonprop_lopower4 1, tracks/default_pistonprop_hipower4 1, tracks/default_pistonprop_lopower5 1, tracks/default_pistonprop_hipower5 1, tracks/default_pistonprop_lopower6 1, tracks/default_pistonprop_hipower6 1, tracks/default_pistonprop_lopower7 1, tracks/default_pistonprop_hipower7 1, tracks/default_pistonprop_lopower8 1, tracks/default_pistonprop_hipower8","title":"Airplane (Piston)"},{"location":"vehicle-creation/fileformat-truck/#marine-large","text":"1, tracks/default_marine_large","title":"Marine (Large)"},{"location":"vehicle-creation/fileformat-truck/#marine-small","text":"1, tracks/default_marine_small","title":"Marine (Small)"},{"location":"vehicle-creation/fileformat-truck/#aircraft","text":"","title":"Aircraft"},{"location":"vehicle-creation/fileformat-truck/#wings","text":"Please see this page for more information The wings parameters are: A Front left down node number B Front right down node number C Front left up node number D Front right up node number E Back left down node number F Back right down node number G Back left up node number H Back right up node number Texture X coordinate of the front left of the wing : in the texture defined in \"globals\" Texture Y coordinate of the front left of the wing : in the texture defined in \"globals\" Texture X coordinate of the front right of the wing : in the texture defined in \"globals\" Texture Y coordinate of the front right of the wing : in the texture defined in \"globals\" Texture X coordinate of the back left of the wing : in the texture defined in \"globals\" Texture Y coordinate of the back left of the wing : in the texture defined in \"globals\" Texture X coordinate of the back right of the wing : in the texture defined in \"globals\" Texture Y coordinate of the back right of the wing : in the texture defined in \"globals\" Type of control surface : see below Relative chord point at which starts the control surface (between 0.0 and 1.0) Minimum deflection of the control surface : in degrees (negative deflection) Maximum deflection of the control surface : in degree (positive deflection) Airfoil file to use coefficent (optional) Default is 1.0 (100%), setting any other positive number increases or decrease overall wing efficacy. Useful for precision flight characteristics tuning. The type of control surface is set by a single character, and defines how the control surface will move depending on pilot inputs. Available control surface types are: n = None a = Right aileron b = Left aileron f = Flap e = Elevator r = Rudder S = Stabilator with right hand axis (full body elevator), useful for e.g. a Mig25 T = Stabilator with left hand axis (full body elevator), useful for e.g. a Mig25 c = Right elevon (right aileron + elevator), useful for e.g. Concorde d = Left elevon (left aileron + elevator), useful for e.g. Concorde g = Right flaperon (right aileron + flap) h = Left flaperon (left aileron + flap) U = Taileron with right hand axis (full body elevator+aileron), useful for e.g. a F-15 V = Taileron with left hand axis (full body elevator+aileron), useful for e.g. a F-15 i = Right ruddervator (rudder + elevator), useful for V-tails like the Bonanza j = Left ruddervator (rudder + elevator), useful for V-tails like the Bonanza wings ;main wing 28,22,29,23,18,20,19,21, 0.509, 0.999, 0.555, 0.751, 0.752, 0.999, 0.752, 0.751, a, 0.75, -24, 24, NACA64.1.412.afl ; this wing is force efficacy reduced to 50% 26,28,27,29,16,18,17,19, 0.804, 0.711, 0.818, 0.617, 0.999, 0.711, 0.999, 0.617, f, 0.75, -30, 0, NACA64.1.412.afl 0.75 ; this wing is force efficacy upgraded to 300% ( equals 3 wings of the same type ) 90,26,25,27,14,16,15,17, 0.783, 0.844, 0.804, 0.711, 0.999, 0.844, 0.999, 0.711, f, 0.75, -30, 0, NACA64.3.618.afl 3.0 0,90,24,25, 4,14,13,15, 0.764, 0.933, 0.784, 0.844, 0.999, 0.933, 0.999, 0.844, f, 0.75, -30, 0, NACA64.3.618.afl 2, 0,46,24, 6, 4,12,13, 0.756, 0.999, 0.764, 0.933, 0.999, 0.999, 0.999, 0.933, n, 1.0, 0, 0, NACA0009.afl 44, 2,45,46,30, 6,31,12, 0.783, 0.844, 0.764, 0.933, 0.999, 0.844, 0.999, 0.933, f, 0.75, -30, 0, NACA64.3.618.afl 42,44,43,45,32,30,33,31, 0.804, 0.711, 0.783, 0.844, 0.999, 0.711, 0.999, 0.844, f, 0.75, -30, 0, NACA64.3.618.afl 40,42,41,43,34,32,35,33, 0.818, 0.617, 0.804, 0.711, 0.999, 0.617, 0.999, 0.711, f, 0.75, -30, 0, NACA64.1.412.afl 38,40,39,41,36,34,37,35, 0.555, 0.751, 0.509, 0.999, 0.752, 0.751, 0.752, 0.999, b, 0.75, -24, 24, NACA64.1.412.afl ;rudder 101,107,102,108,103,109,104,110, 0.017, 0.746, 0.087, 0.492, 0.262, 0.746, 0.204, 0.492, r, 0.56, -35, 35, NACA0009.afl 99,101,100,102,105,103,106,104, 0.017, 0.999, 0.132, 0.747, 0.262, 0.999, 0.253, 0.747, n, 1.0, 0, 0, NACA0009.afl ;elevators 144,154,146,155,142,152,105,153, 0.763, 0.457, 0.840, 0.244, 0.999, 0.457, 0.983, 0.244, e, 0.64, -33, 33, NACA0009.afl 145,144,147,146,143,142,106,105, 0.756, 0.999, 0.764, 0.933, 0.999, 0.999, 0.999, 0.933, n, 1.0, 0, 0, NACA0009.afl 150,145,151,147,148,143,149,106, 0.840, 0.244, 0.763, 0.457, 0.983, 0.244, 0.999, 0.457, e, 0.64, -33, 33, NACA0009.afl Special wing formats to reduce node/beam count and CPU load: (Use at own risk!) All examples lines refer to the node notation sample picture above. 'A' means Node A from that schematic diagram. They work, no idea if they produce more or less lift then a wing with defined thickness. Only use them for invisible wings with meshed props/flexbodies for the visual appearance and with a transparent material, skinning them results in an ugly visual appearance. Flarewing using 2 nodes For precise aviation flare placement you can use a wing defined with only 2 nodes. It has no aerodynamic influence at all It has an extremely low node/beam count -- Vital: Needs to be placed as first wing in the wings section. Use NACA0009.afl as the airfoil. wings A,B,A,B,A,B,A,B,0,0,0,0,0,0,0,0,n,0,0,0, NACA0009.afl Trim or main wing using 3 nodes -- Defines a wing using only 3 nodes. Placing this wing first in the wing section results in the aviation flares appearing on the nodes A,B ( red/green ) and E (white flash). Works horizontally and vertically. (As on the tail.) Low node/beam count wing for self built flaps, ailerons, elevators or trimwings, very easy to animate with a single hydro . Can be used with any active control surface and any afl-format Known Issues: Sometimes vertical tailfin wings work only one direction. If RoR crashes exchange node A and B with each other. wings A,B,A,B,E,E,E,E,0,0,0,0,0,0,0,0,n,0,0,0, NACA0009.afl Trim or main wing using 4 nodes -- Defines a wing using only 4 nodes. Placed first in the wing section results in the aviation flares appearing on the nodes A,B (red/green) and E,F (white flash) Works horizontally and vertically (As on the tail.) Low node/beam count wing for main wings Can be used with any active control surface and any afl-format. Known Issues: sometimes vertical tailfin wings work only one direction. If RoR crashes exchange node A,B and E,F with each other wings A,B,A,B,E,F,E,F,0,0,0,0,0,0,0,0,n,0,0,0, NACA0009.afl","title":"Wings"},{"location":"vehicle-creation/fileformat-truck/#airbrakes","text":"Airbrakes are a moving panel used to slow down an airplane (key bindings: 3 and 4 ). They are positioned similarly to props . These airbrakes can be easily added to a wing box, with noderef , nodex , nodey and nodea being the four upper nodes of a box. Parameters: reference_node : Node number/name ; The base node, used to define the coordinate system x_direction_node : Node number/name ; The node that defines the X direction (this can be visualized as a line pointing from the reference node to this node) y_direction_node : Node number/name ; The node that defines the Y direction (this can be visualized as a line pointing from the reference node to this node) additional_node : Node number/name ; An additional node to make the braking forces symmetric (they are applied to noderef , nodex , nodey and nodea ). x_offset : Real number <0 - 1> ; The amount the prop should be moved in the X direction from the reference node . The distance it is moved depends on the distance between the Reference node and the '''X direction node '''(it's proportional): (0) leaves the prop on the reference node, (1) moves it all the way to the X direction node , and (0.5) puts the prop half-way between the two y_offset : Real number <0 - 1> ; The amount the prop should be moved in the Y direction from the reference node . Like the X direction offset , the amount it is proportional to the distance between the reference node and the Y direction node . z_offset : Real number <0 - 1> ; Imagine a surface which the X and Y directions pass straight through. If looking along that surface is the forwards direction, then this field moves the prop straight up. Unlike the X direction offset and the Y direction offset , the amount for the straight up offset is measured in meters width : Real number ; Dimension of the panel height : Real number ; Dimension of the panel max_inclination_angle : Real number ; Maximum inclination angle texcoord_x1 : Real number <0 - 1> ; Texture coordinate. texcoord_y1 : Real number <0 - 1> ; Texture coordinate. texcoord_x2 : Real number <0 - 1> ; Texture coordinate. texcoord_y2 : Real number <0 - 1> ; Texture coordinate. lift_coefficient (optional) : Real number ; default = -1.0 airbrakes ;noderef, nodex, nodey, nodea, offsetx, offsety, offsetz, width, length, max angle, texcord x1, texcoord y1, texcoord x2, texcoord y2 95, 105, 113, 125, 0.2, 0.0, 0.0, 2.0, 3.0, 60.0, 0.044, 0.205, 0.124, 0.146","title":"Airbrakes"},{"location":"vehicle-creation/fileformat-truck/#turboprops","text":"The turboprops section defines the turboprop engines, and makes the truck a plane! It is important that this section comes AFTER the props section, because you will need to add a spinprop.mesh entry to the props before turboprops will work. One pale.mesh per propeller blade can also be added for visible blades. Easy, eh? Each prop blade is associated to a blade tip node, and you must ensure the blade nodes are correctly interconnected with beams so it will spin freely around its axis, while maintaining a rigid prop disc. See how the Antonov 12 is made. You can also make 2 or 3 blade props by putting a -1 instead of the blade tip node number(see the Twin Otter for example). Parameters are: reference_node : Node number/name ; Center of the prop axis_node : Node number/name ; Back of the prop blade_1_tip_node : Node number/name ; blade_2_tip_node : Node number/name ; blade_3_tip_node : Node number/name ; blade_4_tip_node : Node number/name ; turbine_power : Real number ; Power of the turbine (in kW) airfoil : String ; Airfoil of the blades turboprops 122,173,174,175,176,177, 3000.0, Clark-Y.afl 113,168,169,170,171,172, 3000.0, Clark-Y.afl 116,158,159,160,161,162, 3000.0, Clark-Y.afl 119,163,164,165,166,167, 3000.0, Clark-Y.afl","title":"Turboprops"},{"location":"vehicle-creation/fileformat-truck/#fusedrag","text":"The fusedrag section helps the correct modeling of the fuselage contribution to the aerodynamic drag of a plane. It also makes possible the \"masking\" of the aerodynamic contribution of an object loaded inside the plane. It models the fuselage as a big wing section, with an airfoil (usually a symmetrical airfoil like NACA0009 ). Fusedrag can also be used in road vehicles to aid top speed. The parameters are: Number of the front-most node of the fuselage Number of the rear-most node of the fuselage Approximate width of the fuselage Airfoil name fusedrag 131, 51, 4.0, NACA0009.afl autocalc Automatically calculates the width and height of the truck. Fusedrag area coefficient This is optional, default = \"1.0\" ( = 100% ) Smaller values will make your truck go faster. Airfoil name This is optional, default = NACA0009.afl fusedrag ;fusedrag calculated by truck width and height using NACA0009.afl airfoil 131, 51, autocalc ;fusedrag calculated by truck width and height using NACA0009.afl airfoil with coef 0.5 131, 51, autocalc, 0.5 ;fusedrag calculated by truck width and height using airfoil_name.afl airfoil with coef 1.75 131, 51, autocalc, 1.75 airfoil_name.afl","title":"Fusedrag"},{"location":"vehicle-creation/fileformat-truck/#turbojets","text":"Defines a turbojet. Parameters: front_node : Node number/name ; A node at the air intake. back_node : Node number/name ; A node at the base of the nozzle. side_node : Node number/name ; A node at the side of the engine, for reference. is_reversable : Integer (yes/no) ; Boolean meaning: 0 is NO, anything else (including -1 ) is YES dry_thrust : Real number ; The thrust without afterburner (in kilonewtons). wet_thrust : Real number ; The total thrust with afterburner, or zero if it does not apply. front_diameter : 0 ; Unused. back_diameter : Real number ; The nozzle diameter. nozzle_length : Real number ; The length of the nozzle. This will automatically add a nozzle prop at the end of the engine, with the diameter and length specified. turbojets ;front_node, back_node, side_node, is_reversable, dry_thrust(kN), wet_thrust(kN), front_diameter, back_diameter, nozzle_length 272, 273, 277, 0, 73.5, 100.1, 1.2, 1.66, 0.73 274, 275, 276, 0, 3.5, 100.1, 1.2, 1.66, 0.73","title":"Turbojets"},{"location":"vehicle-creation/fileformat-truck/#pistonprops","text":"Pistonprops act in almost the exact same way as turboprops minus two differences. The pitch is manually set and stays at a set value and it has a couplenode. Parameters: reference_node : Node number/name ; Center of the prop axis_node : Node number/name ; Back of the prop blade_1_tip_node : Node number/name ; blade_2_tip_node : Node number/name ; blade_3_tip_node : Node number/name ; blade_4_tip_node : Node number/name ; couple_node : Node number/name OR -1 ; It is unknown of what the couplenode does so it's recommended to leave it at -1 . turbine_power : Real number ; Power of the turbine (in kW) pitch : Real number ; airfoil : String ; Airfoil of the blades pistonprops ;ref, back, p1, p2, p3, p4, couplenode, power, pitch, propfoil 122, 173, 174, 175, 176, 177, -1, 3000.0, -10, Clark-Y.afl 113, 168, 169, 170, 171, 172, -1, 3000.0, -10, Clark-Y.afl 116, 158, 159, 160, 161, 162, -1, 3000.0, -10, Clark-Y.afl 119, 163, 164, 165, 166, 167, -1, 3000.0, -10, Clark-Y.afl","title":"Pistonprops"},{"location":"vehicle-creation/fileformat-truck/#boats","text":"See: Boats","title":"Boats"},{"location":"vehicle-creation/fileformat-truck/#screwprops","text":"Screwprops are boats' propellers. Currently, steering is only done by thrust vectoring. The current syntax is prop node , back node , top node , power . screwprops ;prop node, back node, top node, power 88, 93, 91, 100000.0 89, 92, 90, 100000.0","title":"Screwprops"},{"location":"vehicle-creation/flares/","text":"Flares (how to add lights) \u00b6 Before we begin, we need to ensure some basic understanding of flares, nodes, and planes (no, not the flying type). The Definition of a Flare \u00b6 Flares are basically lights that originate from a set of chosen nodes, which can be manipulated via the appropriate values in the .truck , .load , .trailer , . boat or .plane file. There are multiple types of flares, ranging from brake lights, to turn signals, to headlights, to specialty lighting. The Coordinate Plane \u00b6 Flares operate on a different coordinate plane than nodes, for some reason. Note these changes: Axis Chassis (N/B) Flares X Front to back Left to right Y Up to down Up to down Z Left to right Front/Back Time Warning \u00b6 Furthermore, be advised that adding flares to a vehicle will sometimes take quite a bit of time, depending on the type of vehicle, number of nodes, number of flares, etc. You've been warned. Preparing the chassis \u00b6 Before we begin, you'll absolutely need a truck editor, such as the Editorizer . This will allow you to see where each node is placed in relationship to the coordinate plane (X,Y,Z). Once the editor is running, and is open to the truck of your choice (It's suggested hat one starts out with something simple, such as the old Cartrailer.load, which can be found on the Repository) You'll need to select the checkbox up at the top that says, Print Node Numbers This is pretty self-explanatory, as you'll need three node numbers later on to add your flares. This next step can be challenging, depending on how many nodes and beams are present on the selected vehicle. You'll need to find three nodes close to where you want them on the vehicle. If you're adding brake/turn/head lights, it's suggested that you start with the lower lefthand corner of the front or back chassis, writing that node number on a piece of paper (this'll be your reference or REF node), then write down the node directly above it (this'll be your Y), and then finally, write the number of the node directly to the right of it (this'll be your X). If you cannot find REF,X,Y nodes because they aren't where you want the lights (e.g. you're working on the school bus, which has the tail lights quite a bit above the bumper), you can add three nodes, in the same fashion as noted above, and use them to base your flares off of, but that's too advanced to go in this tutorial. Getting to Know Notepad \u00b6 Next up is man's best friend--the Windows notepad. If you're using another operating system, and/or another editor, that's fine, as long as it can save in ANSI format--it'll save you problems later on. Whatever you do, do not use MS Word/Wordpad/OpenOffice/AbiWord etc. You'll need to open up the vehicle or load of choice with the aforementioned application (notepad or compliant editor). Here, you'll need to add a flare section Once the line \"flares\" is added, you'll need to hit enter once, starting a new section, where it's advised you paste the syntax: flares ;RefNode,X,Y,OffsetX,OffsetY, Type, ControlNumber, BlinkDelay, size MaterialName Tutorial \u00b6 So imagine a flat plane with 4 nodes, the direction of the planes face up, down, left or right determines where your flare will be. There are two ways to do this. First way : flares 219,218,220,0.0,0.0,f,-1,0,0.50, default The first node ( 219 ) is where the flare comes from and the other 2 ( 218 , 220 ) determine whether it faces front or back of the plane . The 1 st image shows my plane nodes 0 , 1 , 217 , 218 The 2 nd image shows the nodes where my flares are going to be placed (optional to have them or not, just there to make things more precise and save time). The 3 rd image shows the placement for the left headlight, the first node 219 is where the flare comes from and 217 , 218 makes it face frontwards, if I did 218 , 217 the flare would face the other way. The 4 th image shows the placement for the right headlight, the first node 220 is where the flare comes from and 219 , 217 makes it face frontwards. To do the rest of the headlight flares, all I change is the first node, but keep the other two nodes depending on the side you want it. The other way to do it is without the nodes where the headlights would be (you need to move the flare with the the red marked numbers). 219,218,220, 0.0 , 0.0 ,f,-1,0,0.50, default All you would do it replace the first node, so instead of 219 , it would be 0 and then you would move the flare to the left. flares 219,218,220,0.0,0.0,f,-1,0,0.50, default flares 0,218,220,0.0,0.0,f,-1,0,0.50, default Same thing apply for rear lights, top lights, side lights, just needs to have a plane, doesn't matter how big or how small the plane is since you can move the flare with the red marked numbers. Syntax \u00b6 Borrowed from Truck file format : Reference node : Node ID ; Node which defines origin of flare-placement coordinate system X axis node : Node ID ; Node which defines X-axis of flare-placement coordinate system Y axis node : Node ID ; Node which defines Y-axis of flare-placement coordinate system Flare X offset : Real number ; Flare position on X axis in % of distance from ref-node to X-node Flare Y offset : Real number ; Flare position on Y axis in % of distance from ref-node to Y-node This defines where the light flares will be. It is positioned in relation to 3 nodes of the chassis. One node is the reference node, and the two others define a base (x,y). So the flare is in the plane defined by the 3 nodes, and is placed relative to the reference node by adding a fraction of the vectors ref-x and ref-y. The three first parameters are the 3 nodes numbers (ref,x,y) and the two next gives what amount of ref-x and ref-y to add to displace the flare point (these two should be logically between 0 and 1, or else that means you use the wrong base triangle and if the body flexes too much the flare will not stick to the body correctly). Basically, OffsetX/Y means that a fraction of X and Y will be added to the Reference node, which should be a corner, with a Y node above it, and an X node to the right or left of it. It's a bit easier, however, if it's in a left corner, than a right. Example (* = node, + = flare location): * + * * Hint: Use the material name tracks/aimflare for help in positioning a flare. Alright, back on topic: below the syntax, you should begin listing your nodes, keeping in mind their location on the vehicle, and the coordinate plane. You'll probably need to save, open up RoR, and test out the flares quite a few times before the placement of the flare is perfect. Adding Symmetrical Flares \u00b6 Okay, so you finally have that headlight, taillight, marker light, whatever-light in place. Now, you need one for the opposite side. Never fear, however, because there's a quite simple way of figuring out how to exactly place the other side's flare. Remember above, when it was stated, \"these two should be logically between 0 and 1\" about offset-X and offset-Y? Well, anyway, once you have the first flare placed, just use that same exact placement line again, but this time, subtract whatever offset-X you used on the first flare from 1.0. Example: say we placed this headlight: flares ;RefNode,X,Y,OffsetX,OffsetY, Type, ControlNumber, BlinkDelay, size MaterialName 0,10,1,0.345,0.55,f That'd be the left side. To get the right side, we'd have to take 0.345 and subtract it from 1.0 to get 0.655. Then, we use 0.655 for the right side's offset-X. Since we want the right side flare to be at the same height as the left side, we use the same offset-Y. So, in turn, it'd look like this: flares ;RefNode,X,Y,OffsetX,OffsetY, Type, ControlNumber, BlinkDelay, size MaterialName 0,10,1,0.345,0.55,f 0,10,1,0.655,0.55,f This guide uses headlamps as an example, but this technique can be used to place any type of flare. Troubleshooting Flares \u00b6 Should the flare seem to stick to the interior of the vehicle when you select REF, X and Y nodes from the left side of the chassis, just use three nodes directly opposite on the right side of the chassis instead. This should thereby make the flare stick to the outside of the vehicle. If you had to add nodes to a vehicle to place flares, and the flares seem to swing around or fall to the ground, ensure that you tied the said nodes into the frame of the vehicle with beams. If a flare isn't illuminating when you attempt to turn it on, verify that the syntax is correct; the flare line has the correct REF, X & Y nodes; that it is of the correct type; and that the control number (if it's a user-controlled light) is correct. The flare could be showing up inside the vehicle, check the wireframe (hit K). If this is the case, see above. Custom flares \u00b6 Some times, default flares get a little boring, because there are not enough flash patterns or not enough colors. In this tutorial, you will learn how to make your own flare texture and your own flash patterns. If you want to make your own custom flare textures, you will need a decent photo-editing program. Making your flare texture \u00b6 (You only need this step if you want to make your own flare texture/color. If you will use default flares, skip to step 3) Open up a new document in your photo-editing software. Make the background transparent, and make it 40 pixels wide and 40 pixels high. Right after that, pick a color for your flare. I will do blue, because I want blue flashers on my vehicle. So I will select the gradient tool and make a small light effect. (Note I zoomed in a little bit) Remember to save your textures as Portable Network Graphics (PNG) Then, save it as a name you will remember, such as Flare1 or Flash1 . For this tutorial, I will go with Flash1 . Following that step, you must make another light effect, but 100% transparent. So create a new file in Photoshop with the dimensions and settings above, then simply save it as Flash2 . This is needed because there needs to be an invisible flash when the light is off/deactivated. Once you have saved the flashes, put them into the vehicle's .zip file you will be editing. The Material file and the Material code \u00b6 Locate the .material file in your vehicles .ZIP folder and open it with notepad. You will need to copy and paste the following code below... material tracks/<a name for your new flare> { receive_shadows off technique { pass { lighting off scene_blend alpha_blend alpha_rejection greater 2 depth_write off //depth_check off texture_unit { anim_texture <the on image> <the off image> <animation length> } } } } (Thanks to Turbocharger for providing the code) ... Anyways, paste that to the bottom of your .material file of your vehicle. If you inspect the code provided, you will see inserts where to put names. For example, where it says <A name for your new flare> will be the name of your custom flare. I would call it the same as my texture name, Flash1. Then where it says <on image> and <off image> , put what it says. For the on, put Flash1.png and for the off, put Flash2.png And for animation length, put how long you want them to flash. I would test values before I got it perfect. After filling in the missing spaces, your .material code should look like this: material tracks/Flash1 { receive_shadows off technique { pass { lighting off scene_blend alpha_blend alpha_rejection greater 2 depth_write off //depth_check off texture_unit { anim_texture Flash1.png Flash2.png .5 } } } } Save your .material file after completing this. Editing the truck file \u00b6 Open the .truck file, and find the flares section. To test these flashes, I would use the headlights as an example. So copy the headlight codes, and paste them below. You may have to change them from headlights, to custom flares. So if you see this in the headlight line: f, -1, you need to change that to: u, 1 because that makes it a user controlled flare (A flare you activate by pressing Ctrl+1) Then, instead of end of the headlight code saying default, change it to: tracks/Flash1 so it flashes your custom flare pattern. Once you test it in game, it is a simple on/off flashing pattern. Lets go one step further \u00b6 Now that you can easily make an off/on flashing pattern, let's get more complex. Get back into the .material file, copy the custom flare section, and paste it below. Now switch/reverse the and image, and call the pattern Flash2. Now, open up the .truck file, and look at only ONE of the new flashing headlights, and change it's material name to tracks/Flash2. Now, see it ingame, it will be a wig-wag pattern. Easy as that. There is a rule when it comes to making custom flashes: When Flash1 is on, Flash2 is off. When Flash1 is off, Flash2 is on. You can make a traffic advisor using this rule, or strobes, or anything you like. Just refer to this tutorial and be creative.","title":"Flares"},{"location":"vehicle-creation/flares/#flares-how-to-add-lights","text":"Before we begin, we need to ensure some basic understanding of flares, nodes, and planes (no, not the flying type).","title":"Flares (how to add lights)"},{"location":"vehicle-creation/flares/#the-definition-of-a-flare","text":"Flares are basically lights that originate from a set of chosen nodes, which can be manipulated via the appropriate values in the .truck , .load , .trailer , . boat or .plane file. There are multiple types of flares, ranging from brake lights, to turn signals, to headlights, to specialty lighting.","title":"The Definition of a Flare"},{"location":"vehicle-creation/flares/#the-coordinate-plane","text":"Flares operate on a different coordinate plane than nodes, for some reason. Note these changes: Axis Chassis (N/B) Flares X Front to back Left to right Y Up to down Up to down Z Left to right Front/Back","title":"The Coordinate Plane"},{"location":"vehicle-creation/flares/#time-warning","text":"Furthermore, be advised that adding flares to a vehicle will sometimes take quite a bit of time, depending on the type of vehicle, number of nodes, number of flares, etc. You've been warned.","title":"Time Warning"},{"location":"vehicle-creation/flares/#preparing-the-chassis","text":"Before we begin, you'll absolutely need a truck editor, such as the Editorizer . This will allow you to see where each node is placed in relationship to the coordinate plane (X,Y,Z). Once the editor is running, and is open to the truck of your choice (It's suggested hat one starts out with something simple, such as the old Cartrailer.load, which can be found on the Repository) You'll need to select the checkbox up at the top that says, Print Node Numbers This is pretty self-explanatory, as you'll need three node numbers later on to add your flares. This next step can be challenging, depending on how many nodes and beams are present on the selected vehicle. You'll need to find three nodes close to where you want them on the vehicle. If you're adding brake/turn/head lights, it's suggested that you start with the lower lefthand corner of the front or back chassis, writing that node number on a piece of paper (this'll be your reference or REF node), then write down the node directly above it (this'll be your Y), and then finally, write the number of the node directly to the right of it (this'll be your X). If you cannot find REF,X,Y nodes because they aren't where you want the lights (e.g. you're working on the school bus, which has the tail lights quite a bit above the bumper), you can add three nodes, in the same fashion as noted above, and use them to base your flares off of, but that's too advanced to go in this tutorial.","title":"Preparing the chassis"},{"location":"vehicle-creation/flares/#getting-to-know-notepad","text":"Next up is man's best friend--the Windows notepad. If you're using another operating system, and/or another editor, that's fine, as long as it can save in ANSI format--it'll save you problems later on. Whatever you do, do not use MS Word/Wordpad/OpenOffice/AbiWord etc. You'll need to open up the vehicle or load of choice with the aforementioned application (notepad or compliant editor). Here, you'll need to add a flare section Once the line \"flares\" is added, you'll need to hit enter once, starting a new section, where it's advised you paste the syntax: flares ;RefNode,X,Y,OffsetX,OffsetY, Type, ControlNumber, BlinkDelay, size MaterialName","title":"Getting to Know Notepad"},{"location":"vehicle-creation/flares/#tutorial","text":"So imagine a flat plane with 4 nodes, the direction of the planes face up, down, left or right determines where your flare will be. There are two ways to do this. First way : flares 219,218,220,0.0,0.0,f,-1,0,0.50, default The first node ( 219 ) is where the flare comes from and the other 2 ( 218 , 220 ) determine whether it faces front or back of the plane . The 1 st image shows my plane nodes 0 , 1 , 217 , 218 The 2 nd image shows the nodes where my flares are going to be placed (optional to have them or not, just there to make things more precise and save time). The 3 rd image shows the placement for the left headlight, the first node 219 is where the flare comes from and 217 , 218 makes it face frontwards, if I did 218 , 217 the flare would face the other way. The 4 th image shows the placement for the right headlight, the first node 220 is where the flare comes from and 219 , 217 makes it face frontwards. To do the rest of the headlight flares, all I change is the first node, but keep the other two nodes depending on the side you want it. The other way to do it is without the nodes where the headlights would be (you need to move the flare with the the red marked numbers). 219,218,220, 0.0 , 0.0 ,f,-1,0,0.50, default All you would do it replace the first node, so instead of 219 , it would be 0 and then you would move the flare to the left. flares 219,218,220,0.0,0.0,f,-1,0,0.50, default flares 0,218,220,0.0,0.0,f,-1,0,0.50, default Same thing apply for rear lights, top lights, side lights, just needs to have a plane, doesn't matter how big or how small the plane is since you can move the flare with the red marked numbers.","title":"Tutorial"},{"location":"vehicle-creation/flares/#syntax","text":"Borrowed from Truck file format : Reference node : Node ID ; Node which defines origin of flare-placement coordinate system X axis node : Node ID ; Node which defines X-axis of flare-placement coordinate system Y axis node : Node ID ; Node which defines Y-axis of flare-placement coordinate system Flare X offset : Real number ; Flare position on X axis in % of distance from ref-node to X-node Flare Y offset : Real number ; Flare position on Y axis in % of distance from ref-node to Y-node This defines where the light flares will be. It is positioned in relation to 3 nodes of the chassis. One node is the reference node, and the two others define a base (x,y). So the flare is in the plane defined by the 3 nodes, and is placed relative to the reference node by adding a fraction of the vectors ref-x and ref-y. The three first parameters are the 3 nodes numbers (ref,x,y) and the two next gives what amount of ref-x and ref-y to add to displace the flare point (these two should be logically between 0 and 1, or else that means you use the wrong base triangle and if the body flexes too much the flare will not stick to the body correctly). Basically, OffsetX/Y means that a fraction of X and Y will be added to the Reference node, which should be a corner, with a Y node above it, and an X node to the right or left of it. It's a bit easier, however, if it's in a left corner, than a right. Example (* = node, + = flare location): * + * * Hint: Use the material name tracks/aimflare for help in positioning a flare. Alright, back on topic: below the syntax, you should begin listing your nodes, keeping in mind their location on the vehicle, and the coordinate plane. You'll probably need to save, open up RoR, and test out the flares quite a few times before the placement of the flare is perfect.","title":"Syntax"},{"location":"vehicle-creation/flares/#adding-symmetrical-flares","text":"Okay, so you finally have that headlight, taillight, marker light, whatever-light in place. Now, you need one for the opposite side. Never fear, however, because there's a quite simple way of figuring out how to exactly place the other side's flare. Remember above, when it was stated, \"these two should be logically between 0 and 1\" about offset-X and offset-Y? Well, anyway, once you have the first flare placed, just use that same exact placement line again, but this time, subtract whatever offset-X you used on the first flare from 1.0. Example: say we placed this headlight: flares ;RefNode,X,Y,OffsetX,OffsetY, Type, ControlNumber, BlinkDelay, size MaterialName 0,10,1,0.345,0.55,f That'd be the left side. To get the right side, we'd have to take 0.345 and subtract it from 1.0 to get 0.655. Then, we use 0.655 for the right side's offset-X. Since we want the right side flare to be at the same height as the left side, we use the same offset-Y. So, in turn, it'd look like this: flares ;RefNode,X,Y,OffsetX,OffsetY, Type, ControlNumber, BlinkDelay, size MaterialName 0,10,1,0.345,0.55,f 0,10,1,0.655,0.55,f This guide uses headlamps as an example, but this technique can be used to place any type of flare.","title":"Adding Symmetrical Flares"},{"location":"vehicle-creation/flares/#troubleshooting-flares","text":"Should the flare seem to stick to the interior of the vehicle when you select REF, X and Y nodes from the left side of the chassis, just use three nodes directly opposite on the right side of the chassis instead. This should thereby make the flare stick to the outside of the vehicle. If you had to add nodes to a vehicle to place flares, and the flares seem to swing around or fall to the ground, ensure that you tied the said nodes into the frame of the vehicle with beams. If a flare isn't illuminating when you attempt to turn it on, verify that the syntax is correct; the flare line has the correct REF, X & Y nodes; that it is of the correct type; and that the control number (if it's a user-controlled light) is correct. The flare could be showing up inside the vehicle, check the wireframe (hit K). If this is the case, see above.","title":"Troubleshooting Flares"},{"location":"vehicle-creation/flares/#custom-flares","text":"Some times, default flares get a little boring, because there are not enough flash patterns or not enough colors. In this tutorial, you will learn how to make your own flare texture and your own flash patterns. If you want to make your own custom flare textures, you will need a decent photo-editing program.","title":"Custom flares"},{"location":"vehicle-creation/flares/#making-your-flare-texture","text":"(You only need this step if you want to make your own flare texture/color. If you will use default flares, skip to step 3) Open up a new document in your photo-editing software. Make the background transparent, and make it 40 pixels wide and 40 pixels high. Right after that, pick a color for your flare. I will do blue, because I want blue flashers on my vehicle. So I will select the gradient tool and make a small light effect. (Note I zoomed in a little bit) Remember to save your textures as Portable Network Graphics (PNG) Then, save it as a name you will remember, such as Flare1 or Flash1 . For this tutorial, I will go with Flash1 . Following that step, you must make another light effect, but 100% transparent. So create a new file in Photoshop with the dimensions and settings above, then simply save it as Flash2 . This is needed because there needs to be an invisible flash when the light is off/deactivated. Once you have saved the flashes, put them into the vehicle's .zip file you will be editing.","title":"Making your flare texture"},{"location":"vehicle-creation/flares/#the-material-file-and-the-material-code","text":"Locate the .material file in your vehicles .ZIP folder and open it with notepad. You will need to copy and paste the following code below... material tracks/<a name for your new flare> { receive_shadows off technique { pass { lighting off scene_blend alpha_blend alpha_rejection greater 2 depth_write off //depth_check off texture_unit { anim_texture <the on image> <the off image> <animation length> } } } } (Thanks to Turbocharger for providing the code) ... Anyways, paste that to the bottom of your .material file of your vehicle. If you inspect the code provided, you will see inserts where to put names. For example, where it says <A name for your new flare> will be the name of your custom flare. I would call it the same as my texture name, Flash1. Then where it says <on image> and <off image> , put what it says. For the on, put Flash1.png and for the off, put Flash2.png And for animation length, put how long you want them to flash. I would test values before I got it perfect. After filling in the missing spaces, your .material code should look like this: material tracks/Flash1 { receive_shadows off technique { pass { lighting off scene_blend alpha_blend alpha_rejection greater 2 depth_write off //depth_check off texture_unit { anim_texture Flash1.png Flash2.png .5 } } } } Save your .material file after completing this.","title":"The Material file and the Material code"},{"location":"vehicle-creation/flares/#editing-the-truck-file","text":"Open the .truck file, and find the flares section. To test these flashes, I would use the headlights as an example. So copy the headlight codes, and paste them below. You may have to change them from headlights, to custom flares. So if you see this in the headlight line: f, -1, you need to change that to: u, 1 because that makes it a user controlled flare (A flare you activate by pressing Ctrl+1) Then, instead of end of the headlight code saying default, change it to: tracks/Flash1 so it flashes your custom flare pattern. Once you test it in game, it is a simple on/off flashing pattern.","title":"Editing the truck file"},{"location":"vehicle-creation/flares/#lets-go-one-step-further","text":"Now that you can easily make an off/on flashing pattern, let's get more complex. Get back into the .material file, copy the custom flare section, and paste it below. Now switch/reverse the and image, and call the pattern Flash2. Now, open up the .truck file, and look at only ONE of the new flashing headlights, and change it's material name to tracks/Flash2. Now, see it ingame, it will be a wig-wag pattern. Easy as that. There is a rule when it comes to making custom flashes: When Flash1 is on, Flash2 is off. When Flash1 is off, Flash2 is on. You can make a traffic advisor using this rule, or strobes, or anything you like. Just refer to this tutorial and be creative.","title":"Lets go one step further"},{"location":"vehicle-creation/flexbody-wheels/","text":"Flexbody wheels \u00b6 .smallNumberField { background: #D8D8D8; color: black; } } // version control necessary in case I change the storage format. var $version = '0.1'; // $storage contains all form info in order: // version, #wheels, wrays, cnodes, cams // in, out, name * max ## wheels used var $storage = new Array(); var $wheelinf = new Array(\"inside\", \"outside\", \"mesh\"); // and $curwheels stores ## of wheels, so updates // know how many to attempt to store var $curwheels = 0; function init() { if (localStorage.getItem(\"storage\")) { var $local = JSON.parse(localStorage.getItem(\"storage\")); if ($local[0] == $version) { $storage = $local; RetrieveWheels(0); BuildFormFields($storage[1]); document.getElementById('fillin').innerHTML = \"Stored data loaded.\"; } } } function BuildFormFields($amount) { var $container = document.getElementById('wheelFields'), $item, $field, $i; WriteWheels($curwheels); // do this after saving whatever exists. $curwheels = $amount; $container.innerHTML = ''; for ($i = 0; $i < $amount; $i++) { $item = document.createElement('div'); $item.style.margin = '3px'; $field = document.createElement('span'); $field.innerHTML = 'Wheel ' + ($i + 1) + ':<br \\> inside axle node'; $field.style.marginRight = '10px'; $item.appendChild($field); $field = document.createElement('input'); $field.id = 'inside[' + $i + ']'; $field.type = 'text'; $field.style.background = '#D8D8D8'; $field.style.color = 'black'; $field.size = 3; $item.appendChild($field); $field = document.createElement('span'); $field.innerHTML = 'outside axle node'; $field.style.margin = '0px 10px'; $item.appendChild($field); $field = document.createElement('input'); $field.id = 'outside[' + $i + ']'; $field.type = 'text'; $field.style.background = '#D8D8D8'; $field.style.color = 'black'; $field.size = 3; $item.appendChild($field); $field = document.createElement('span'); $field.innerHTML = 'mesh name'; $field.style.margin = '0px 10px'; $item.appendChild($field); $field = document.createElement('input'); $field.id = 'mesh[' + $i + ']'; $field.type = 'text'; $field.style.background = '#D8D8D8'; $field.style.color = 'black'; $field.size = 15; $item.appendChild($field); $container.appendChild($item); } RetrieveWheels($curwheels); } function GenerateCode($form) { var $output = document.getElementById('fillin'); var $wrays = parseInt(document.getElementById('wrays').value, 10); var $wheels = parseInt(document.getElementById('wheels').value, 10); var $cnodes = parseInt(document.getElementById('cnodes').value, 10); var $cams = parseInt(document.getElementById('cams').value, 10); var $field, $item; $field = document.createElement('span'); $field.innerHTML = 'flexbodies <br \\>'; $field.type = 'text'; $output.innerHTML = ''; $output.appendChild($field); var $in, $out, $name, $node, $i; $node = $cnodes + $cams; for ($i = 0; $i < $wheels; $i++) { $text = '; wheel ' + ($i + 1) + '\\n'; $in = parseInt(document.getElementById('inside[' + $i + ']').value, 10); $out = parseInt(document.getElementById('outside[' + $i + ']').value, 10); $name = document.getElementById('mesh[' + $i + ']').value; $text = $text + $in + ', ' + $out + ', ' + ($node + 1) + ', 0, 0, 0, 0, 0, 0, ' + $name + '\\n'; $text = $text + 'forset ' + $out + ', ' + $in + ', ' + ($node + 1) + '-' + ($node + 2 * $wrays) + '\\n\\n'; $node = $node + 2 * $wrays; $field = document.createTextNode($text, false); $output.appendChild($field); } WriteWheels($wheels); localStorage.setItem(\"storage\", JSON.stringify($storage)); } function WriteWheels($nwhl) { // WriteWheels moves current form info into the array // $storage contains all form info in order: // #wheels, wrays, cnodes, cams // in, out, name * max ## wheels used $storage[0] = $version; $storage[1] = document.getElementById('wheels').value; $storage[2] = document.getElementById('wrays').value; $storage[3] = document.getElementById('cnodes').value; $storage[4] = document.getElementById('cams').value; var $i, $j; for ($i = 0; $i < $nwhl; $i++) { for ($j = 0; $j < $wheelinf.length; $j++) { $storage[$wheelinf.length * $i + 5 + $j] = document.getElementById($wheelinf[$j] + '[' + $i + ']').value; } } } function RetrieveWheels($nwhl) { // RetrieveWheels moves array into current form info. // first the static ones document.getElementById('wheels').value = $storage[1]; document.getElementById('wrays').value = $storage[2]; document.getElementById('cnodes').value = $storage[3]; document.getElementById('cams').value = $storage[4]; var $i, $j; var $len = ($storage.length - 5) / $wheelinf.length; for ($i = 0; $i < Math.min($nwhl, $len); $i++) { for ($j = 0; $j < $wheelinf.length; $j++) { document.getElementById($wheelinf[$j] + '[' + $i + ']').value = $storage[$wheelinf.length * $i + 5 + $j]; } } } Number of wheels Wheel rays Chassis nodes Cameras before wheel section var readyStateCheckInterval = setInterval(function () { if (document.readyState === \"complete\") { init(); clearInterval(readyStateCheckInterval); } }, 10); What is this? \u00b6 By default, Rigs of Rods's meshwheels sections generate a tire using a texture. In order to use a 3D tire mesh, you have to place the tire meshes using flexbodies or props . This tool simplifies that process by generating the flexbody code for you. Some addon parts require you to generate flexbody wheels as the tire mesh is separate. Not to be confused with flexbodywheels , which provides this feature. Instructions \u00b6 First, make sure the tire material in the meshwheels section is set to tracks/trans , for example: meshwheels ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, side, meshname material 0.35, 0.21, 0.5, 14, 32, 33, 34, 1, 1, 18, 200.0, 300000.0, 2000.0, l, dodgechargerwheel.mesh tracks/trans 0.35, 0.21, 0.5, 14, 34, 35, 33, 1, 1, 26, 200.0, 300000.0, 2000.0, r, dodgechargerwheel.mesh tracks/trans 0.35, 0.21, 0.5, 14, 44, 45, 9999, 1, 0, 53, 200.0, 350000.0, 2000.0, l, dodgechargerwheel.mesh tracks/trans 0.35, 0.21, 0.5, 14, 46, 47, 9999, 1, 0, 50, 200.0, 350000.0, 2000.0, r, dodgechargerwheel.mesh tracks/trans Notice the tracks/trans at the end of the line. This makes the default tire invisible. Explanation of each option: Number of wheels - Amount of wheels the vehicle has. Wheel rays - The number of \u2018pie pieces\u2019, or corners, that make up the wheel. In the above example, numrays is set to 14 . Chassis nodes - Amount of nodes the vehicle has. Just set the last node ID at the bottom of the nodes section. Cameras before wheel section - Amount of cameras the vehicle has. Most only have 1, while others (such as the Gavrils) have 3. Inside axle node - The inner axle node. In the above example, the first wheel's node1 is 32 . Outside axle node - The outer axle node. In the above example, the first wheel's node2 is 33 . Mesh name - The mesh name of the tire, with .mesh file extension. Once you fill in all options, click Generate code to generate the flexbodies. All that's left to do is just paste the generated flexbody lines below the meshwheels section. Complete example for the Burnside Race: meshwheels2 ;tire_radius, rim_radius,width,numrays,node1,node2,snode,braked,propulsed, arm, mass, spring, damping, side, meshname material 0.35, 0.233, 0.265, 14, 44, 46, 9999, 4, 1, 131, 46.0, 100000.0, 900.0, r, ICD_AEZ_Forged_16.mesh tracks/trans 0.35, 0.233, 0.265, 14, 45, 47, 9999, 4, 1, 134, 46.0, 100000.0, 900.0, l, ICD_AEZ_Forged_16.mesh tracks/trans set_beam_defaults 3300000, 90, 2000000, 2500000 set_node_defaults -1, 1.14, -1, -1 0.35, 0.233, 0.265, 14, 66, 67, 69, 1, 1, 62, 46.0, 125000.0, 900.0, r, ICD_AEZ_Forged_16.mesh tracks/trans 0.35, 0.233, 0.265, 14, 69, 70, 67, 1, 1, 63, 46.0, 125000.0, 900.0, l, ICD_AEZ_Forged_16.mesh tracks/trans flexbodies ; wheel 1 44, 46, 249, 0.5, 0, 0, 0, 0, 0, ICD_Kumho_ECSTA_SPT_16.mesh forset 46, 44, 249-276 ; wheel 2 45, 47, 277, 0.5, 0, 0, 0, 0, 0, ICD_Kumho_ECSTA_SPT_16.mesh forset 47, 45, 277-304 ; wheel 3 66, 67, 305, 0.5, 0, 0, 0, 0, 0, ICD_Kumho_ECSTA_SPT_16.mesh forset 67, 66, 305-332 ; wheel 4 69, 70, 333, 0.5, 0, 0, 0, 0, 0, ICD_Kumho_ECSTA_SPT_16.mesh forset 70, 69, 333-360 When you click Generate code , the current settings attempt to be stored in the browser, so that when revisiting the page, they are retrieved. This only allows storage of one truck's settings at a time - hopefully that's enough for development purposes. Troubleshooting \u00b6 If the tire sticks too far out/in, adjust the X offset . In the above Burnside Race example, the offset is set to 0.5 . If the tire glitches/isn't attached to the wheel, you have set the wrong node/camera count and/or wheel nodes. Credits \u00b6 This was originally a spreadsheet by Fat-Alfie on the Rigs of Rods forum. Translated into html/javascript form by nmurdoch.ca to make it more convenient.","title":"Flexbody wheels"},{"location":"vehicle-creation/flexbody-wheels/#flexbody-wheels","text":".smallNumberField { background: #D8D8D8; color: black; } } // version control necessary in case I change the storage format. var $version = '0.1'; // $storage contains all form info in order: // version, #wheels, wrays, cnodes, cams // in, out, name * max ## wheels used var $storage = new Array(); var $wheelinf = new Array(\"inside\", \"outside\", \"mesh\"); // and $curwheels stores ## of wheels, so updates // know how many to attempt to store var $curwheels = 0; function init() { if (localStorage.getItem(\"storage\")) { var $local = JSON.parse(localStorage.getItem(\"storage\")); if ($local[0] == $version) { $storage = $local; RetrieveWheels(0); BuildFormFields($storage[1]); document.getElementById('fillin').innerHTML = \"Stored data loaded.\"; } } } function BuildFormFields($amount) { var $container = document.getElementById('wheelFields'), $item, $field, $i; WriteWheels($curwheels); // do this after saving whatever exists. $curwheels = $amount; $container.innerHTML = ''; for ($i = 0; $i < $amount; $i++) { $item = document.createElement('div'); $item.style.margin = '3px'; $field = document.createElement('span'); $field.innerHTML = 'Wheel ' + ($i + 1) + ':<br \\> inside axle node'; $field.style.marginRight = '10px'; $item.appendChild($field); $field = document.createElement('input'); $field.id = 'inside[' + $i + ']'; $field.type = 'text'; $field.style.background = '#D8D8D8'; $field.style.color = 'black'; $field.size = 3; $item.appendChild($field); $field = document.createElement('span'); $field.innerHTML = 'outside axle node'; $field.style.margin = '0px 10px'; $item.appendChild($field); $field = document.createElement('input'); $field.id = 'outside[' + $i + ']'; $field.type = 'text'; $field.style.background = '#D8D8D8'; $field.style.color = 'black'; $field.size = 3; $item.appendChild($field); $field = document.createElement('span'); $field.innerHTML = 'mesh name'; $field.style.margin = '0px 10px'; $item.appendChild($field); $field = document.createElement('input'); $field.id = 'mesh[' + $i + ']'; $field.type = 'text'; $field.style.background = '#D8D8D8'; $field.style.color = 'black'; $field.size = 15; $item.appendChild($field); $container.appendChild($item); } RetrieveWheels($curwheels); } function GenerateCode($form) { var $output = document.getElementById('fillin'); var $wrays = parseInt(document.getElementById('wrays').value, 10); var $wheels = parseInt(document.getElementById('wheels').value, 10); var $cnodes = parseInt(document.getElementById('cnodes').value, 10); var $cams = parseInt(document.getElementById('cams').value, 10); var $field, $item; $field = document.createElement('span'); $field.innerHTML = 'flexbodies <br \\>'; $field.type = 'text'; $output.innerHTML = ''; $output.appendChild($field); var $in, $out, $name, $node, $i; $node = $cnodes + $cams; for ($i = 0; $i < $wheels; $i++) { $text = '; wheel ' + ($i + 1) + '\\n'; $in = parseInt(document.getElementById('inside[' + $i + ']').value, 10); $out = parseInt(document.getElementById('outside[' + $i + ']').value, 10); $name = document.getElementById('mesh[' + $i + ']').value; $text = $text + $in + ', ' + $out + ', ' + ($node + 1) + ', 0, 0, 0, 0, 0, 0, ' + $name + '\\n'; $text = $text + 'forset ' + $out + ', ' + $in + ', ' + ($node + 1) + '-' + ($node + 2 * $wrays) + '\\n\\n'; $node = $node + 2 * $wrays; $field = document.createTextNode($text, false); $output.appendChild($field); } WriteWheels($wheels); localStorage.setItem(\"storage\", JSON.stringify($storage)); } function WriteWheels($nwhl) { // WriteWheels moves current form info into the array // $storage contains all form info in order: // #wheels, wrays, cnodes, cams // in, out, name * max ## wheels used $storage[0] = $version; $storage[1] = document.getElementById('wheels').value; $storage[2] = document.getElementById('wrays').value; $storage[3] = document.getElementById('cnodes').value; $storage[4] = document.getElementById('cams').value; var $i, $j; for ($i = 0; $i < $nwhl; $i++) { for ($j = 0; $j < $wheelinf.length; $j++) { $storage[$wheelinf.length * $i + 5 + $j] = document.getElementById($wheelinf[$j] + '[' + $i + ']').value; } } } function RetrieveWheels($nwhl) { // RetrieveWheels moves array into current form info. // first the static ones document.getElementById('wheels').value = $storage[1]; document.getElementById('wrays').value = $storage[2]; document.getElementById('cnodes').value = $storage[3]; document.getElementById('cams').value = $storage[4]; var $i, $j; var $len = ($storage.length - 5) / $wheelinf.length; for ($i = 0; $i < Math.min($nwhl, $len); $i++) { for ($j = 0; $j < $wheelinf.length; $j++) { document.getElementById($wheelinf[$j] + '[' + $i + ']').value = $storage[$wheelinf.length * $i + 5 + $j]; } } } Number of wheels Wheel rays Chassis nodes Cameras before wheel section var readyStateCheckInterval = setInterval(function () { if (document.readyState === \"complete\") { init(); clearInterval(readyStateCheckInterval); } }, 10);","title":"Flexbody wheels"},{"location":"vehicle-creation/flexbody-wheels/#what-is-this","text":"By default, Rigs of Rods's meshwheels sections generate a tire using a texture. In order to use a 3D tire mesh, you have to place the tire meshes using flexbodies or props . This tool simplifies that process by generating the flexbody code for you. Some addon parts require you to generate flexbody wheels as the tire mesh is separate. Not to be confused with flexbodywheels , which provides this feature.","title":"What is this?"},{"location":"vehicle-creation/flexbody-wheels/#instructions","text":"First, make sure the tire material in the meshwheels section is set to tracks/trans , for example: meshwheels ;tire_radius, rim_radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, side, meshname material 0.35, 0.21, 0.5, 14, 32, 33, 34, 1, 1, 18, 200.0, 300000.0, 2000.0, l, dodgechargerwheel.mesh tracks/trans 0.35, 0.21, 0.5, 14, 34, 35, 33, 1, 1, 26, 200.0, 300000.0, 2000.0, r, dodgechargerwheel.mesh tracks/trans 0.35, 0.21, 0.5, 14, 44, 45, 9999, 1, 0, 53, 200.0, 350000.0, 2000.0, l, dodgechargerwheel.mesh tracks/trans 0.35, 0.21, 0.5, 14, 46, 47, 9999, 1, 0, 50, 200.0, 350000.0, 2000.0, r, dodgechargerwheel.mesh tracks/trans Notice the tracks/trans at the end of the line. This makes the default tire invisible. Explanation of each option: Number of wheels - Amount of wheels the vehicle has. Wheel rays - The number of \u2018pie pieces\u2019, or corners, that make up the wheel. In the above example, numrays is set to 14 . Chassis nodes - Amount of nodes the vehicle has. Just set the last node ID at the bottom of the nodes section. Cameras before wheel section - Amount of cameras the vehicle has. Most only have 1, while others (such as the Gavrils) have 3. Inside axle node - The inner axle node. In the above example, the first wheel's node1 is 32 . Outside axle node - The outer axle node. In the above example, the first wheel's node2 is 33 . Mesh name - The mesh name of the tire, with .mesh file extension. Once you fill in all options, click Generate code to generate the flexbodies. All that's left to do is just paste the generated flexbody lines below the meshwheels section. Complete example for the Burnside Race: meshwheels2 ;tire_radius, rim_radius,width,numrays,node1,node2,snode,braked,propulsed, arm, mass, spring, damping, side, meshname material 0.35, 0.233, 0.265, 14, 44, 46, 9999, 4, 1, 131, 46.0, 100000.0, 900.0, r, ICD_AEZ_Forged_16.mesh tracks/trans 0.35, 0.233, 0.265, 14, 45, 47, 9999, 4, 1, 134, 46.0, 100000.0, 900.0, l, ICD_AEZ_Forged_16.mesh tracks/trans set_beam_defaults 3300000, 90, 2000000, 2500000 set_node_defaults -1, 1.14, -1, -1 0.35, 0.233, 0.265, 14, 66, 67, 69, 1, 1, 62, 46.0, 125000.0, 900.0, r, ICD_AEZ_Forged_16.mesh tracks/trans 0.35, 0.233, 0.265, 14, 69, 70, 67, 1, 1, 63, 46.0, 125000.0, 900.0, l, ICD_AEZ_Forged_16.mesh tracks/trans flexbodies ; wheel 1 44, 46, 249, 0.5, 0, 0, 0, 0, 0, ICD_Kumho_ECSTA_SPT_16.mesh forset 46, 44, 249-276 ; wheel 2 45, 47, 277, 0.5, 0, 0, 0, 0, 0, ICD_Kumho_ECSTA_SPT_16.mesh forset 47, 45, 277-304 ; wheel 3 66, 67, 305, 0.5, 0, 0, 0, 0, 0, ICD_Kumho_ECSTA_SPT_16.mesh forset 67, 66, 305-332 ; wheel 4 69, 70, 333, 0.5, 0, 0, 0, 0, 0, ICD_Kumho_ECSTA_SPT_16.mesh forset 70, 69, 333-360 When you click Generate code , the current settings attempt to be stored in the browser, so that when revisiting the page, they are retrieved. This only allows storage of one truck's settings at a time - hopefully that's enough for development purposes.","title":"Instructions"},{"location":"vehicle-creation/flexbody-wheels/#troubleshooting","text":"If the tire sticks too far out/in, adjust the X offset . In the above Burnside Race example, the offset is set to 0.5 . If the tire glitches/isn't attached to the wheel, you have set the wrong node/camera count and/or wheel nodes.","title":"Troubleshooting"},{"location":"vehicle-creation/flexbody-wheels/#credits","text":"This was originally a spreadsheet by Fat-Alfie on the Rigs of Rods forum. Translated into html/javascript form by nmurdoch.ca to make it more convenient.","title":"Credits"},{"location":"vehicle-creation/making-custom-hud/","text":"Making custom HUD \u00b6 Danger This feature is being redone, see this GitHub pull request for details. This page will mostly remain relevant for the new system. Fundamental Concepts \u00b6 The GUI is described in a Layout file (*.layout). It is an XML file format. The Layout Files should be edited by the provided GUI Editor The GUI is linked with RoR over \"User Data\" Strings. These are Strings that can be set-up in the LayoutEditors Widget Properties. A link is a connection between the GUI Elements and RoR game values. The controls are separated via Layers, so they can overlap each other in a defined way: Needles should go on top ( Main Layer), static background images to the bottom ( Back Layer) Required Software \u00b6 Gui Editor 4 (old version: GUI Editor 2 ) NOTE: some animations will not work exactly like in RoR yet. We are working on fixing this. Workflow \u00b6 Create graphics of gauges and needles Start GUIEditor and create the controls using your graphics Save the .layout and image files in your truck zip and use guisettings to integrate it with your vehicle. Test in RoR and fix in GUIEditor Available animations \u00b6 rotate \u00b6 Rotates a single image around its center Input type: float (real number) FPS impact: light Internals: based on MyGUI control 'RotatingSkin' Arguments: min - the minimum rotation angle max - the maximum rotation angle vmin - the value at the minimum angle vmax - the value at the maximum angle Example for a simple speedo gauge: anim=rotate min=-104 max=110 vmin=0 vmax=120 link=speedo_kph lamp \u00b6 Switches between two images Input type: boolean (true/false) FPS impact: light Internals: based on MyGUI control 'ImageBox' Arguments: texture - the basename of the texture to use The resulting images are called [texture]-on.png and [texture]-off.png Example for a simple clutch lamp (images are clutch-on.png and clutch-off.png): anim=lamp texture=clutch link=clutchLamp Lamps can have conditions on when they switch states. Currently there is only support for < and > comparisons. For example this lamp will be \"on\" for speeds over 50kph: anim=lamp texture=clutch link=speedo_kph&gt;50 series \u00b6 Switches between N images Input type: integer (whole number) FPS impact: light Internals: based on MyGUI control 'ImageBox' Arguments: texture - the basename of the texture to use The resulting images are called <texture>-<number>.png Example for a simple secured lamp (images are secured-0.png, secured-1.png and secured-2.png): anim=series texture=secured link=ties_mode scale \u00b6 Scales one image Input type: float (real number) FPS impact: heavier Internals: based on MyGUI control 'ImageBox' Arguments: min - the minimum size to add max - the maximum size to add vmin - the value at the minimum size vmax - the value at the maximum size direction - what side to scale up. possible values: up, down, left, right Example for a simple speedo bar (which is 200 pixels width): anim=scale min=-200 max=0 vmin=0 vmax=120 direction=right link=speedo_kph translate \u00b6 Moves around one image Input type: float (real number) FPS impact: heavier Internals: based on MyGUI control 'ImageBox' Arguments: min - the minimum size to translate max - the maximum size to translate vmin - the value at the minimum translation vmax - the value at the maximum translation direction - what side to move to. possible values: up, down, left, right Example for a simple speedo bar: anim=translate min=0 max=200 vmin=0 vmax=120 direction=right link=speedo_kph textstring / textformat \u00b6 Displays text Input type: text (max 250 characters) FPS impact: light Internals: based on MyGUI control 'TextBox' Arguments: format - (optional) the display format that should be used, see here for more info . Example for a simple speedo display: anim= textstring or textformat format=%04.0f km/h link=speedo_kph Input sources \u00b6 Method Description Type / Values / Ranges Active when rpm Engine RPM Float: 0 - max truck RPM Engine exists speedo_kph Wheel Speed in kilometer per hour Float: unlimited, minus if driving backwards Always speedo_mph Wheel Speed in miles per hour Float: unlimited, minus if driving backwards Always engine_turbo Engines Turbo PSI value Float: unlimited Engine exists engine_ignition true if engine has contact, false if not Boolean: true or false Engine exists engine_battery true if engine has contact and is nor running, false if not Boolean: true or false Engine exists engine_clutch_warning true if engine torque is greater than the clutch force, false if not Boolean: true or false Engine exists engine_gear Number of available gears, does not change Integer: -1 for first reverse gear, 0 for neutral, 1 for first gear, etc Engine exists engine_num_gear Gear number, negative for reverse Integer: i.e. 6 for six usable gears Engine exists engine_gear_string String that shows the gears in relation to the number of gears Character: \" / \" or \"N\" or \"R\" Engine exists engine_auto_gear Automatic gear (R/N/D/\u00bd) Integer: same as gear but for automatic Engine exists engine_clutch Current clutch value Float: 0 (not pressed) to 1 (fully pressed down) Engine exists brake Current brake value Float: 0 (not pressed) to 1 (fully pressed down) Always accelerator Current accelerator value Float: 0 (not pressed) to 1 (fully pressed down) Engine exists roll Current cabin roll - values represents angle in degree Float: unlimited Always roll_corr Current cabin roll targeted by active shocks - values represents angle in degree Float: unlimited Always roll_corr_active true when the active shocks are working Boolean: true/false Always pitch Current cabin pitch - values represents angle in degree Float: unlimited Always parkingbrake true if parking brake is on Boolean: true/false Always locked true if any hooks are locked to something Boolean: true/false Always low_pressure true if hydraulics cannot work as the RPM is too low Boolean: true/false Always lights true if headlights are on Boolean: true/false Always tractioncontrol_mode TractionControl (TC) mode Integer: 0-3: 0 = not present, 1 = off, 2 = on, 3 = active Always antilockbrake_mode Anti Lock Brake (ALB) Integer: 0-3: 0 = not present, 1 = off, 2 = on, 3 = active Always ties_mode Ties locking state Integer: 0-2: 0 = not tied, 1 = prelock (currently tightening), 2 = tied (locked) Always screw_throttle_X Boat Screw Throttle. X from 0 to 5 (DD_MAX_SCREWPROP) Float: unlimited Screwprop exists screw_steer_X Boat Screw Steering direction. X from 0 to 5 (DD_MAX_SCREWPROP) Float: unlimited, -1 = left, +1 = right? Screwprop exists water_depth Depth of water below lowest node Float: unlimited Screwprop exists water_speed Speed on water in knots (1 Nautical Mile/Hour) Float: unlimited Screwprop exists aeroengine_throttle_X Airplane Engine Throttle. X from 0 to 5 (DD_MAX_AEROENGINE) Float: 0-1 Aeroengine exists aeroengine_failed_X Airplane Engine Failure. X from 0 to 5 (DD_MAX_AEROENGINE) Boolean: true if failed Aeroengine exists aeroengine_rpm_X Airplane Engine RPM. X from 0 to 5 (DD_MAX_AEROENGINE) Float: 0 to aeroengine max RPM Aeroengine exists airspeed Speed above ground in knots/hour Float: unlimited Aeroengine or wing exists wing_aoa_X Wings Angle of Attack. X from 0 to 5 (DD_MAX_WING) Float: unlimited Wing exists altitude Altitude above ground Float: unlimited Aeroengine or wing exists altitude_string Altitude above ground - string Characters: three character altitude display: \"000\" Aeroengine or wing exists signal_turnleft Left turn signal is lit. Boolean signal_turnright Right turn signal is lit. Boolean signal_warning Warning signal is lit. Boolean Quickstart \u00b6 Perhaps the easiest thing to add is a text readout, here we will add a simple readout that shows the speed of a vehicle in MPH. 1. Load up the layout editor and add a TextBox. You can do this by opening the Widgets tab, and under default you will find TextBox. Drag a TextBox out on the canvas as shown: 2. Change the properties of the TextBox. Do this in the Properties tab as shown. Align should be to a corner of the screen (Left Top here) and Layer should be \"Main\". Also add the user data properties: anim=text link=speedo_mph put the keyword (e.g. \"anim\") into the box above \"Key\" and put the value (e.g. \"text\") above the box marked \"Value.\" Then click on \"Add\" and repeat this step for all the user data properties. In the end you should have these properties for the TextBox: 3: Save the layout as \"namehere.layout\" and put the layout with the vehicle's .truck file. In the .truck file add the following lines: guisettings dashboard namehere.layout 4: Test your readout! Extra: Add these user values to format the display like this: \"xxxx.xx MPH\" format=%.2f MPH Now you have the basics of the layouteditor, move on to more advanced readouts. Let's now create a simple speedo gauge: IMPORTANT: Put your graphics into the YourMedia sub folder, so the editor can use it. Open the layout editor. Add an ImageBox in the same way that you added a TextBox in the first part of this quickstart. Go into the ImageBox's properties and put the gauge texture into the ImageTexture field. Add a RotatingSkin widget add your needle texture to it in the same way as you did previously. Add these values to the RotatingSkin as User data: anim=rotate min=-104 max=110 vmin=0 vmax=120 link=speedo_kph Save your .layout file, and move it and the images to your truck folder, and add the truck<-->.layout linkage as you did earlier in the quickstart. Test out your gauge, and make modifications as necessary.","title":"Making custom dashboard HUD"},{"location":"vehicle-creation/making-custom-hud/#making-custom-hud","text":"Danger This feature is being redone, see this GitHub pull request for details. This page will mostly remain relevant for the new system.","title":"Making custom HUD"},{"location":"vehicle-creation/making-custom-hud/#fundamental-concepts","text":"The GUI is described in a Layout file (*.layout). It is an XML file format. The Layout Files should be edited by the provided GUI Editor The GUI is linked with RoR over \"User Data\" Strings. These are Strings that can be set-up in the LayoutEditors Widget Properties. A link is a connection between the GUI Elements and RoR game values. The controls are separated via Layers, so they can overlap each other in a defined way: Needles should go on top ( Main Layer), static background images to the bottom ( Back Layer)","title":"Fundamental Concepts"},{"location":"vehicle-creation/making-custom-hud/#required-software","text":"Gui Editor 4 (old version: GUI Editor 2 ) NOTE: some animations will not work exactly like in RoR yet. We are working on fixing this.","title":"Required Software"},{"location":"vehicle-creation/making-custom-hud/#workflow","text":"Create graphics of gauges and needles Start GUIEditor and create the controls using your graphics Save the .layout and image files in your truck zip and use guisettings to integrate it with your vehicle. Test in RoR and fix in GUIEditor","title":"Workflow"},{"location":"vehicle-creation/making-custom-hud/#available-animations","text":"","title":"Available animations"},{"location":"vehicle-creation/making-custom-hud/#rotate","text":"Rotates a single image around its center Input type: float (real number) FPS impact: light Internals: based on MyGUI control 'RotatingSkin' Arguments: min - the minimum rotation angle max - the maximum rotation angle vmin - the value at the minimum angle vmax - the value at the maximum angle Example for a simple speedo gauge: anim=rotate min=-104 max=110 vmin=0 vmax=120 link=speedo_kph","title":"rotate"},{"location":"vehicle-creation/making-custom-hud/#lamp","text":"Switches between two images Input type: boolean (true/false) FPS impact: light Internals: based on MyGUI control 'ImageBox' Arguments: texture - the basename of the texture to use The resulting images are called [texture]-on.png and [texture]-off.png Example for a simple clutch lamp (images are clutch-on.png and clutch-off.png): anim=lamp texture=clutch link=clutchLamp Lamps can have conditions on when they switch states. Currently there is only support for < and > comparisons. For example this lamp will be \"on\" for speeds over 50kph: anim=lamp texture=clutch link=speedo_kph&gt;50","title":"lamp"},{"location":"vehicle-creation/making-custom-hud/#series","text":"Switches between N images Input type: integer (whole number) FPS impact: light Internals: based on MyGUI control 'ImageBox' Arguments: texture - the basename of the texture to use The resulting images are called <texture>-<number>.png Example for a simple secured lamp (images are secured-0.png, secured-1.png and secured-2.png): anim=series texture=secured link=ties_mode","title":"series"},{"location":"vehicle-creation/making-custom-hud/#scale","text":"Scales one image Input type: float (real number) FPS impact: heavier Internals: based on MyGUI control 'ImageBox' Arguments: min - the minimum size to add max - the maximum size to add vmin - the value at the minimum size vmax - the value at the maximum size direction - what side to scale up. possible values: up, down, left, right Example for a simple speedo bar (which is 200 pixels width): anim=scale min=-200 max=0 vmin=0 vmax=120 direction=right link=speedo_kph","title":"scale"},{"location":"vehicle-creation/making-custom-hud/#translate","text":"Moves around one image Input type: float (real number) FPS impact: heavier Internals: based on MyGUI control 'ImageBox' Arguments: min - the minimum size to translate max - the maximum size to translate vmin - the value at the minimum translation vmax - the value at the maximum translation direction - what side to move to. possible values: up, down, left, right Example for a simple speedo bar: anim=translate min=0 max=200 vmin=0 vmax=120 direction=right link=speedo_kph","title":"translate"},{"location":"vehicle-creation/making-custom-hud/#textstring-textformat","text":"Displays text Input type: text (max 250 characters) FPS impact: light Internals: based on MyGUI control 'TextBox' Arguments: format - (optional) the display format that should be used, see here for more info . Example for a simple speedo display: anim= textstring or textformat format=%04.0f km/h link=speedo_kph","title":"textstring / textformat"},{"location":"vehicle-creation/making-custom-hud/#input-sources","text":"Method Description Type / Values / Ranges Active when rpm Engine RPM Float: 0 - max truck RPM Engine exists speedo_kph Wheel Speed in kilometer per hour Float: unlimited, minus if driving backwards Always speedo_mph Wheel Speed in miles per hour Float: unlimited, minus if driving backwards Always engine_turbo Engines Turbo PSI value Float: unlimited Engine exists engine_ignition true if engine has contact, false if not Boolean: true or false Engine exists engine_battery true if engine has contact and is nor running, false if not Boolean: true or false Engine exists engine_clutch_warning true if engine torque is greater than the clutch force, false if not Boolean: true or false Engine exists engine_gear Number of available gears, does not change Integer: -1 for first reverse gear, 0 for neutral, 1 for first gear, etc Engine exists engine_num_gear Gear number, negative for reverse Integer: i.e. 6 for six usable gears Engine exists engine_gear_string String that shows the gears in relation to the number of gears Character: \" / \" or \"N\" or \"R\" Engine exists engine_auto_gear Automatic gear (R/N/D/\u00bd) Integer: same as gear but for automatic Engine exists engine_clutch Current clutch value Float: 0 (not pressed) to 1 (fully pressed down) Engine exists brake Current brake value Float: 0 (not pressed) to 1 (fully pressed down) Always accelerator Current accelerator value Float: 0 (not pressed) to 1 (fully pressed down) Engine exists roll Current cabin roll - values represents angle in degree Float: unlimited Always roll_corr Current cabin roll targeted by active shocks - values represents angle in degree Float: unlimited Always roll_corr_active true when the active shocks are working Boolean: true/false Always pitch Current cabin pitch - values represents angle in degree Float: unlimited Always parkingbrake true if parking brake is on Boolean: true/false Always locked true if any hooks are locked to something Boolean: true/false Always low_pressure true if hydraulics cannot work as the RPM is too low Boolean: true/false Always lights true if headlights are on Boolean: true/false Always tractioncontrol_mode TractionControl (TC) mode Integer: 0-3: 0 = not present, 1 = off, 2 = on, 3 = active Always antilockbrake_mode Anti Lock Brake (ALB) Integer: 0-3: 0 = not present, 1 = off, 2 = on, 3 = active Always ties_mode Ties locking state Integer: 0-2: 0 = not tied, 1 = prelock (currently tightening), 2 = tied (locked) Always screw_throttle_X Boat Screw Throttle. X from 0 to 5 (DD_MAX_SCREWPROP) Float: unlimited Screwprop exists screw_steer_X Boat Screw Steering direction. X from 0 to 5 (DD_MAX_SCREWPROP) Float: unlimited, -1 = left, +1 = right? Screwprop exists water_depth Depth of water below lowest node Float: unlimited Screwprop exists water_speed Speed on water in knots (1 Nautical Mile/Hour) Float: unlimited Screwprop exists aeroengine_throttle_X Airplane Engine Throttle. X from 0 to 5 (DD_MAX_AEROENGINE) Float: 0-1 Aeroengine exists aeroengine_failed_X Airplane Engine Failure. X from 0 to 5 (DD_MAX_AEROENGINE) Boolean: true if failed Aeroengine exists aeroengine_rpm_X Airplane Engine RPM. X from 0 to 5 (DD_MAX_AEROENGINE) Float: 0 to aeroengine max RPM Aeroengine exists airspeed Speed above ground in knots/hour Float: unlimited Aeroengine or wing exists wing_aoa_X Wings Angle of Attack. X from 0 to 5 (DD_MAX_WING) Float: unlimited Wing exists altitude Altitude above ground Float: unlimited Aeroengine or wing exists altitude_string Altitude above ground - string Characters: three character altitude display: \"000\" Aeroengine or wing exists signal_turnleft Left turn signal is lit. Boolean signal_turnright Right turn signal is lit. Boolean signal_warning Warning signal is lit. Boolean","title":"Input sources"},{"location":"vehicle-creation/making-custom-hud/#quickstart","text":"Perhaps the easiest thing to add is a text readout, here we will add a simple readout that shows the speed of a vehicle in MPH. 1. Load up the layout editor and add a TextBox. You can do this by opening the Widgets tab, and under default you will find TextBox. Drag a TextBox out on the canvas as shown: 2. Change the properties of the TextBox. Do this in the Properties tab as shown. Align should be to a corner of the screen (Left Top here) and Layer should be \"Main\". Also add the user data properties: anim=text link=speedo_mph put the keyword (e.g. \"anim\") into the box above \"Key\" and put the value (e.g. \"text\") above the box marked \"Value.\" Then click on \"Add\" and repeat this step for all the user data properties. In the end you should have these properties for the TextBox: 3: Save the layout as \"namehere.layout\" and put the layout with the vehicle's .truck file. In the .truck file add the following lines: guisettings dashboard namehere.layout 4: Test your readout! Extra: Add these user values to format the display like this: \"xxxx.xx MPH\" format=%.2f MPH Now you have the basics of the layouteditor, move on to more advanced readouts. Let's now create a simple speedo gauge: IMPORTANT: Put your graphics into the YourMedia sub folder, so the editor can use it. Open the layout editor. Add an ImageBox in the same way that you added a TextBox in the first part of this quickstart. Go into the ImageBox's properties and put the gauge texture into the ImageTexture field. Add a RotatingSkin widget add your needle texture to it in the same way as you did previously. Add these values to the RotatingSkin as User data: anim=rotate min=-104 max=110 vmin=0 vmax=120 link=speedo_kph Save your .layout file, and move it and the images to your truck folder, and add the truck<-->.layout linkage as you did earlier in the quickstart. Test out your gauge, and make modifications as necessary.","title":"Quickstart"},{"location":"vehicle-creation/motorbikes/","text":"Motorbikes \u00b6 This tutorial covers the theory and concepts used to build real 2-wheeled vehicles in Rigs of Rods. Based off this archived forum thread . Theory \u00b6 Motorbikes are counter-intuitive, to turn left, you must steer right a little first and vice-versa. It is because of this that the player cannot control the steering directly (with hydros) because the response time is too long and there is no feedback like when you ride a bicycle. So you must use animators and the roll option. This is what we use to turn the front wheel. The roll means the angle between the camera plane and the ground plane, so you can adjust it by rotating the camera. This is the main way of controlling the bike, you essentially trick the bike into thinking its falling onto one side and it will always try to be level. In other words, you're not steering, just controlling the lean angle. Construction \u00b6 To make a motorcycle or similar you need to have good knowledge about node-beam systems and have experience of vehicle creation. A lot of details will not be covered because it should be obvious to an experienced user. The image above shows how the motorbike operates, note how the front wheel is able to slide up and down on four slidenodes . Wheels \u00b6 The wheels should be as thin as possible and be made very stiff to stop flexing and be sure to only power the rear wheel. I added a snode out to the side for both front ( n51 ) and back ( n50 ) wheels to stop them form flexing so much. These snodes must be contactless, so use the node option c , instead of the usual n . I used wheels that were 0.1m thick at the front and 0.12m thick at the back. I cheated and increase the grip for both wheels, because RoR is designed for heavy trucks. set_node_defaults -1, 3, -1, -1 Was inserted before the wheels section, stops wheel spin and although drifting in the bike was amazing, it wasn't good for control or cornering wheels 0.31, 1, 12, 27, 28, 50, 1, 1, 43, 35.0, 80000.0, 600.0, tracks/daffwheelface tracks/dafwheelband 0.29, 1, 12, 29, 30, 51, 1, 0, 45, 35.0, 60000.0, 500.0, tracks/daffwheelface tracks/dafwheelband How to only power the rear wheel \u00b6 This bit is important, you must define an axle , making sure the differentials are set to split \"d(s)\" and only the rear wheel is powered. axles w1(27 28), w2(29 30), d(s) Steering \u00b6 The steering assembly is able to move up and down with the suspension on slide nodes and controls the balance of the bike. I used 3 slide rails and 4 slide nodes so it is as rigid as possible. The nodes at the bottom of the frame should have the option \"c\", so they are contactless. There are four animators that form a sort to diamond shape they are defined something like this; 29, 34, 1, roll | shortlimit: 0.15 | longlimit: 0.15 Note how the short and long limit are quite small, you don't need a large number because the castor angle on the front wheel helps the bike turn when it is in a lean. See animators . Camera \u00b6 You can control the lean angle of the bike by controlling the lean angle of the camera, and you do this using hydros as usual, just make sure they turn the camera assembly the opposite way from where you want the bike to go. I recommend trying about 20 deg then gradually increasing until a balance between control and stability is found. Offroad bikes should have less because of lower grip. Mass \u00b6 Due to RoR I didn't bother trying to get my bike too light, It wasn't a key issue. If you want to get a realistic weight the biggest issue will be the wheels, they are designed to work best on trucks and if your bike is 100kg, then there is clearly going to be a problem. Engine \u00b6 The bike I have provided is sort of a low geared, lightweight racing bike, enough power to pop a wheelie in first gear if you drop the clutch but will top out at about 200kph. Note that high speeds and the corresponding vibrations and shaking are not good for control. engine 2000.0, 5000.0, 120.0, 3, 6, 99, 3.2, 2.23, 1.71, 1.35, 1.24, -1.0 And: engoption 0.02, c, 100.0, 0.1, 0.2, 0.1 Suspension \u00b6 Should be quite stiff with high damping to stop the bike bouncing and jiggling around. Any shaking is bad for the stabilization and control. Example Bike \u00b6 Polaris_GP2.5.0.truck Conclusion \u00b6 Hopefully this page will be updated as motorbikes are further developed. Future development will probably look into adding riders and expanding into special types of bikes. Easy riding, Davded","title":"Motorbikes"},{"location":"vehicle-creation/motorbikes/#motorbikes","text":"This tutorial covers the theory and concepts used to build real 2-wheeled vehicles in Rigs of Rods. Based off this archived forum thread .","title":"Motorbikes"},{"location":"vehicle-creation/motorbikes/#theory","text":"Motorbikes are counter-intuitive, to turn left, you must steer right a little first and vice-versa. It is because of this that the player cannot control the steering directly (with hydros) because the response time is too long and there is no feedback like when you ride a bicycle. So you must use animators and the roll option. This is what we use to turn the front wheel. The roll means the angle between the camera plane and the ground plane, so you can adjust it by rotating the camera. This is the main way of controlling the bike, you essentially trick the bike into thinking its falling onto one side and it will always try to be level. In other words, you're not steering, just controlling the lean angle.","title":"Theory"},{"location":"vehicle-creation/motorbikes/#construction","text":"To make a motorcycle or similar you need to have good knowledge about node-beam systems and have experience of vehicle creation. A lot of details will not be covered because it should be obvious to an experienced user. The image above shows how the motorbike operates, note how the front wheel is able to slide up and down on four slidenodes .","title":"Construction"},{"location":"vehicle-creation/motorbikes/#wheels","text":"The wheels should be as thin as possible and be made very stiff to stop flexing and be sure to only power the rear wheel. I added a snode out to the side for both front ( n51 ) and back ( n50 ) wheels to stop them form flexing so much. These snodes must be contactless, so use the node option c , instead of the usual n . I used wheels that were 0.1m thick at the front and 0.12m thick at the back. I cheated and increase the grip for both wheels, because RoR is designed for heavy trucks. set_node_defaults -1, 3, -1, -1 Was inserted before the wheels section, stops wheel spin and although drifting in the bike was amazing, it wasn't good for control or cornering wheels 0.31, 1, 12, 27, 28, 50, 1, 1, 43, 35.0, 80000.0, 600.0, tracks/daffwheelface tracks/dafwheelband 0.29, 1, 12, 29, 30, 51, 1, 0, 45, 35.0, 60000.0, 500.0, tracks/daffwheelface tracks/dafwheelband","title":"Wheels"},{"location":"vehicle-creation/motorbikes/#how-to-only-power-the-rear-wheel","text":"This bit is important, you must define an axle , making sure the differentials are set to split \"d(s)\" and only the rear wheel is powered. axles w1(27 28), w2(29 30), d(s)","title":"How to only power the rear wheel"},{"location":"vehicle-creation/motorbikes/#steering","text":"The steering assembly is able to move up and down with the suspension on slide nodes and controls the balance of the bike. I used 3 slide rails and 4 slide nodes so it is as rigid as possible. The nodes at the bottom of the frame should have the option \"c\", so they are contactless. There are four animators that form a sort to diamond shape they are defined something like this; 29, 34, 1, roll | shortlimit: 0.15 | longlimit: 0.15 Note how the short and long limit are quite small, you don't need a large number because the castor angle on the front wheel helps the bike turn when it is in a lean. See animators .","title":"Steering"},{"location":"vehicle-creation/motorbikes/#camera","text":"You can control the lean angle of the bike by controlling the lean angle of the camera, and you do this using hydros as usual, just make sure they turn the camera assembly the opposite way from where you want the bike to go. I recommend trying about 20 deg then gradually increasing until a balance between control and stability is found. Offroad bikes should have less because of lower grip.","title":"Camera"},{"location":"vehicle-creation/motorbikes/#mass","text":"Due to RoR I didn't bother trying to get my bike too light, It wasn't a key issue. If you want to get a realistic weight the biggest issue will be the wheels, they are designed to work best on trucks and if your bike is 100kg, then there is clearly going to be a problem.","title":"Mass"},{"location":"vehicle-creation/motorbikes/#engine","text":"The bike I have provided is sort of a low geared, lightweight racing bike, enough power to pop a wheelie in first gear if you drop the clutch but will top out at about 200kph. Note that high speeds and the corresponding vibrations and shaking are not good for control. engine 2000.0, 5000.0, 120.0, 3, 6, 99, 3.2, 2.23, 1.71, 1.35, 1.24, -1.0 And: engoption 0.02, c, 100.0, 0.1, 0.2, 0.1","title":"Engine"},{"location":"vehicle-creation/motorbikes/#suspension","text":"Should be quite stiff with high damping to stop the bike bouncing and jiggling around. Any shaking is bad for the stabilization and control.","title":"Suspension"},{"location":"vehicle-creation/motorbikes/#example-bike","text":"Polaris_GP2.5.0.truck","title":"Example Bike"},{"location":"vehicle-creation/motorbikes/#conclusion","text":"Hopefully this page will be updated as motorbikes are further developed. Future development will probably look into adding riders and expanding into special types of bikes. Easy riding, Davded","title":"Conclusion"},{"location":"vehicle-creation/rail-vehicles/","text":"Building rail vehicles \u00b6 In this tutorial you will learn how to build a small locomotive and wagon. Apart from the meshbuilding, it covers everything needed to build a working train. All sizes must be exactly as shown in this tutorial! What you need for this tutorial: Some basic knowledge of building objects for RoR A text editor, e.g. Notepad A visual editor for watching the node and beam structure Please note that this train does not work as well as expected. Main reasons are the low mass of the train, the really short wheelbase and the fact that tires in RoR are not perfectly round. All this results in a quite bumpy ride. Building a small locomotive \u00b6 Step 1: Bogie \u00b6 The bogie is the main part of our train. It holds the wheels and avoids the train from sliding off the rails. It has the shape of a trapezoid prism, the lower side is smaller than the upper. The 4 upper nodes are for the wheels, the four lower nodes are the guidance nodes. Those need to have low friction ( set_node_defaults -1, 0, -1, -1 ) and need to be contacters . Give them a mass of 50 kg using the l -option in the nodes section. Step 2: Placement node \u00b6 In order to spawn the train correctly in the train spawner, node 0 needs to be in the center of the train, 0.53 meters below the lowest edge of the wheel (See Fig. 4). For our tutorial train, we set node 0 in the middle of the bogie. Node 0 needs to have the c -option in the nodes section for no ground detection. Step 3: Wheels \u00b6 Now it's time to place the wheels between the upper nodes of the bogie. Remember to set the radius correctly. Fig. 4 (\"front view\") shows the important sizes of what we have so far Step 4: Chassis \u00b6 It's time to build a chassis and, on this train, connect it directly to the bogie. Step 5: Couplers \u00b6 Now we add simple couplers to the front and back of the train. We are using hooknodes with the auto-lock option. Step 6: Support beams \u00b6 The last step is to add more beams to make the structure stable. We can also add contacters and ropables . Step 7: Tweaking the truckfile \u00b6 Now the node and beam of our train is finished, now it's time to tweak the truckfile. Download the finished train and look into the truckfile: Railrunner Please note the comments in there! Building a wagon \u00b6 Step 1: Bogie \u00b6 The bogie is the main part of our wagon. It holds the wagon on the rails. It has the shape of a trapezoid prism, the lower side is smaller than the upper. The 4 upper nodes slide on top of the rail, the four lower nodes are the guidance nodes. Make them all low friction ( set_node_defaults -1, 0, -1, -1 ). The four lower nodes need to be contacters . Give them a mass of 50 kg using the \"l\"-option in the nodes section. Step 2: Placement node \u00b6 In order to spawn the wagon correctly in the train spawner, node 0 needs to be in the center of the train, 0.53 meters below the upper four nodes of our bogie. Node 0 needs to have the \"c\"-option in the nodes section for no ground detection. Step 4: Chassis \u00b6 We add the chassis. Step 5: Couplers \u00b6 Now we add simple couplers to the front and back of the wagon. We are using hooknodes with the auto-lock option (Attention: disable high quality reflective effects in RoR, otherwise it will crash). Step 6: Support beams \u00b6 The last step is to add more beams to make the structure stable. We can also add contacters and ropables. Step 7: Tweaking the truckfile \u00b6 Now the node and beam of our wagon is finished, it's time to tweak the truckfile. Download the finished train and look into the truckfile: Railrunner Please note the comments in there! Coupling Systems \u00b6 Automatic couplers \u00b6 If you want to make your train compatible to BigBoy's American trains (Janney (AAR) coupler), this is the coupling system for you. It is a very easy automatic system. Use the following code for the coupling nodes. The node ID's need to be adjusted to your train. hooks ;nd_id, options 162, lockgroup: 54, hookgroup: -55, auto-lock 163, lockgroup: 54, hookgroup: -55, auto-lock lockgroups ;lockgroup, nd_id 54, 162, 163 triggers ;id3, id4, short, long, shortkey, longkey, options 44, 165, 0.05, 0.1, -55, -56, ih Buffers and chain coupling \u00b6 This is the standard European buffer and chain coupling. It is much more complex than the automatic coupling above. As this is quite complicated and hard to rebuild, please use the node and beam of the Rbns 641 freight wagon as a template. Chain coupling \u00b6 First image shows standard position of the couplers. When a trigger is activated, it disengages a hook on the left and lets the chain piece swing down. Another hook is engaged, connecting the chain to the other coupling. ![fig20-eu-coupling-inactive] (/images/rail-vehicles-tutorial-eu-coupling-inactive.png) ![fig21-eu-locking-position] (/images/rail-vehicles-tutorial-eu-locking-position.png) ![fig22-eu-connected] (/images/rail-vehicles-tutorial-eu-connected.png) Trigger code: triggers ;left nd1, nd2, 0.900, 10.00, -32, -32, ich ;unlock hookgroup -32 (chain falls down) nd1, nd2, 0.910, 10.00, -31, -31, icH ;lock hookgroup -31 (coupling connects to 2nd wagon) nd1, nd2, 0.001, 1.100, -31, -31, ich ;unlock hookgroup -31 (coupling deconnects from 2nd wagon) nd1, nd2, 0.001, 1.100, -32, -32, icH ;lock hookgroup -32 (chain goes to rest position) ;right nd1, nd2, 0.900, 10.00, -34, -34, ich ;unlock hookgroup -34 (chain falls down) nd1, nd2, 0.910, 10.00, -33, -33, icH ;lock hookgroup -33 (coupling connects to 2nd wagon) nd1, nd2, 0.001, 1.100, -33, -33, ich ;unlock hookgroup -33 (coupling deconnects from 2nd wagon) nd1, nd2, 0.001, 1.100, -34, -34, icH ;lock hookgroup -34 (chain goes to rest position) Buffers \u00b6 The European coupling system needs buffers to absorb collisions between the wagons. One side has a contactable slidenode connected to a shock. The other side has a contactable submesh plane that is also movable and connected to a shock. The submesh collides with the contacter and absorbs the collisions. Try it out ingame to see how it works! Troubleshooting \u00b6 Q: My train is stuck in the rail or positioned wrong when spawning: Check the position of node 0 Q: The train derails on switches: Are all bogie nodes positioned correctly? Do all bogie nodes have the correct options? (mass, contact, friction) Q: The ride is very bumpy Raise the numray count on the tires Add a suspension","title":"Rail vehicles"},{"location":"vehicle-creation/rail-vehicles/#building-rail-vehicles","text":"In this tutorial you will learn how to build a small locomotive and wagon. Apart from the meshbuilding, it covers everything needed to build a working train. All sizes must be exactly as shown in this tutorial! What you need for this tutorial: Some basic knowledge of building objects for RoR A text editor, e.g. Notepad A visual editor for watching the node and beam structure Please note that this train does not work as well as expected. Main reasons are the low mass of the train, the really short wheelbase and the fact that tires in RoR are not perfectly round. All this results in a quite bumpy ride.","title":"Building rail vehicles"},{"location":"vehicle-creation/rail-vehicles/#building-a-small-locomotive","text":"","title":"Building a small locomotive"},{"location":"vehicle-creation/rail-vehicles/#step-1-bogie","text":"The bogie is the main part of our train. It holds the wheels and avoids the train from sliding off the rails. It has the shape of a trapezoid prism, the lower side is smaller than the upper. The 4 upper nodes are for the wheels, the four lower nodes are the guidance nodes. Those need to have low friction ( set_node_defaults -1, 0, -1, -1 ) and need to be contacters . Give them a mass of 50 kg using the l -option in the nodes section.","title":"Step 1: Bogie"},{"location":"vehicle-creation/rail-vehicles/#step-2-placement-node","text":"In order to spawn the train correctly in the train spawner, node 0 needs to be in the center of the train, 0.53 meters below the lowest edge of the wheel (See Fig. 4). For our tutorial train, we set node 0 in the middle of the bogie. Node 0 needs to have the c -option in the nodes section for no ground detection.","title":"Step 2: Placement node"},{"location":"vehicle-creation/rail-vehicles/#step-3-wheels","text":"Now it's time to place the wheels between the upper nodes of the bogie. Remember to set the radius correctly. Fig. 4 (\"front view\") shows the important sizes of what we have so far","title":"Step 3: Wheels"},{"location":"vehicle-creation/rail-vehicles/#step-4-chassis","text":"It's time to build a chassis and, on this train, connect it directly to the bogie.","title":"Step 4: Chassis"},{"location":"vehicle-creation/rail-vehicles/#step-5-couplers","text":"Now we add simple couplers to the front and back of the train. We are using hooknodes with the auto-lock option.","title":"Step 5: Couplers"},{"location":"vehicle-creation/rail-vehicles/#step-6-support-beams","text":"The last step is to add more beams to make the structure stable. We can also add contacters and ropables .","title":"Step 6: Support beams"},{"location":"vehicle-creation/rail-vehicles/#step-7-tweaking-the-truckfile","text":"Now the node and beam of our train is finished, now it's time to tweak the truckfile. Download the finished train and look into the truckfile: Railrunner Please note the comments in there!","title":"Step 7: Tweaking the truckfile"},{"location":"vehicle-creation/rail-vehicles/#building-a-wagon","text":"","title":"Building a wagon"},{"location":"vehicle-creation/rail-vehicles/#step-1-bogie_1","text":"The bogie is the main part of our wagon. It holds the wagon on the rails. It has the shape of a trapezoid prism, the lower side is smaller than the upper. The 4 upper nodes slide on top of the rail, the four lower nodes are the guidance nodes. Make them all low friction ( set_node_defaults -1, 0, -1, -1 ). The four lower nodes need to be contacters . Give them a mass of 50 kg using the \"l\"-option in the nodes section.","title":"Step 1: Bogie"},{"location":"vehicle-creation/rail-vehicles/#step-2-placement-node_1","text":"In order to spawn the wagon correctly in the train spawner, node 0 needs to be in the center of the train, 0.53 meters below the upper four nodes of our bogie. Node 0 needs to have the \"c\"-option in the nodes section for no ground detection.","title":"Step 2: Placement node"},{"location":"vehicle-creation/rail-vehicles/#step-4-chassis_1","text":"We add the chassis.","title":"Step 4: Chassis"},{"location":"vehicle-creation/rail-vehicles/#step-5-couplers_1","text":"Now we add simple couplers to the front and back of the wagon. We are using hooknodes with the auto-lock option (Attention: disable high quality reflective effects in RoR, otherwise it will crash).","title":"Step 5: Couplers"},{"location":"vehicle-creation/rail-vehicles/#step-6-support-beams_1","text":"The last step is to add more beams to make the structure stable. We can also add contacters and ropables.","title":"Step 6: Support beams"},{"location":"vehicle-creation/rail-vehicles/#step-7-tweaking-the-truckfile_1","text":"Now the node and beam of our wagon is finished, it's time to tweak the truckfile. Download the finished train and look into the truckfile: Railrunner Please note the comments in there!","title":"Step 7: Tweaking the truckfile"},{"location":"vehicle-creation/rail-vehicles/#coupling-systems","text":"","title":"Coupling Systems"},{"location":"vehicle-creation/rail-vehicles/#automatic-couplers","text":"If you want to make your train compatible to BigBoy's American trains (Janney (AAR) coupler), this is the coupling system for you. It is a very easy automatic system. Use the following code for the coupling nodes. The node ID's need to be adjusted to your train. hooks ;nd_id, options 162, lockgroup: 54, hookgroup: -55, auto-lock 163, lockgroup: 54, hookgroup: -55, auto-lock lockgroups ;lockgroup, nd_id 54, 162, 163 triggers ;id3, id4, short, long, shortkey, longkey, options 44, 165, 0.05, 0.1, -55, -56, ih","title":"Automatic couplers"},{"location":"vehicle-creation/rail-vehicles/#buffers-and-chain-coupling","text":"This is the standard European buffer and chain coupling. It is much more complex than the automatic coupling above. As this is quite complicated and hard to rebuild, please use the node and beam of the Rbns 641 freight wagon as a template.","title":"Buffers and chain coupling"},{"location":"vehicle-creation/rail-vehicles/#chain-coupling","text":"First image shows standard position of the couplers. When a trigger is activated, it disengages a hook on the left and lets the chain piece swing down. Another hook is engaged, connecting the chain to the other coupling. ![fig20-eu-coupling-inactive] (/images/rail-vehicles-tutorial-eu-coupling-inactive.png) ![fig21-eu-locking-position] (/images/rail-vehicles-tutorial-eu-locking-position.png) ![fig22-eu-connected] (/images/rail-vehicles-tutorial-eu-connected.png) Trigger code: triggers ;left nd1, nd2, 0.900, 10.00, -32, -32, ich ;unlock hookgroup -32 (chain falls down) nd1, nd2, 0.910, 10.00, -31, -31, icH ;lock hookgroup -31 (coupling connects to 2nd wagon) nd1, nd2, 0.001, 1.100, -31, -31, ich ;unlock hookgroup -31 (coupling deconnects from 2nd wagon) nd1, nd2, 0.001, 1.100, -32, -32, icH ;lock hookgroup -32 (chain goes to rest position) ;right nd1, nd2, 0.900, 10.00, -34, -34, ich ;unlock hookgroup -34 (chain falls down) nd1, nd2, 0.910, 10.00, -33, -33, icH ;lock hookgroup -33 (coupling connects to 2nd wagon) nd1, nd2, 0.001, 1.100, -33, -33, ich ;unlock hookgroup -33 (coupling deconnects from 2nd wagon) nd1, nd2, 0.001, 1.100, -34, -34, icH ;lock hookgroup -34 (chain goes to rest position)","title":"Chain coupling"},{"location":"vehicle-creation/rail-vehicles/#buffers","text":"The European coupling system needs buffers to absorb collisions between the wagons. One side has a contactable slidenode connected to a shock. The other side has a contactable submesh plane that is also movable and connected to a shock. The submesh collides with the contacter and absorbs the collisions. Try it out ingame to see how it works!","title":"Buffers"},{"location":"vehicle-creation/rail-vehicles/#troubleshooting","text":"Q: My train is stuck in the rail or positioned wrong when spawning: Check the position of node 0 Q: The train derails on switches: Are all bogie nodes positioned correctly? Do all bogie nodes have the correct options? (mass, contact, friction) Q: The ride is very bumpy Raise the numray count on the tires Add a suspension","title":"Troubleshooting"},{"location":"vehicle-creation/special-components/","text":"Special components \u00b6 Command hydraulics - commands \u00b6 Documentation A command is a beam that has \"Commands\" that make it extend/retract and so forth, The command beam has many uses, From being a Hydraulic arm to a destruction tool, Some of the things you can do with commands... Open hoods Make lifting arms Adjust ride heights Make extending parts Make winches Many, many more uses too! One example (in picture below) - all of the moving parts are made by using Commands: Connection utilities \u00b6 This is a guide how you can use the different connection methods in RoR. ties : these are beams that grab a node and pull them tight ropes : like ties, just don't tighten itself hooks : nodes that interlock with other nodes or ropables Ropables \u00b6 The documentation about ropables can be found here Ties \u00b6 The documentation about ties can be found here Ties (as commands) can only work over an RPM of 800 and might request more power from the engine when being used. So basically define a tie on the transport truck and a ropable on the load you want to tighten. Hooks \u00b6 The documentation about hooks can be found here Hooks lock against nodes in a search area of 40 centimeters.","title":"Special components"},{"location":"vehicle-creation/special-components/#special-components","text":"","title":"Special components"},{"location":"vehicle-creation/special-components/#command-hydraulics-commands","text":"Documentation A command is a beam that has \"Commands\" that make it extend/retract and so forth, The command beam has many uses, From being a Hydraulic arm to a destruction tool, Some of the things you can do with commands... Open hoods Make lifting arms Adjust ride heights Make extending parts Make winches Many, many more uses too! One example (in picture below) - all of the moving parts are made by using Commands:","title":"Command hydraulics - commands"},{"location":"vehicle-creation/special-components/#connection-utilities","text":"This is a guide how you can use the different connection methods in RoR. ties : these are beams that grab a node and pull them tight ropes : like ties, just don't tighten itself hooks : nodes that interlock with other nodes or ropables","title":"Connection utilities"},{"location":"vehicle-creation/special-components/#ropables","text":"The documentation about ropables can be found here","title":"Ropables"},{"location":"vehicle-creation/special-components/#ties","text":"The documentation about ties can be found here Ties (as commands) can only work over an RPM of 800 and might request more power from the engine when being used. So basically define a tie on the transport truck and a ropable on the load you want to tighten.","title":"Ties"},{"location":"vehicle-creation/special-components/#hooks","text":"The documentation about hooks can be found here Hooks lock against nodes in a search area of 40 centimeters.","title":"Hooks"},{"location":"vehicle-creation/suspension/","text":"Suspension \u00b6 Suspension is a flexible component which connects a car's body to its wheels. because of its flexibility, suspension components soften out bumps in the road and make the truck's ride smoother. For syntax, see truckfile reference . Types \u00b6 Coilovers \u00b6 Coilover springs (standing for 'coil-over-oil') are extremely simple to model in RoR, since the game's shocks simulate them directly. Things to keep in mind: Spring is the measure of resistance change to the shock's of position, or how 'stiff' the suspension is. The shorter or longer a shock is compared to its original length, the more force it will exert to try to get back to its original length. Damping is a measure of how fast the shocks can change their length: the faster a shock tries to change its length (by compression or extension of the suspension), the more resistance the shock will apply. Too little damping will make the suspension too bouncy. Too much damping and the suspension will not be able to move well enough in response to bumps. So, for soft suspension you would want low spring and relatively low damp, and the opposite for stiff suspension (high spring and relatively high damp). Shocks behave differently based on the force acted upon them. So a shock that is good for a truck weighing several tonnes will be much too 'stiff' for the same shock on a street car. Leaf springs \u00b6 Leaf spring suspension is a very simple (in real life; it is much harder to model in RoR) and efficient design found on almost all trucks using beam axles. The design consists of a spring and a shackle, the spring is a long metal arc that bend when a force is exerted on the spring. One end of the spring is securely mounted to the frame and the other to a shackle. The shackle allows for one end of the spring to move back and forth as the spring straightens out under force. Dependent suspension \u00b6 The wheels of each axle are securely connected to each other using non independent suspension systems. The force from every bump that a wheel on one side goes over is transmitted into the other wheel too. These systems do not tend produce very good handling, and therefore are not often used on sports cars. Non independent suspension is much more commonly found on heavy duty vehicles, where the link between the wheels makes axles much stronger Beam axle \u00b6 Beam axles are an extremely simple form of suspension, almost always seen on the back axles of vans and semi trailers. The wheels are directly attached to the axles, and cannot change their angle to it. The easiest way to create a beam axle is to use Axle Rigidity nodes. The lateral location of a beam axle can be controlled in a number of ways; the easiest way in RoR simply to weakly truss the two arms that hold the axle, but this is generally not possible in real life and limits how much the axle can roll. Example truck using a beam axle on the rear, with simple truss for lateral location. Top image: Normal extension Middle image: Full compression Bottom image: Full extension. Blue: Axle. light brown: Frame and trailing arms. Green: Simple truss for lateral location Watt's linkage \u00b6 Example truck using Watt's linkage method of lateral location. Watt's Linkage: Blue: Axle. Light brown: Frame and trailing arms . Purple: Holder for Watt's Linkage Green: Watt's linkage (the 2d elements of it) . Yellow: Trusses and A-arms to hold linkage in place Red: Connector for Watt's linkage and axle Panhard rod \u00b6 Example panhard rod truck Panhard rod: Blue: Axle. Light brown: Frame and trailing arms . Green: Panhard rod . Purple: Holder for Panhard rod De Dion tube \u00b6 De Dion tube suspension is a relatively complex form of suspension, which falls in between the categories of independent and non independent suspension: The wheels are directly connected to each other using a sliding tube, forcing them to stay parallel to each other, but this tube is not connected to any other part of the vehicle. each wheel is actually held to the truck by a single A-arm Due to their complexity, De Dion tubes are uncommon on modern vehicles. An example truck using a de Dion tube on the rear. Since a telescoping tube cannot be directly modeled in RoR, a Sarrus Linkage has been used instead. It provides exactly the same effect. The wheels connected to the tube are kept parallel, regardless of body roll or suspension travel on either side... The tube's length can change. Top image: Normal extension Middle image: Full compression Bottom image : Full extension Blue: A-arms. Green: De Deion Tube Walking beam \u00b6 Walking beam is a special form of suspension: It solidly links two axles together, meaning that all four wheels on those axles must move in unison. Indeed, the setup is know as walking beam due to the way that trucks are see to 'walk' over obstacles. This design allows the tires to conform to the landscape, evening out the pressure on each tire. An example truck using extremely simple walking beam suspension on the rear. Blue: Axles. Light brown: Frame and trailing arms Green: simple truss for lateral location. Yellow: Frame for walking beam The bogie that holds the truck's four back wheels together. A concept vehicle in game. Black: Structural beams Green: The suspension Blue: Shocks Independent suspension \u00b6 There are no significant connections between wheels in independent suspension setups. They are therefore much more suited to vehicles where roadholding is especially important. Swing axle \u00b6 The swing axle is a small step up from the beam axle. Although it is the most common form of suspension on Pricorde's trucks, it probably produces the worst handling vehicles in the game, due to the way the camber changes when going over bumps. Because of its strange handling characteristics, swing axle suspension is uncommon in modern trucks. An example truck using swing axles on the rear. The axles on this truck are quite short, which encourages the inside wheel to tuck under when cornering. Top image: Normal extension Middle image: Full compression Bottom image: Full extension Blue: Axles. Light brown: trusses and A-arm for axles. Double wishbone \u00b6 Double wishbone suspension is most common in racing cars and larger passenger cars. The wheels are kept perpendicular to the road through the use of two A-arms, one above the other. It is relatively easy to tune for handling. An example truck using double wishbone suspension on the rear. The front axles also carry double wishbone suspension and are used for steering. The front wheels have also been rotated to place them inside the wishbones, which makes them much stronger; any object they collide with exerts less leverage on them. Top image: Normal extension, Middle image: Full compression, Bottom image: Full extension Green: Upper wishbones Blue: Lower wishbones Light brown: Extra truss arms. Hydros could go here when modelling steering axles McPherson strut \u00b6 By far and away the most common form of front suspension for passenger cars, the spring/shock assembly must not only provide suspension to the wheel, but hold it in place, keeping the wheel aligned to the shock at all times. This requires the use of some sort of straight line mechanism with the shock Example 1 \u00b6 An old-style example truck using McPherson strut suspension on the front. The straight line mechanism has been hidden on the right hand side to provide a better view of the overall setup. Top: Normal extension Middle: Full compression Bottom: Full extension Blue: A-arms. Light brown: holder for straight line mechanism and shock Green: Straight line mechanism, to keep the shock and the wheel holder pointing in the same line . Red: connector from the straight line mechanism to the bottom of the wheel holder Example 2 \u00b6 An example truck using slidenodes to keep the beam count down. No beams in the suspension mechanism have been hidden, the shocks are hold in line with slidenodes. Torsion bar \u00b6 A torsion bar is a simple form of independent suspension that uses a flexible rod to provide spring force instead of a coil spring. It can be found on many vehicles from the VW beetle, to light trucks and SUVs, or even trailers. An example truck using torsion bar suspension front and rear. You will notice the wheels tend to gain camber while cornering like swing arm suspension, however since the pivot point is perpendicular to the wheels, they will not fold under the chassis like a swing arm. Top image: Normal extension Middle image: Full compression Bottom image: Full extension Grey: Axles. Red: Torsion bar beams. Other forms of independent suspension \u00b6 Twin Traction Beam - A beam that goes to the other side of the truck where it is connected to the chassis. Example . Multilink - Multilink, or 5-link, system are called so because they use 5 different points to connect the fusee to the chassis. Trailing-arm - Two arms that look like the 4 link system except that there is not solid axle. Special parts \u00b6 Anti roll bars \u00b6 Anti roll bars are stiff beams which run across vehicle axles to lessen body roll when cornering. This makes vehicles hold the road much better when cornering. Top:Truck with anti roll bars. Bottom: Truck without anti roll bars. Notice how the front wheels are much farther apart in the top image. Green: Anti roll bar. The setup of anti roll bars differs slightly depending on the type of suspension they are being fitted to. In all cases, they must pivot on the truck body itself, but with suspension setups that use transverse A-arms, such as double-wishbone or swing arm, care must be taken to allow for left-right movement in each wheel. If this is not done the suspension will lock up during travel. The two trucks here are identical except the second truck does not have an anti roll device fitted. The anti roll device shown is suitable for any truck which uses same length double wishbone suspension. - Example truck without anti-roll - Example truck using anti-roll Liftable Axles \u00b6 Liftable axles have been implemented in a couple of ways in RoR. Example 1 \u00b6 Creating a basic liftable axle is as easy as replacing part of the supporting beams with commands. Note that if your commands are too long/too short, your shocks will break. In the picture above, the commands lift the node that the shock is attached to, effectively moving the axle. Example 2 \u00b6 Another way of accomplishing this same concept without stressing the axles is to lift the shocks, instead of the wheel. The commands will lift the shock and, consequently, the wheel will travel with the shock thus lifting the axle without stressing the shocks. This allows you to have very stiff shocks without fear of breaking. Example truck Top image: Axle lowered. Bottom image: Axle raised. Blue: A-arms. Green: A arm to connect shocks and commands (Shocks are on outside, commands on inside) .","title":"Suspension"},{"location":"vehicle-creation/suspension/#suspension","text":"Suspension is a flexible component which connects a car's body to its wheels. because of its flexibility, suspension components soften out bumps in the road and make the truck's ride smoother. For syntax, see truckfile reference .","title":"Suspension"},{"location":"vehicle-creation/suspension/#types","text":"","title":"Types"},{"location":"vehicle-creation/suspension/#coilovers","text":"Coilover springs (standing for 'coil-over-oil') are extremely simple to model in RoR, since the game's shocks simulate them directly. Things to keep in mind: Spring is the measure of resistance change to the shock's of position, or how 'stiff' the suspension is. The shorter or longer a shock is compared to its original length, the more force it will exert to try to get back to its original length. Damping is a measure of how fast the shocks can change their length: the faster a shock tries to change its length (by compression or extension of the suspension), the more resistance the shock will apply. Too little damping will make the suspension too bouncy. Too much damping and the suspension will not be able to move well enough in response to bumps. So, for soft suspension you would want low spring and relatively low damp, and the opposite for stiff suspension (high spring and relatively high damp). Shocks behave differently based on the force acted upon them. So a shock that is good for a truck weighing several tonnes will be much too 'stiff' for the same shock on a street car.","title":"Coilovers"},{"location":"vehicle-creation/suspension/#leaf-springs","text":"Leaf spring suspension is a very simple (in real life; it is much harder to model in RoR) and efficient design found on almost all trucks using beam axles. The design consists of a spring and a shackle, the spring is a long metal arc that bend when a force is exerted on the spring. One end of the spring is securely mounted to the frame and the other to a shackle. The shackle allows for one end of the spring to move back and forth as the spring straightens out under force.","title":"Leaf springs"},{"location":"vehicle-creation/suspension/#dependent-suspension","text":"The wheels of each axle are securely connected to each other using non independent suspension systems. The force from every bump that a wheel on one side goes over is transmitted into the other wheel too. These systems do not tend produce very good handling, and therefore are not often used on sports cars. Non independent suspension is much more commonly found on heavy duty vehicles, where the link between the wheels makes axles much stronger","title":"Dependent suspension"},{"location":"vehicle-creation/suspension/#beam-axle","text":"Beam axles are an extremely simple form of suspension, almost always seen on the back axles of vans and semi trailers. The wheels are directly attached to the axles, and cannot change their angle to it. The easiest way to create a beam axle is to use Axle Rigidity nodes. The lateral location of a beam axle can be controlled in a number of ways; the easiest way in RoR simply to weakly truss the two arms that hold the axle, but this is generally not possible in real life and limits how much the axle can roll. Example truck using a beam axle on the rear, with simple truss for lateral location. Top image: Normal extension Middle image: Full compression Bottom image: Full extension. Blue: Axle. light brown: Frame and trailing arms. Green: Simple truss for lateral location","title":"Beam axle"},{"location":"vehicle-creation/suspension/#watts-linkage","text":"Example truck using Watt's linkage method of lateral location. Watt's Linkage: Blue: Axle. Light brown: Frame and trailing arms . Purple: Holder for Watt's Linkage Green: Watt's linkage (the 2d elements of it) . Yellow: Trusses and A-arms to hold linkage in place Red: Connector for Watt's linkage and axle","title":"Watt's linkage"},{"location":"vehicle-creation/suspension/#panhard-rod","text":"Example panhard rod truck Panhard rod: Blue: Axle. Light brown: Frame and trailing arms . Green: Panhard rod . Purple: Holder for Panhard rod","title":"Panhard rod"},{"location":"vehicle-creation/suspension/#de-dion-tube","text":"De Dion tube suspension is a relatively complex form of suspension, which falls in between the categories of independent and non independent suspension: The wheels are directly connected to each other using a sliding tube, forcing them to stay parallel to each other, but this tube is not connected to any other part of the vehicle. each wheel is actually held to the truck by a single A-arm Due to their complexity, De Dion tubes are uncommon on modern vehicles. An example truck using a de Dion tube on the rear. Since a telescoping tube cannot be directly modeled in RoR, a Sarrus Linkage has been used instead. It provides exactly the same effect. The wheels connected to the tube are kept parallel, regardless of body roll or suspension travel on either side... The tube's length can change. Top image: Normal extension Middle image: Full compression Bottom image : Full extension Blue: A-arms. Green: De Deion Tube","title":"De Dion tube"},{"location":"vehicle-creation/suspension/#walking-beam","text":"Walking beam is a special form of suspension: It solidly links two axles together, meaning that all four wheels on those axles must move in unison. Indeed, the setup is know as walking beam due to the way that trucks are see to 'walk' over obstacles. This design allows the tires to conform to the landscape, evening out the pressure on each tire. An example truck using extremely simple walking beam suspension on the rear. Blue: Axles. Light brown: Frame and trailing arms Green: simple truss for lateral location. Yellow: Frame for walking beam The bogie that holds the truck's four back wheels together. A concept vehicle in game. Black: Structural beams Green: The suspension Blue: Shocks","title":"Walking beam"},{"location":"vehicle-creation/suspension/#independent-suspension","text":"There are no significant connections between wheels in independent suspension setups. They are therefore much more suited to vehicles where roadholding is especially important.","title":"Independent suspension"},{"location":"vehicle-creation/suspension/#swing-axle","text":"The swing axle is a small step up from the beam axle. Although it is the most common form of suspension on Pricorde's trucks, it probably produces the worst handling vehicles in the game, due to the way the camber changes when going over bumps. Because of its strange handling characteristics, swing axle suspension is uncommon in modern trucks. An example truck using swing axles on the rear. The axles on this truck are quite short, which encourages the inside wheel to tuck under when cornering. Top image: Normal extension Middle image: Full compression Bottom image: Full extension Blue: Axles. Light brown: trusses and A-arm for axles.","title":"Swing axle"},{"location":"vehicle-creation/suspension/#double-wishbone","text":"Double wishbone suspension is most common in racing cars and larger passenger cars. The wheels are kept perpendicular to the road through the use of two A-arms, one above the other. It is relatively easy to tune for handling. An example truck using double wishbone suspension on the rear. The front axles also carry double wishbone suspension and are used for steering. The front wheels have also been rotated to place them inside the wishbones, which makes them much stronger; any object they collide with exerts less leverage on them. Top image: Normal extension, Middle image: Full compression, Bottom image: Full extension Green: Upper wishbones Blue: Lower wishbones Light brown: Extra truss arms. Hydros could go here when modelling steering axles","title":"Double wishbone"},{"location":"vehicle-creation/suspension/#mcpherson-strut","text":"By far and away the most common form of front suspension for passenger cars, the spring/shock assembly must not only provide suspension to the wheel, but hold it in place, keeping the wheel aligned to the shock at all times. This requires the use of some sort of straight line mechanism with the shock","title":"McPherson strut"},{"location":"vehicle-creation/suspension/#example-1","text":"An old-style example truck using McPherson strut suspension on the front. The straight line mechanism has been hidden on the right hand side to provide a better view of the overall setup. Top: Normal extension Middle: Full compression Bottom: Full extension Blue: A-arms. Light brown: holder for straight line mechanism and shock Green: Straight line mechanism, to keep the shock and the wheel holder pointing in the same line . Red: connector from the straight line mechanism to the bottom of the wheel holder","title":"Example 1"},{"location":"vehicle-creation/suspension/#example-2","text":"An example truck using slidenodes to keep the beam count down. No beams in the suspension mechanism have been hidden, the shocks are hold in line with slidenodes.","title":"Example 2"},{"location":"vehicle-creation/suspension/#torsion-bar","text":"A torsion bar is a simple form of independent suspension that uses a flexible rod to provide spring force instead of a coil spring. It can be found on many vehicles from the VW beetle, to light trucks and SUVs, or even trailers. An example truck using torsion bar suspension front and rear. You will notice the wheels tend to gain camber while cornering like swing arm suspension, however since the pivot point is perpendicular to the wheels, they will not fold under the chassis like a swing arm. Top image: Normal extension Middle image: Full compression Bottom image: Full extension Grey: Axles. Red: Torsion bar beams.","title":"Torsion bar"},{"location":"vehicle-creation/suspension/#other-forms-of-independent-suspension","text":"Twin Traction Beam - A beam that goes to the other side of the truck where it is connected to the chassis. Example . Multilink - Multilink, or 5-link, system are called so because they use 5 different points to connect the fusee to the chassis. Trailing-arm - Two arms that look like the 4 link system except that there is not solid axle.","title":"Other forms of independent suspension"},{"location":"vehicle-creation/suspension/#special-parts","text":"","title":"Special parts"},{"location":"vehicle-creation/suspension/#anti-roll-bars","text":"Anti roll bars are stiff beams which run across vehicle axles to lessen body roll when cornering. This makes vehicles hold the road much better when cornering. Top:Truck with anti roll bars. Bottom: Truck without anti roll bars. Notice how the front wheels are much farther apart in the top image. Green: Anti roll bar. The setup of anti roll bars differs slightly depending on the type of suspension they are being fitted to. In all cases, they must pivot on the truck body itself, but with suspension setups that use transverse A-arms, such as double-wishbone or swing arm, care must be taken to allow for left-right movement in each wheel. If this is not done the suspension will lock up during travel. The two trucks here are identical except the second truck does not have an anti roll device fitted. The anti roll device shown is suitable for any truck which uses same length double wishbone suspension. - Example truck without anti-roll - Example truck using anti-roll","title":"Anti roll bars"},{"location":"vehicle-creation/suspension/#liftable-axles","text":"Liftable axles have been implemented in a couple of ways in RoR.","title":"Liftable Axles"},{"location":"vehicle-creation/suspension/#example-1_1","text":"Creating a basic liftable axle is as easy as replacing part of the supporting beams with commands. Note that if your commands are too long/too short, your shocks will break. In the picture above, the commands lift the node that the shock is attached to, effectively moving the axle.","title":"Example 1"},{"location":"vehicle-creation/suspension/#example-2_1","text":"Another way of accomplishing this same concept without stressing the axles is to lift the shocks, instead of the wheel. The commands will lift the shock and, consequently, the wheel will travel with the shock thus lifting the axle without stressing the shocks. This allows you to have very stiff shocks without fear of breaking. Example truck Top image: Axle lowered. Bottom image: Axle raised. Blue: A-arms. Green: A arm to connect shocks and commands (Shocks are on outside, commands on inside) .","title":"Example 2"},{"location":"vehicle-creation/tracked-vehicles/","text":"Tracked vehicles (using slidenodes) \u00b6 Intro \u00b6 This is a step-by-step tutorial of how to make tracks for crawler crane/excavator/bulldozer/other heavy machines without suspension. This page assumes knowledge softbody basics: basic N/B, rotators, submeshing and slidenodes. Your brain also has a naturally built-in physics simulator. Try to use it when you build the tracks. Look at your structure, imagine the nodes moving around as they would do in RoR, and try to see if your structure will work. It's not hard. NOTES about the pictures: the SketchUp models are only to show the structure in 3D, you CAN NOT make working N/B track in SketchUp . models show very few beams just to make it easier to see the basic structure. Of course the actual N/B structure shall have more beams to make it stronger. Step 1: Making the frame \u00b6 The shape of the frame always varies depending on the vehicle you make or how you want to make it, of course. The picture shows a very simple structure of a crawler crane/excavator frame. And by simple I mean I have left out a lot of beams to make it easier to see the structure, placement of nodes etc. The ends of the frame as you can see, consist of a group of nodes (nodes 1-5), forming a rounded end. Depending on the number of nodes you use, and how well you place them, determines how well and smoothly the track chain will bend around the ends. The example as you can see uses 10 nodes on each end, or 5 nodes when you see from the side, which makes a fairly smooth bending. To help making a good half-circle shaped bending, you can temporarily place a wheel (not showed in the picture) on the \"center node (node 6)\" and follow the shape of the wheel. Then don't forget to enable viewing wheels in the editor (View> Wheels) and remove the wheel when you are done. Note about the nodes: Don't forget to make the nodes of the bottom *of the crawler frame un-contactable with the ground with the \"c\" option for nodes. Red dots = crawler frame nodes, Black tubes = crawler frame beams Step 2: Making the track links \u00b6 Placement: As the track link nodes will work as slidenodes going around the crawler frame, they should be placed pretty accurately on the beams forming the rail, and it is important that all track links are the same length. \u00b1 one centimeter or so doesn't matter, but avoid larger differences. There are some methods for this: Trigonometry, somewhat advanced math calculating. Making the N/B using a program like Blender, where you would be able to create a long chain of links and then angle them to the correct position (I've never tried that in Blender, but it is possible right? ). Do like I did, using a physical ruler. Yes, I actually used a plastic ruler on the computer monitor. Just begin by making one track link with a fitting length, measure the distance on the monitor between the nodes and continue placing the nodes with the ruler. When the nodes are placed, it's time to define the slidenodes and rails in the truck file. And don't forget to make all track nodes contactable, in order to be driven by the submesh in the sprockets Blue dots = track nodes Beams or shocks? In some cases the track links need to change length *in order to keep in place on the sliderail, and in most cases it's only about *a few millimeters. Therefore I would recommend using shocks for all the beams *in the track links except the ones going straight sideways: Purple lines = shocks The shocks don't need to be able to extend or retract much at all, Maximum contraction and extension values like 0.05 for the shocks should work well. Length and number of links? How long each track link shall be is up to you. The more links you make (the shorter they are), the more nodes does it take and therefore more FPS heavy, but it also drives more smooth. Snowcats and other similar all-terrain machines would be more realistic with a larger number of track links, while heavy machines like excavators and crawler cranes could use less as they are driving quite slow. Step 3: Making the driving sprocket \u00b6 Size : The sprocket should not be too big or too small. If it is too small, there is a chance the nodes will slide/jump over the submeshes in the sprocket. If it is too big it's not good either, how I shall explain this though, I don't know. In the example below, the size of the sprocket compared to the \"bending frame\" thingy is fairly good. Number of \"sections\" : In my example below the sprocket is built up by 6 \"sections\". How many sections that are needed depends on size of the track and the length of the track links. When you have built the basic structure of the sprocket, add the contactable submesh and use the \"U\" option for contact. Since the submesh is supposed to be invisible, simply skip the \"texcoords\" lines and add only \"cab\" lines. \"Light pink\" dots and lines = sprocket nodes and beams Also keep in mind that the sprocket always need to be wider than the track itself. One or two sprockets? Depending on the kind of vehicle, how much force is applied to the tracks, how many nodes you are willing to use etc, you may want to make either one or two driving sprockets per track. If you want two sprockets, it is very easy to drive the other sprocket with the first one (the one that is driven by the rotator, see further down for how to make the rotators). In the example with the 6-section sprocket, it can be done easily by connect three beams per side like the picture shows: Step 4: Making the rotator for the driving sprocket \u00b6 Now it's time to define rotator for the sprocket. The size of the rotator can without problems be about the same size *as the sprocket itself, But it's recommended that you don't make the rotators *too small, for this matter: ((TODO: fix link)) *[ http://www.rigsofrods.com/threads/66248-Rotators-flexing-%28flexing-rotation-force-NOT-beams%29 ] Note : Don't forget to make the nodes of the rotators sprockets *un-contactable with the ground with the \"c\" option for nodes. Green : Rotator, Olive green : beams connecting the rotator to the sprocket Orange : beams connecting the rotator to the crawler frame. The finished result looks something like this (track link beams are left out). The yellow planes in the 2 nd picture are the submesh (will be invisible ingame). This is the right track of my crawler crane, viewed in Blender with plugins: Hope it was helpful! This tutorial was created by AIN_002 and added to the (retired) wiki by Steve Ror Fan.","title":"Tracked vehicles"},{"location":"vehicle-creation/tracked-vehicles/#tracked-vehicles-using-slidenodes","text":"","title":"Tracked vehicles (using slidenodes)"},{"location":"vehicle-creation/tracked-vehicles/#intro","text":"This is a step-by-step tutorial of how to make tracks for crawler crane/excavator/bulldozer/other heavy machines without suspension. This page assumes knowledge softbody basics: basic N/B, rotators, submeshing and slidenodes. Your brain also has a naturally built-in physics simulator. Try to use it when you build the tracks. Look at your structure, imagine the nodes moving around as they would do in RoR, and try to see if your structure will work. It's not hard. NOTES about the pictures: the SketchUp models are only to show the structure in 3D, you CAN NOT make working N/B track in SketchUp . models show very few beams just to make it easier to see the basic structure. Of course the actual N/B structure shall have more beams to make it stronger.","title":"Intro"},{"location":"vehicle-creation/tracked-vehicles/#step-1-making-the-frame","text":"The shape of the frame always varies depending on the vehicle you make or how you want to make it, of course. The picture shows a very simple structure of a crawler crane/excavator frame. And by simple I mean I have left out a lot of beams to make it easier to see the structure, placement of nodes etc. The ends of the frame as you can see, consist of a group of nodes (nodes 1-5), forming a rounded end. Depending on the number of nodes you use, and how well you place them, determines how well and smoothly the track chain will bend around the ends. The example as you can see uses 10 nodes on each end, or 5 nodes when you see from the side, which makes a fairly smooth bending. To help making a good half-circle shaped bending, you can temporarily place a wheel (not showed in the picture) on the \"center node (node 6)\" and follow the shape of the wheel. Then don't forget to enable viewing wheels in the editor (View> Wheels) and remove the wheel when you are done. Note about the nodes: Don't forget to make the nodes of the bottom *of the crawler frame un-contactable with the ground with the \"c\" option for nodes. Red dots = crawler frame nodes, Black tubes = crawler frame beams","title":"Step 1: Making the frame"},{"location":"vehicle-creation/tracked-vehicles/#step-2-making-the-track-links","text":"Placement: As the track link nodes will work as slidenodes going around the crawler frame, they should be placed pretty accurately on the beams forming the rail, and it is important that all track links are the same length. \u00b1 one centimeter or so doesn't matter, but avoid larger differences. There are some methods for this: Trigonometry, somewhat advanced math calculating. Making the N/B using a program like Blender, where you would be able to create a long chain of links and then angle them to the correct position (I've never tried that in Blender, but it is possible right? ). Do like I did, using a physical ruler. Yes, I actually used a plastic ruler on the computer monitor. Just begin by making one track link with a fitting length, measure the distance on the monitor between the nodes and continue placing the nodes with the ruler. When the nodes are placed, it's time to define the slidenodes and rails in the truck file. And don't forget to make all track nodes contactable, in order to be driven by the submesh in the sprockets Blue dots = track nodes Beams or shocks? In some cases the track links need to change length *in order to keep in place on the sliderail, and in most cases it's only about *a few millimeters. Therefore I would recommend using shocks for all the beams *in the track links except the ones going straight sideways: Purple lines = shocks The shocks don't need to be able to extend or retract much at all, Maximum contraction and extension values like 0.05 for the shocks should work well. Length and number of links? How long each track link shall be is up to you. The more links you make (the shorter they are), the more nodes does it take and therefore more FPS heavy, but it also drives more smooth. Snowcats and other similar all-terrain machines would be more realistic with a larger number of track links, while heavy machines like excavators and crawler cranes could use less as they are driving quite slow.","title":"Step 2: Making the track links"},{"location":"vehicle-creation/tracked-vehicles/#step-3-making-the-driving-sprocket","text":"Size : The sprocket should not be too big or too small. If it is too small, there is a chance the nodes will slide/jump over the submeshes in the sprocket. If it is too big it's not good either, how I shall explain this though, I don't know. In the example below, the size of the sprocket compared to the \"bending frame\" thingy is fairly good. Number of \"sections\" : In my example below the sprocket is built up by 6 \"sections\". How many sections that are needed depends on size of the track and the length of the track links. When you have built the basic structure of the sprocket, add the contactable submesh and use the \"U\" option for contact. Since the submesh is supposed to be invisible, simply skip the \"texcoords\" lines and add only \"cab\" lines. \"Light pink\" dots and lines = sprocket nodes and beams Also keep in mind that the sprocket always need to be wider than the track itself. One or two sprockets? Depending on the kind of vehicle, how much force is applied to the tracks, how many nodes you are willing to use etc, you may want to make either one or two driving sprockets per track. If you want two sprockets, it is very easy to drive the other sprocket with the first one (the one that is driven by the rotator, see further down for how to make the rotators). In the example with the 6-section sprocket, it can be done easily by connect three beams per side like the picture shows:","title":"Step 3: Making the driving sprocket"},{"location":"vehicle-creation/tracked-vehicles/#step-4-making-the-rotator-for-the-driving-sprocket","text":"Now it's time to define rotator for the sprocket. The size of the rotator can without problems be about the same size *as the sprocket itself, But it's recommended that you don't make the rotators *too small, for this matter: ((TODO: fix link)) *[ http://www.rigsofrods.com/threads/66248-Rotators-flexing-%28flexing-rotation-force-NOT-beams%29 ] Note : Don't forget to make the nodes of the rotators sprockets *un-contactable with the ground with the \"c\" option for nodes. Green : Rotator, Olive green : beams connecting the rotator to the sprocket Orange : beams connecting the rotator to the crawler frame. The finished result looks something like this (track link beams are left out). The yellow planes in the 2 nd picture are the submesh (will be invisible ingame). This is the right track of my crawler crane, viewed in Blender with plugins: Hope it was helpful! This tutorial was created by AIN_002 and added to the (retired) wiki by Steve Ror Fan.","title":"Step 4: Making the rotator for the driving sprocket"},{"location":"vehicle-creation/vehicle-concepts/","text":"Vehicle concepts \u00b6 Rigs of Rods (RoR) is not your typical vehicle simulator. Other vehicle simulators use fake suspension, mesh-based vehicles with no mass distribution, predetermined damage from collisions, and approximated fuzzy-dice sway models. Rigs of Rods uses a very unique way to simulate a truck. In fact, it does not simulates a truck at all ... It only simulates a set of points, called Nodes interconnected by Beams . Assembling these elements to form the structure of a truck makes a truck. But you could also assemble them to do a car, a bike, a giant robot, a boat, a plane, a building, a bridge, anything, and it would be simulated the same way. To grasp the idea, take a look at these games that use the same construction logic: Geomag is a real-world construction game that uses metallic balls and magnets. Bridge Construction Set is a video game where you build and test bridges. To build a truck in Rigs of rods, you need to design a structural chassis composed of a lattice of rods. You have to define : Nodes : these are the points of interconnection of rods (the same as the balls in Geomag). For the physics engine, these nodes are the only concrete elements of the truck: they have a mass and can collide with other elements, but they are dimensionless. Beams : (or rods): they interconnect nodes. For the physics engine they are massless and are composed of a spring and a damper, so their length can change depending on the forces it bears. They are monodimensional - they have length, but no thickness. Also, if you want to \"dress\" the chassis with a texture, you can \"fill\" any node triangle with a polygon (like the panels in geomag, but in RoR they deform like if they were made of rubber). This is what the submesh section if for. One important thing is that the interconnection of beams to nodes uses what is known as a ball joint . That means that no force opposes a change of angles between two beams connected to the same node. It may sound abstract, but in practice you will immediately see the result : anything that is not triangulated will fold . To design rigid bodies you must have triangles everywhere, in any direction. So for example, if you have a cubic structure, you must add diagonal rods in all the faces. If you let a square somewhere it will fold, or it will be a soft zone (it will stay rigid because of other parts of the geometry, adding strains to this part). Why did we chose ball joints? Because: It requires less computation to simulate, and keep the physics simple (because of this, the simulated elements are dimensionless, that means that a lot of physics law are irrelevant and do not need to be simulated. The good news is that the laws we ignored (as rotation momentum, center of gravity, centripetal force...), are here anyway, as you can observe, because they emerge from the complex interaction between beams) It can be used to build almost any kind of joint. By assembling rods in certain way, you can constraint movements and synthesize most useful joints. For example the suspensions and direction of trucks uses such construction techniques to limit movements only in certain directions. A note on beam strength: A beam's length changes depending on the forces (compressive or extensive) it bears. When the forces are gone, it returns to its original length (elastic deformation). If the forces are too strong, it will not return to its original length (plastic deformation). If the forces are even stronger, it will snap and disappear!","title":"Vehicle (Node/Beam) concepts"},{"location":"vehicle-creation/vehicle-concepts/#vehicle-concepts","text":"Rigs of Rods (RoR) is not your typical vehicle simulator. Other vehicle simulators use fake suspension, mesh-based vehicles with no mass distribution, predetermined damage from collisions, and approximated fuzzy-dice sway models. Rigs of Rods uses a very unique way to simulate a truck. In fact, it does not simulates a truck at all ... It only simulates a set of points, called Nodes interconnected by Beams . Assembling these elements to form the structure of a truck makes a truck. But you could also assemble them to do a car, a bike, a giant robot, a boat, a plane, a building, a bridge, anything, and it would be simulated the same way. To grasp the idea, take a look at these games that use the same construction logic: Geomag is a real-world construction game that uses metallic balls and magnets. Bridge Construction Set is a video game where you build and test bridges. To build a truck in Rigs of rods, you need to design a structural chassis composed of a lattice of rods. You have to define : Nodes : these are the points of interconnection of rods (the same as the balls in Geomag). For the physics engine, these nodes are the only concrete elements of the truck: they have a mass and can collide with other elements, but they are dimensionless. Beams : (or rods): they interconnect nodes. For the physics engine they are massless and are composed of a spring and a damper, so their length can change depending on the forces it bears. They are monodimensional - they have length, but no thickness. Also, if you want to \"dress\" the chassis with a texture, you can \"fill\" any node triangle with a polygon (like the panels in geomag, but in RoR they deform like if they were made of rubber). This is what the submesh section if for. One important thing is that the interconnection of beams to nodes uses what is known as a ball joint . That means that no force opposes a change of angles between two beams connected to the same node. It may sound abstract, but in practice you will immediately see the result : anything that is not triangulated will fold . To design rigid bodies you must have triangles everywhere, in any direction. So for example, if you have a cubic structure, you must add diagonal rods in all the faces. If you let a square somewhere it will fold, or it will be a soft zone (it will stay rigid because of other parts of the geometry, adding strains to this part). Why did we chose ball joints? Because: It requires less computation to simulate, and keep the physics simple (because of this, the simulated elements are dimensionless, that means that a lot of physics law are irrelevant and do not need to be simulated. The good news is that the laws we ignored (as rotation momentum, center of gravity, centripetal force...), are here anyway, as you can observe, because they emerge from the complex interaction between beams) It can be used to build almost any kind of joint. By assembling rods in certain way, you can constraint movements and synthesize most useful joints. For example the suspensions and direction of trucks uses such construction techniques to limit movements only in certain directions. A note on beam strength: A beam's length changes depending on the forces (compressive or extensive) it bears. When the forces are gone, it returns to its original length (elastic deformation). If the forces are too strong, it will not return to its original length (plastic deformation). If the forces are even stronger, it will snap and disappear!","title":"Vehicle concepts"},{"location":"vehicle-creation/weight-tuning/","text":"Weight tuning \u00b6 Introduction \u00b6 SUMOWEIGHT ? A guide to tune your trucks to a realistic weight I will try to explain here how to tune your trucks weight without loosing it characteristics. A lot of things have changed with the recent physics updates and there is no need for overweighed trucks at all in ROR anymore. This guide is based on RoR version 0.36.3+. All templates in this guide are free to use, you don't need to give any credits. Why go for a realistic weight ? Well, RoR gets more and more realistic physics in the last updates, so i think for gameplay and especially multiplayer trucks should have realistic weights in the future, so loading, lifting and crashing stuff works propper. Since the new physics support this, here is your tutorial: Here we go...first of all a template truck: 300 kg... RoR's first working 200 km/h light weight truck Download here Its a truck featuring independent suspended front wheels and a rigid rear axle, it has a realistic steering geometry and is basically built for baja(gravel) terrains. Overall weight including wheels is 300 kg, featuring working wheel nodearms and a small aerodynamic help for drifting and jumping ( to avoid zips its visible in the template file ) Spawns in the street cars (146) category. Step by step weight tuning Minimass \u00b6 Truck file format - minimass minimass 5.0 Even lower settings are fine. You need to add loadweight to every single node for weight tuning. Please refer to the template truck. You can use set_node_defaults for group loadweights here too, but tweaking single nodes does not work and so its not recommended A minimass setting lower then you minimum loadweight to a node makes no sense and will not provide any benefit. Set_beam_defaults \u00b6 Truck file format - set_beam_defaults set_beam_defaults 12000000, 350, 200000, 2000000 A good setting for rigid truck parts like suspension and frame with low weight nodes. For lightweight nodes always use LOW damping settings, if you want parts of your truck deform propper while crashing, play around with spring, deform and brake values. NEVEREVER use high dampings, they are responsible for truck explosions at spawn most of the times. Wheels \u00b6 Truck file format - wheels wheels 0.45, 0.3, 10, 13, 11,9999, 1, 1, 20, 22.5, 5000.0, 600.0, tracks/wheelface tracks/wheelband1 Really light weight wheels which work fine with light trucks. If the wheels collapse too often or explode when hitting a wall, gently add some kg and test until you are fine. Increasing the spring rate gently works fine too. Test in small steps until you are satisfied. Overall weight \u00b6 Truck file format - globals globals 50.0, 500.0, tracks/beam A significant low starting weight helps to make trucks light. Please note: Your load weight in this line ( second entry ) should be at least the total loadmass of you nodes, better higher. it does NOT apply to the truck weight if you set it higher then the actual sum of your loadweights. Shocks \u00b6 Truck file format - shocks/shocks2 shocks2 ;front axle 10, 3, 8500, 1250, 5, 5, 8500, 1250, 5, 5, 1, 1, 1.05, vs Use LOW shock settings now, especially the damping really needs to be LOW (less than 5k) for testing If your trucks spawns stable, gently alter spring and damping settings until you are fine with the suspension works. Overall guideline: lightweight trucks use low numbers ;) Engine/Engoption/Brakes \u00b6 Truck file format - engine engine 1350.0, 3350.0, 350.0, 4.1, 1.8, 1.8, 1.8, 1.1, 0.8, 0.7, -1.0 engoption 0.125, c, 55, 0.4, 0.8, 0.4 torquecurve gas brakes 600 Low settings for torque, brakes and clutch avoid exploding wheels at higher speeds and while braking hard. Fusedrag \u00b6 Truck file format - fusedrag fusedrag 3, 0, 0.25, NACA0009.afl Your truck not accelerating propper and wheels spinning fast ? Use a small fusedrag. Testing \u00b6 Open RoRConfig -> Debug tab -> Select \"Beam Break Debug\". This will log broken beams to the RoR.log file (Located in Rigs of Rods/logs/RoR.log ), a vital tool for weight tuning. So now spawn your truck, enter it and see it explode. If it does not explode, you didn't push the limits hard enough, if you are fine with your weight and it works for you, you are successfully understood and managed to use the contents of this tutorial. Else, you need to see if the truck disintegrates or the wheels explode. You might enable the replay mode in the configurator and use it to see. If the trucks \"walks/strafes\" around your wheels are too light or their damping is too high. Fix that and try again If the truck explodes or simply some beams break, exit ror and open your ror log (Located in Rigs of Rods/logs/RoR.log ) Search for \"xxx\" in the log file, the first entry is the beam that broke first. Write down the node numbers, open your truck file and add some kg to both of the nodes. Spawn your truck and do this until you can spawn your truck without braking one single beam When you managed to spawn your truck without any broken beam, start testing it. You might find some more beams that break when jumping/landing hard or using commands etc. The procedure is always the same, look into your RoR.log file, identify the nodes which were attached to breaking beams and gently rise their weight until you got them working properly. Overall, this way of weight tuning should lead to a fast and simple way to build really lightweight trucks.","title":"Weight tuning"},{"location":"vehicle-creation/weight-tuning/#weight-tuning","text":"","title":"Weight tuning"},{"location":"vehicle-creation/weight-tuning/#introduction","text":"SUMOWEIGHT ? A guide to tune your trucks to a realistic weight I will try to explain here how to tune your trucks weight without loosing it characteristics. A lot of things have changed with the recent physics updates and there is no need for overweighed trucks at all in ROR anymore. This guide is based on RoR version 0.36.3+. All templates in this guide are free to use, you don't need to give any credits. Why go for a realistic weight ? Well, RoR gets more and more realistic physics in the last updates, so i think for gameplay and especially multiplayer trucks should have realistic weights in the future, so loading, lifting and crashing stuff works propper. Since the new physics support this, here is your tutorial: Here we go...first of all a template truck: 300 kg... RoR's first working 200 km/h light weight truck Download here Its a truck featuring independent suspended front wheels and a rigid rear axle, it has a realistic steering geometry and is basically built for baja(gravel) terrains. Overall weight including wheels is 300 kg, featuring working wheel nodearms and a small aerodynamic help for drifting and jumping ( to avoid zips its visible in the template file ) Spawns in the street cars (146) category. Step by step weight tuning","title":"Introduction"},{"location":"vehicle-creation/weight-tuning/#minimass","text":"Truck file format - minimass minimass 5.0 Even lower settings are fine. You need to add loadweight to every single node for weight tuning. Please refer to the template truck. You can use set_node_defaults for group loadweights here too, but tweaking single nodes does not work and so its not recommended A minimass setting lower then you minimum loadweight to a node makes no sense and will not provide any benefit.","title":"Minimass"},{"location":"vehicle-creation/weight-tuning/#set_beam_defaults","text":"Truck file format - set_beam_defaults set_beam_defaults 12000000, 350, 200000, 2000000 A good setting for rigid truck parts like suspension and frame with low weight nodes. For lightweight nodes always use LOW damping settings, if you want parts of your truck deform propper while crashing, play around with spring, deform and brake values. NEVEREVER use high dampings, they are responsible for truck explosions at spawn most of the times.","title":"Set_beam_defaults"},{"location":"vehicle-creation/weight-tuning/#wheels","text":"Truck file format - wheels wheels 0.45, 0.3, 10, 13, 11,9999, 1, 1, 20, 22.5, 5000.0, 600.0, tracks/wheelface tracks/wheelband1 Really light weight wheels which work fine with light trucks. If the wheels collapse too often or explode when hitting a wall, gently add some kg and test until you are fine. Increasing the spring rate gently works fine too. Test in small steps until you are satisfied.","title":"Wheels"},{"location":"vehicle-creation/weight-tuning/#overall-weight","text":"Truck file format - globals globals 50.0, 500.0, tracks/beam A significant low starting weight helps to make trucks light. Please note: Your load weight in this line ( second entry ) should be at least the total loadmass of you nodes, better higher. it does NOT apply to the truck weight if you set it higher then the actual sum of your loadweights.","title":"Overall weight"},{"location":"vehicle-creation/weight-tuning/#shocks","text":"Truck file format - shocks/shocks2 shocks2 ;front axle 10, 3, 8500, 1250, 5, 5, 8500, 1250, 5, 5, 1, 1, 1.05, vs Use LOW shock settings now, especially the damping really needs to be LOW (less than 5k) for testing If your trucks spawns stable, gently alter spring and damping settings until you are fine with the suspension works. Overall guideline: lightweight trucks use low numbers ;)","title":"Shocks"},{"location":"vehicle-creation/weight-tuning/#engineengoptionbrakes","text":"Truck file format - engine engine 1350.0, 3350.0, 350.0, 4.1, 1.8, 1.8, 1.8, 1.1, 0.8, 0.7, -1.0 engoption 0.125, c, 55, 0.4, 0.8, 0.4 torquecurve gas brakes 600 Low settings for torque, brakes and clutch avoid exploding wheels at higher speeds and while braking hard.","title":"Engine/Engoption/Brakes"},{"location":"vehicle-creation/weight-tuning/#fusedrag","text":"Truck file format - fusedrag fusedrag 3, 0, 0.25, NACA0009.afl Your truck not accelerating propper and wheels spinning fast ? Use a small fusedrag.","title":"Fusedrag"},{"location":"vehicle-creation/weight-tuning/#testing","text":"Open RoRConfig -> Debug tab -> Select \"Beam Break Debug\". This will log broken beams to the RoR.log file (Located in Rigs of Rods/logs/RoR.log ), a vital tool for weight tuning. So now spawn your truck, enter it and see it explode. If it does not explode, you didn't push the limits hard enough, if you are fine with your weight and it works for you, you are successfully understood and managed to use the contents of this tutorial. Else, you need to see if the truck disintegrates or the wheels explode. You might enable the replay mode in the configurator and use it to see. If the trucks \"walks/strafes\" around your wheels are too light or their damping is too high. Fix that and try again If the truck explodes or simply some beams break, exit ror and open your ror log (Located in Rigs of Rods/logs/RoR.log ) Search for \"xxx\" in the log file, the first entry is the beam that broke first. Write down the node numbers, open your truck file and add some kg to both of the nodes. Spawn your truck and do this until you can spawn your truck without braking one single beam When you managed to spawn your truck without any broken beam, start testing it. You might find some more beams that break when jumping/landing hard or using commands etc. The procedure is always the same, look into your RoR.log file, identify the nodes which were attached to breaking beams and gently rise their weight until you got them working properly. Overall, this way of weight tuning should lead to a fast and simple way to build really lightweight trucks.","title":"Testing"},{"location":"vehicle-creation/wheels-axles-steering/","text":"Wheels, axles, steering \u00b6 Wheels \u00b6 wheels are simply structures that the game creates automatically out of standard features to make creating vehicles easier. They are simply nodes connected by beams with a contactable submesh . They are unique in that they will rotate when given input to accelerate. Wheels are the most basic wheels in the game. The width of a wheel is determined by the distance between the two reference nodes and is composed of pie slices known as rays. The more rays a wheel has, the smoother it will be but will also contain more nodes and beams and consequently lower performance. It is considered good form to keep your rays between 10 and 20. The optional snode option allows for game-managed Axle Rigidity . This will keep the two wheel reference nodes in line under normal conditions. If snode is NOT used, you must enter 9999. Nodes 2 and 3 would be mounted to the chassis with wheels mounted on nodes 1,2 and 3,4 wheels ;radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, facemat bandmat 0.54, 1, 12, 1, 2, 9999, 1, 1, 25, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 0.54, 1, 12, 3, 4, 9999, 1, 1, 23, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 First step: The snode is Disabled ( The data is 9999), the nodes 1 and 4 are hanging just down. wheels ;radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, facemat bandmat 0.54, 1, 12, 1, 2, 3, 1, 1, 25, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 0.54, 1, 12, 3, 4, 9999, 1, 1, 23, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 Second step: You type 3 to the snode option of the wheel 1,2. Now node 1 will always have the ambition to be at the same \"line\" like the nodes 2 and 3. wheels ;radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, facemat bandmat 0.54, 1, 12, 1, 2, 3, 1, 1, 25, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 0.54, 1, 12, 3, 4, 2, 1, 1, 23, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 Third step: You type 2 to the snode option of the wheel 3,4. Now all nodes will be on one level / line even node 1 and 4 aren't mounted primary to the chassis. Wheels2 \u00b6 This feature improves the default wheels section by splitting wheels into rims and tires. This allows the player to set tire pressure with the keyboard. Wheels2 (also known as the \"complex wheel model\") allows you to separate the wheel [rim] from the tire (tyre). This requires extra syntax, namely specifying the characteristics of the wheel versus the tire. Traditionally the wheel will be very rigid with the tire being much less so. The rigidity of wheels2 tires can be altered by holding [ and ] ingame, resulting in this: Inflated tire Deflated tire The adjustable tire pressure allows you to adjust handling in real-time. Lower pressure creates more grip while higher pressure creates more stability. Meshwheels \u00b6 Meshwheels takes advantage of a mesh's static nature. It also creates a smoother tire. The wheel rim is a standard Ogre3D mesh. Meshwheels are very similar to normal wheels, but require specification of the wheel rim radius. Likewise, the direction the wheel is facing must be specified in order for the mesh to be rotated properly. 1 Here is an example picture of a rim mesh, as it should be modeled. The actual tire will be added dynamically and will still flex. This material should be slightly different to other tire materials as it covers both the tire face and the tire wall: Notes \u00b6 The mesh should be centered (Where should the wheel be placed in the L/R direction? Should it face left or right?) and of the right size for the wheel you want to do: its outer diameter should be as the rim_radius parameter, and its width should be the same as the distance between node1 and node2 . All wheels are able to do skid steering. See the steering chapter. It is considered good form to keep your rays between 10 and 20. Axles \u00b6 This section defines axles on a vehicle, allowing more accurate distribution of torque among the wheels. Sample axle section: axles w1(1 2), w2(3 4), d(ol) ; axle 1 w1(5 6), w2(7 8), d(l) ; axle 2 The axle section introduces open differentials, and Spooled (aka locked) differentials. By adding axles to your vehicle file you override the propulsed property for the tires. Only wheels connected to an axle are powered, if multiple axles are defined the axles are interconnected in a locked manner. If no axle section is defined the old model of equal power distribution is used. Because the axle sections looks up already defined wheels, it must be defined AFTER the wheels have been defined The axle section if different from other sections in that it is broken into properties, properties are not order dependent, currently the available properties are: w1(<node1> <node2>) - this defines which wheel the axle is attached to, <node1> and <node2> refer to the node1 and node2 as defined in the wheel section w2(<node1> <node2>) - wheel 2, same as w1, this is the second wheel attached to the axle. w1 and w2 are interchangeable. d(<list of diff types>) - Defines the available differential types for this axle. the list of axles is cycled through in the order specified, differential types maybe specified more than once. Each differential type is specified by a single letter, the letters are not to be separated by spaces or any other character. if no differentials are specified the axles will default to opened and locked. Available differential types o - open l - locked s - Split evenly (each wheel gets equal torque regardless of wheel speed) Problems? \u00b6 Wheel weight has a big effect on top speed since heavy wheels have lots of rolling resistance in RoR. Try to make the wheels as light as possible. If the wheels explode, they probably have too high damping for the weight. If the wheels and rpm needle start shaking, set lower clutch torque in the engoption section. This can take some tweaking, but it's worth it. Used together with fusedrag and realistic truck weight, real torque is often enough so there's no need to have several thousand hp engines. That makes the trucks easier to drive and better handling. Axle Rigidity \u00b6 See Also: Suspension The Axle Rigidity keeps the wheel aligned with the axle of the vehicle. It is used to avoid having to make a complex structure in order to hold the wheel in place. In fact, it keeps the two wheel nodes and the defined node in a straight line. This is intended to use with solid non-steerable axles. However, you probably can devise a way to use this as independent suspension. Normally a wheel needs some sort of pyramidal hub to support it, such as the image to the right. Axle rigidity allows you to avoid making this by doing some internal magic to keep the nodes supported. Wheels need at least 2 nodes to define their width, and the node used for axle rigidity is the innermost node of the wheel. Here, the black beam are normal beams. Red beams are a crude suspension set up. Light-blue nodes are the outermost wheel nodes, while green nodes are axle rigidity nodes. For the left wheel (defined by nodes 1 and 2), the special rigidity node will be 3, and for the right wheel (defined by nodes 3 and 4), the special rigidity node will be 2. Reference Arm Node \u00b6 This is to help modders, as I have seen a few asking about what this does. What it does \u00b6 The reference arm node in the .truck file serves an important purpose. That purpose is to determine where the torque reaction in a chassis will be. If that node is placed in front of the specified wheel, then it will provide more traction, as the wheel pushes the chassis down into the ground. This is good for vehicles such as off-roaders and high-grip racecars. If the arm node is behind the specified wheel, then grip will be reduced as the wheel will help lift the chassis off the ground. This is useful for drifters and other cars and trucks that need less grip. How it is Implemented \u00b6 The arm node is implemented through the wheels section of a .truck file. Example Vehicle \u00b6 A good example vehicle that shows how the arm node works is box5diesel's Baja Trophy Truck . When in the air, if you accelerate in 6 th gear, the nose of the truck will be lifted up. If you brake while in the air, the nose of the truck will be pushed down. This is due to the arm nodes of the rear wheels being located in front of the rear axle, and the arm nodes for the front wheels, located behind the front axle. Example Diagram \u00b6 This is a rough diagram I made to show how it works. In the top diagram, the arm node is behind the wheel, so as the wheel spins counterclockwise, it applies upward force to the node(red) in the blue circle, therefore imparting less traction as the chassis is pushed upward .In the bottom diagram, the arm node is in front of the wheel, so as the wheel spins counterclockwise, it applies downward force to the circled node, therefore imparting more traction as the chassis is pushed downward . Steering \u00b6 Steering is made possible with the use of hydros . A proven steering set up which involves a diamond wheel support and a small chassis which the suspension is attached to. When this concept is realized, steering is not too difficult. Wheel Mount \u00b6 This is a typical wheel support diamond (\"face octahedron\"). This will carry the wheel independently from the main chassis. For example: The \"wheel\" nodes labeled here will become the position for the wheels . The distance between the two nodes will determine the wheel width. It is wise to make the diamond symmetrical for stability (that is, the height equals the width). You will need one of these for every wheel that is steerable. If you find your nodes are contacting the ground and obstructing movement, you can make specific nodes non-contactable. See the nodes syntax. Axle \u00b6 The axle is actually simply built out of four beams: But you need a rocker, too. However it's easy to build. This only requires two nodes in front of the axle (be aware these nodes should be at least 80cm from the axle away) and beams attached to them as shown at this picture: Hydros \u00b6 After the steering chassis is completed, the hydros](/vehicle-creation/fileformat-truck#hydros) can be added. Hydros are simply beams that change length when you press the right and left arrow keys, and are typically used for steering (although you can use them for other purposes if you so wanted). In order to define a hydro, some specific information is needed. Node 1 - One end of the hydro Node 2 - The other end of the hydro Factor - The decimal percentage (0.2 = 20%) representing how far a hydro can extend. The length of a hydro can be determined by Original Length \u00b1 (Original Length * Factor) A hydro can also have two optional parameters: i - The Hydro will be invisible s - At approximately 20km/h to 40km/h the factor will be lowered gradually to 0 and will then be disabled. This is commonly used for rear-wheel turning, as it is disabled at high speed. Example Syntax: hydros ;node1, node2, factor, options</dt> 43, 37, -0.2, i 46, 36, 0.2, s The following example shows how hydros will push and pull nodes in a direction to induce steering: Finished Steering Axle \u00b6 The finished axle can look like this: Don't forget to add suspension (as covered in the previous chapter) Braked Steering \u00b6 It is possible to have a steering system that only turns one side of wheels. In the wheels section, set the Wheel Braking value to 2 or 3 for left or right wheel respectively. This works well for emulating tracked vehicles such as bulldozers. These usually do not work well at high speed.","title":"Wheels, axles, steering"},{"location":"vehicle-creation/wheels-axles-steering/#wheels-axles-steering","text":"","title":"Wheels, axles, steering"},{"location":"vehicle-creation/wheels-axles-steering/#wheels","text":"wheels are simply structures that the game creates automatically out of standard features to make creating vehicles easier. They are simply nodes connected by beams with a contactable submesh . They are unique in that they will rotate when given input to accelerate. Wheels are the most basic wheels in the game. The width of a wheel is determined by the distance between the two reference nodes and is composed of pie slices known as rays. The more rays a wheel has, the smoother it will be but will also contain more nodes and beams and consequently lower performance. It is considered good form to keep your rays between 10 and 20. The optional snode option allows for game-managed Axle Rigidity . This will keep the two wheel reference nodes in line under normal conditions. If snode is NOT used, you must enter 9999. Nodes 2 and 3 would be mounted to the chassis with wheels mounted on nodes 1,2 and 3,4 wheels ;radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, facemat bandmat 0.54, 1, 12, 1, 2, 9999, 1, 1, 25, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 0.54, 1, 12, 3, 4, 9999, 1, 1, 23, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 First step: The snode is Disabled ( The data is 9999), the nodes 1 and 4 are hanging just down. wheels ;radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, facemat bandmat 0.54, 1, 12, 1, 2, 3, 1, 1, 25, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 0.54, 1, 12, 3, 4, 9999, 1, 1, 23, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 Second step: You type 3 to the snode option of the wheel 1,2. Now node 1 will always have the ambition to be at the same \"line\" like the nodes 2 and 3. wheels ;radius, width, numrays, node1, node2, snode, braked, propulsed, arm, mass, spring, damping, facemat bandmat 0.54, 1, 12, 1, 2, 3, 1, 1, 25, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 0.54, 1, 12, 3, 4, 2, 1, 1, 23, 400.0, 800000.0, 4000.0, tracks/wheelface tracks/wheelband2 Third step: You type 2 to the snode option of the wheel 3,4. Now all nodes will be on one level / line even node 1 and 4 aren't mounted primary to the chassis.","title":"Wheels"},{"location":"vehicle-creation/wheels-axles-steering/#wheels2","text":"This feature improves the default wheels section by splitting wheels into rims and tires. This allows the player to set tire pressure with the keyboard. Wheels2 (also known as the \"complex wheel model\") allows you to separate the wheel [rim] from the tire (tyre). This requires extra syntax, namely specifying the characteristics of the wheel versus the tire. Traditionally the wheel will be very rigid with the tire being much less so. The rigidity of wheels2 tires can be altered by holding [ and ] ingame, resulting in this: Inflated tire Deflated tire The adjustable tire pressure allows you to adjust handling in real-time. Lower pressure creates more grip while higher pressure creates more stability.","title":"Wheels2"},{"location":"vehicle-creation/wheels-axles-steering/#meshwheels","text":"Meshwheels takes advantage of a mesh's static nature. It also creates a smoother tire. The wheel rim is a standard Ogre3D mesh. Meshwheels are very similar to normal wheels, but require specification of the wheel rim radius. Likewise, the direction the wheel is facing must be specified in order for the mesh to be rotated properly. 1 Here is an example picture of a rim mesh, as it should be modeled. The actual tire will be added dynamically and will still flex. This material should be slightly different to other tire materials as it covers both the tire face and the tire wall:","title":"Meshwheels"},{"location":"vehicle-creation/wheels-axles-steering/#notes","text":"The mesh should be centered (Where should the wheel be placed in the L/R direction? Should it face left or right?) and of the right size for the wheel you want to do: its outer diameter should be as the rim_radius parameter, and its width should be the same as the distance between node1 and node2 . All wheels are able to do skid steering. See the steering chapter. It is considered good form to keep your rays between 10 and 20.","title":"Notes"},{"location":"vehicle-creation/wheels-axles-steering/#axles","text":"This section defines axles on a vehicle, allowing more accurate distribution of torque among the wheels. Sample axle section: axles w1(1 2), w2(3 4), d(ol) ; axle 1 w1(5 6), w2(7 8), d(l) ; axle 2 The axle section introduces open differentials, and Spooled (aka locked) differentials. By adding axles to your vehicle file you override the propulsed property for the tires. Only wheels connected to an axle are powered, if multiple axles are defined the axles are interconnected in a locked manner. If no axle section is defined the old model of equal power distribution is used. Because the axle sections looks up already defined wheels, it must be defined AFTER the wheels have been defined The axle section if different from other sections in that it is broken into properties, properties are not order dependent, currently the available properties are: w1(<node1> <node2>) - this defines which wheel the axle is attached to, <node1> and <node2> refer to the node1 and node2 as defined in the wheel section w2(<node1> <node2>) - wheel 2, same as w1, this is the second wheel attached to the axle. w1 and w2 are interchangeable. d(<list of diff types>) - Defines the available differential types for this axle. the list of axles is cycled through in the order specified, differential types maybe specified more than once. Each differential type is specified by a single letter, the letters are not to be separated by spaces or any other character. if no differentials are specified the axles will default to opened and locked. Available differential types o - open l - locked s - Split evenly (each wheel gets equal torque regardless of wheel speed)","title":"Axles"},{"location":"vehicle-creation/wheels-axles-steering/#problems","text":"Wheel weight has a big effect on top speed since heavy wheels have lots of rolling resistance in RoR. Try to make the wheels as light as possible. If the wheels explode, they probably have too high damping for the weight. If the wheels and rpm needle start shaking, set lower clutch torque in the engoption section. This can take some tweaking, but it's worth it. Used together with fusedrag and realistic truck weight, real torque is often enough so there's no need to have several thousand hp engines. That makes the trucks easier to drive and better handling.","title":"Problems?"},{"location":"vehicle-creation/wheels-axles-steering/#axle-rigidity","text":"See Also: Suspension The Axle Rigidity keeps the wheel aligned with the axle of the vehicle. It is used to avoid having to make a complex structure in order to hold the wheel in place. In fact, it keeps the two wheel nodes and the defined node in a straight line. This is intended to use with solid non-steerable axles. However, you probably can devise a way to use this as independent suspension. Normally a wheel needs some sort of pyramidal hub to support it, such as the image to the right. Axle rigidity allows you to avoid making this by doing some internal magic to keep the nodes supported. Wheels need at least 2 nodes to define their width, and the node used for axle rigidity is the innermost node of the wheel. Here, the black beam are normal beams. Red beams are a crude suspension set up. Light-blue nodes are the outermost wheel nodes, while green nodes are axle rigidity nodes. For the left wheel (defined by nodes 1 and 2), the special rigidity node will be 3, and for the right wheel (defined by nodes 3 and 4), the special rigidity node will be 2.","title":"Axle Rigidity"},{"location":"vehicle-creation/wheels-axles-steering/#reference-arm-node","text":"This is to help modders, as I have seen a few asking about what this does.","title":"Reference Arm Node"},{"location":"vehicle-creation/wheels-axles-steering/#what-it-does","text":"The reference arm node in the .truck file serves an important purpose. That purpose is to determine where the torque reaction in a chassis will be. If that node is placed in front of the specified wheel, then it will provide more traction, as the wheel pushes the chassis down into the ground. This is good for vehicles such as off-roaders and high-grip racecars. If the arm node is behind the specified wheel, then grip will be reduced as the wheel will help lift the chassis off the ground. This is useful for drifters and other cars and trucks that need less grip.","title":"What it does"},{"location":"vehicle-creation/wheels-axles-steering/#how-it-is-implemented","text":"The arm node is implemented through the wheels section of a .truck file.","title":"How it is Implemented"},{"location":"vehicle-creation/wheels-axles-steering/#example-vehicle","text":"A good example vehicle that shows how the arm node works is box5diesel's Baja Trophy Truck . When in the air, if you accelerate in 6 th gear, the nose of the truck will be lifted up. If you brake while in the air, the nose of the truck will be pushed down. This is due to the arm nodes of the rear wheels being located in front of the rear axle, and the arm nodes for the front wheels, located behind the front axle.","title":"Example Vehicle"},{"location":"vehicle-creation/wheels-axles-steering/#example-diagram","text":"This is a rough diagram I made to show how it works. In the top diagram, the arm node is behind the wheel, so as the wheel spins counterclockwise, it applies upward force to the node(red) in the blue circle, therefore imparting less traction as the chassis is pushed upward .In the bottom diagram, the arm node is in front of the wheel, so as the wheel spins counterclockwise, it applies downward force to the circled node, therefore imparting more traction as the chassis is pushed downward .","title":"Example Diagram"},{"location":"vehicle-creation/wheels-axles-steering/#steering","text":"Steering is made possible with the use of hydros . A proven steering set up which involves a diamond wheel support and a small chassis which the suspension is attached to. When this concept is realized, steering is not too difficult.","title":"Steering"},{"location":"vehicle-creation/wheels-axles-steering/#wheel-mount","text":"This is a typical wheel support diamond (\"face octahedron\"). This will carry the wheel independently from the main chassis. For example: The \"wheel\" nodes labeled here will become the position for the wheels . The distance between the two nodes will determine the wheel width. It is wise to make the diamond symmetrical for stability (that is, the height equals the width). You will need one of these for every wheel that is steerable. If you find your nodes are contacting the ground and obstructing movement, you can make specific nodes non-contactable. See the nodes syntax.","title":"Wheel Mount"},{"location":"vehicle-creation/wheels-axles-steering/#axle","text":"The axle is actually simply built out of four beams: But you need a rocker, too. However it's easy to build. This only requires two nodes in front of the axle (be aware these nodes should be at least 80cm from the axle away) and beams attached to them as shown at this picture:","title":"Axle"},{"location":"vehicle-creation/wheels-axles-steering/#hydros","text":"After the steering chassis is completed, the hydros](/vehicle-creation/fileformat-truck#hydros) can be added. Hydros are simply beams that change length when you press the right and left arrow keys, and are typically used for steering (although you can use them for other purposes if you so wanted). In order to define a hydro, some specific information is needed. Node 1 - One end of the hydro Node 2 - The other end of the hydro Factor - The decimal percentage (0.2 = 20%) representing how far a hydro can extend. The length of a hydro can be determined by Original Length \u00b1 (Original Length * Factor) A hydro can also have two optional parameters: i - The Hydro will be invisible s - At approximately 20km/h to 40km/h the factor will be lowered gradually to 0 and will then be disabled. This is commonly used for rear-wheel turning, as it is disabled at high speed. Example Syntax: hydros ;node1, node2, factor, options</dt> 43, 37, -0.2, i 46, 36, 0.2, s The following example shows how hydros will push and pull nodes in a direction to induce steering:","title":"Hydros"},{"location":"vehicle-creation/wheels-axles-steering/#finished-steering-axle","text":"The finished axle can look like this: Don't forget to add suspension (as covered in the previous chapter)","title":"Finished Steering Axle"},{"location":"vehicle-creation/wheels-axles-steering/#braked-steering","text":"It is possible to have a steering system that only turns one side of wheels. In the wheels section, set the Wheel Braking value to 2 or 3 for left or right wheel respectively. This works well for emulating tracked vehicles such as bulldozers. These usually do not work well at high speed.","title":"Braked Steering"}]}